{
  "KSampler": {
    "input": {
      "required": {
        "model": [
          "MODEL",
          {
            "tooltip": "The model used for denoising the input latent."
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "control_after_generate": true,
            "tooltip": "The random seed used for creating the noise."
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "tooltip": "The number of steps used in the denoising process."
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01,
            "tooltip": "The Classifier-Free Guidance scale balances creativity and adherence to the prompt. Higher values result in images more closely matching the prompt however too high values will negatively impact quality."
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "tooltip": "The algorithm used when sampling, this can affect the quality, speed, and style of the generated output."
          }
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ],
          {
            "tooltip": "The scheduler controls how noise is gradually removed to form the image."
          }
        ],
        "positive": [
          "CONDITIONING",
          {
            "tooltip": "The conditioning describing the attributes you want to include in the image."
          }
        ],
        "negative": [
          "CONDITIONING",
          {
            "tooltip": "The conditioning describing the attributes you want to exclude from the image."
          }
        ],
        "latent_image": [
          "LATENT",
          {
            "tooltip": "The latent image to denoise."
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "The amount of denoising applied, lower values will maintain the structure of the initial image allowing for image to image sampling."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "denoise"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "KSampler",
    "display_name": "KSampler",
    "description": "Uses the provided model, positive and negative conditioning to denoise the latent image.",
    "python_module": "nodes",
    "category": "sampling",
    "output_node": false,
    "output_tooltips": [
      "The denoised latent."
    ]
  },
  "CheckpointLoaderSimple": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ],
          {
            "tooltip": "The name of the checkpoint (model) to load."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "CheckpointLoaderSimple",
    "display_name": "Load Checkpoint",
    "description": "Loads a diffusion model checkpoint, diffusion models are used to denoise latents.",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false,
    "output_tooltips": [
      "The model used for denoising latents.",
      "The CLIP model used for encoding text prompts.",
      "The VAE model used for encoding and decoding images to and from latent space."
    ]
  },
  "CLIPTextEncode": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "tooltip": "The text to be encoded."
          }
        ],
        "clip": [
          "CLIP",
          {
            "tooltip": "The CLIP model used for encoding the text."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncode",
    "display_name": "CLIP Text Encode (Prompt)",
    "description": "Encodes a text prompt using a CLIP model into an embedding that can be used to guide the diffusion model towards generating specific images.",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false,
    "output_tooltips": [
      "A conditioning containing the embedded text used to guide the diffusion model."
    ]
  },
  "CLIPSetLastLayer": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "stop_at_clip_layer": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "stop_at_clip_layer"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPSetLastLayer",
    "display_name": "CLIP Set Last Layer",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "VAEDecode": {
    "input": {
      "required": {
        "samples": [
          "LATENT",
          {
            "tooltip": "The latent to be decoded."
          }
        ],
        "vae": [
          "VAE",
          {
            "tooltip": "The VAE model used for decoding the latent."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "VAEDecode",
    "display_name": "VAE Decode",
    "description": "Decodes latent images back into pixel space images.",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false,
    "output_tooltips": [
      "The decoded image."
    ]
  },
  "VAEEncode": {
    "input": {
      "required": {
        "pixels": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "pixels",
        "vae"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "VAEEncode",
    "display_name": "VAE Encode",
    "description": "",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false
  },
  "VAEEncodeForInpaint": {
    "input": {
      "required": {
        "pixels": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "mask": [
          "MASK"
        ],
        "grow_mask_by": [
          "INT",
          {
            "default": 6,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pixels",
        "vae",
        "mask",
        "grow_mask_by"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "VAEEncodeForInpaint",
    "display_name": "VAE Encode (for Inpainting)",
    "description": "",
    "python_module": "nodes",
    "category": "latent/inpaint",
    "output_node": false
  },
  "VAELoader": {
    "input": {
      "required": {
        "vae_name": [
          [
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "vae_name"
      ]
    },
    "output": [
      "VAE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "VAE"
    ],
    "name": "VAELoader",
    "display_name": "Load VAE",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "EmptyLatentImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 16384,
            "step": 8,
            "tooltip": "The width of the latent images in pixels."
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 16384,
            "step": 8,
            "tooltip": "The height of the latent images in pixels."
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyLatentImage",
    "display_name": "Empty Latent Image",
    "description": "Create a new batch of empty latent images to be denoised via sampling.",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false,
    "output_tooltips": [
      "The empty latent image batch."
    ]
  },
  "LatentUpscale": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "bislerp"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "upscale_method",
        "width",
        "height",
        "crop"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentUpscale",
    "display_name": "Upscale Latent",
    "description": "",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false
  },
  "LatentUpscaleBy": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "bislerp"
          ]
        ],
        "scale_by": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 0.01,
            "max": 8.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "upscale_method",
        "scale_by"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentUpscaleBy",
    "display_name": "Upscale Latent By",
    "description": "",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false
  },
  "LatentFromBatch": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "batch_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 63
          }
        ],
        "length": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "batch_index",
        "length"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentFromBatch",
    "display_name": "Latent From Batch",
    "description": "",
    "python_module": "nodes",
    "category": "latent/batch",
    "output_node": false
  },
  "RepeatLatentBatch": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "amount": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "amount"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "RepeatLatentBatch",
    "display_name": "Repeat Latent Batch",
    "description": "",
    "python_module": "nodes",
    "category": "latent/batch",
    "output_node": false
  },
  "SaveImage": {
    "input": {
      "required": {
        "images": [
          "IMAGE",
          {
            "tooltip": "The images to save."
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI",
            "tooltip": "The prefix for the file to save. This may include formatting information such as %date:yyyy-MM-dd% or %Empty Latent Image.width% to include values from nodes."
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveImage",
    "display_name": "Save Image",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "nodes",
    "category": "image",
    "output_node": true
  },
  "PreviewImage": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "PreviewImage",
    "display_name": "Preview Image",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "nodes",
    "category": "image",
    "output_node": true
  },
  "LoadImage": {
    "input": {
      "required": {
        "image": [
          [
            "1743139954017_TDV72HWXg9.jpeg",
            "1743586696790_gZJJX9pmlv.jpeg",
            "2.jpeg",
            "3.jpeg",
            "4.jpeg",
            "5.png",
            "6.jpeg",
            "bird_input_1.png",
            "example.png",
            "pass_2_upscaled_00001_ (1).png",
            "pass_2_upscaled_00001_.png"
          ],
          {
            "image_upload": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "LoadImage",
    "display_name": "Load Image",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "LoadImageMask": {
    "input": {
      "required": {
        "image": [
          [
            "1.mp4",
            "1743139954017_TDV72HWXg9.jpeg",
            "1743586696790_gZJJX9pmlv.jpeg",
            "2.jpeg",
            "2.mp4",
            "3.jpeg",
            "3.mp4",
            "4.jpeg",
            "4.mp4",
            "5.mp4",
            "5.png",
            "6.jpeg",
            "6.mp4",
            "WanI2V_Result_00016.mp4",
            "WanI2V_Result_00036.mp4",
            "WanI2V_Result_00056.mp4",
            "bird_input_1.png",
            "example.png",
            "finalVideo_v42_2025-04-03.mp4",
            "pass_2_upscaled_00001_ (1).png",
            "pass_2_upscaled_00001_.png"
          ],
          {
            "image_upload": true
          }
        ],
        "channel": [
          [
            "alpha",
            "red",
            "green",
            "blue"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "channel"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "LoadImageMask",
    "display_name": "Load Image (as Mask)",
    "description": "",
    "python_module": "nodes",
    "category": "mask",
    "output_node": false
  },
  "LoadImageOutput": {
    "input": {
      "required": {
        "image": [
          "COMBO",
          {
            "image_upload": true,
            "image_folder": "output",
            "remote": {
              "route": "/internal/files/output",
              "refresh_button": true,
              "control_after_refresh": "first"
            }
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "LoadImageOutput",
    "display_name": "Load Image (from Outputs)",
    "description": "Load an image from the output folder. When the refresh button is clicked, the node will update the image list and automatically select the first image, allowing for easy iteration.",
    "python_module": "nodes",
    "category": "image",
    "output_node": false,
    "experimental": true
  },
  "ImageScale": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "upscale_method",
        "width",
        "height",
        "crop"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageScale",
    "display_name": "Upscale Image",
    "description": "",
    "python_module": "nodes",
    "category": "image/upscaling",
    "output_node": false
  },
  "ImageScaleBy": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "scale_by": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 8.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "upscale_method",
        "scale_by"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageScaleBy",
    "display_name": "Upscale Image By",
    "description": "",
    "python_module": "nodes",
    "category": "image/upscaling",
    "output_node": false
  },
  "ImageInvert": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageInvert",
    "display_name": "Invert Image",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "ImageBatch": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBatch",
    "display_name": "Batch Images",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "ImagePadForOutpaint": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "feathering": [
          "INT",
          {
            "default": 40,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "left",
        "top",
        "right",
        "bottom",
        "feathering"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ImagePadForOutpaint",
    "display_name": "Pad Image for Outpainting",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "EmptyImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "color": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16777215,
            "step": 1,
            "display": "color"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "batch_size",
        "color"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "EmptyImage",
    "display_name": "EmptyImage",
    "description": "",
    "python_module": "nodes",
    "category": "image",
    "output_node": false
  },
  "ConditioningAverage": {
    "input": {
      "required": {
        "conditioning_to": [
          "CONDITIONING"
        ],
        "conditioning_from": [
          "CONDITIONING"
        ],
        "conditioning_to_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_to",
        "conditioning_from",
        "conditioning_to_strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningAverage",
    "display_name": "ConditioningAverage",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningCombine": {
    "input": {
      "required": {
        "conditioning_1": [
          "CONDITIONING"
        ],
        "conditioning_2": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_1",
        "conditioning_2"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningCombine",
    "display_name": "Conditioning (Combine)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningConcat": {
    "input": {
      "required": {
        "conditioning_to": [
          "CONDITIONING"
        ],
        "conditioning_from": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_to",
        "conditioning_from"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningConcat",
    "display_name": "Conditioning (Concat)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningSetArea": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "width": [
          "INT",
          {
            "default": 64,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 64,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "width",
        "height",
        "x",
        "y",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetArea",
    "display_name": "Conditioning (Set Area)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningSetAreaPercentage": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "width": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "height": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "x": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "y": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "width",
        "height",
        "x",
        "y",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetAreaPercentage",
    "display_name": "Conditioning (Set Area with Percentage)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningSetAreaStrength": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetAreaStrength",
    "display_name": "ConditioningSetAreaStrength",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ConditioningSetMask": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "mask": [
          "MASK"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "mask",
        "strength",
        "set_cond_area"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetMask",
    "display_name": "Conditioning (Set Mask)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "KSamplerAdvanced": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "add_noise": [
          [
            "enable",
            "disable"
          ]
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "control_after_generate": true
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "start_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "end_at_step": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000
          }
        ],
        "return_with_leftover_noise": [
          [
            "disable",
            "enable"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "add_noise",
        "noise_seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "start_at_step",
        "end_at_step",
        "return_with_leftover_noise"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "KSamplerAdvanced",
    "display_name": "KSampler (Advanced)",
    "description": "",
    "python_module": "nodes",
    "category": "sampling",
    "output_node": false
  },
  "SetLatentNoiseMask": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "mask"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "SetLatentNoiseMask",
    "display_name": "Set Latent Noise Mask",
    "description": "",
    "python_module": "nodes",
    "category": "latent/inpaint",
    "output_node": false
  },
  "LatentComposite": {
    "input": {
      "required": {
        "samples_to": [
          "LATENT"
        ],
        "samples_from": [
          "LATENT"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "feather": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples_to",
        "samples_from",
        "x",
        "y",
        "feather"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentComposite",
    "display_name": "Latent Composite",
    "description": "",
    "python_module": "nodes",
    "category": "latent",
    "output_node": false
  },
  "LatentBlend": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ],
        "blend_factor": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2",
        "blend_factor"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentBlend",
    "display_name": "Latent Blend",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": false
  },
  "LatentRotate": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "rotation": [
          [
            "none",
            "90 degrees",
            "180 degrees",
            "270 degrees"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "rotation"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentRotate",
    "display_name": "Rotate Latent",
    "description": "",
    "python_module": "nodes",
    "category": "latent/transform",
    "output_node": false
  },
  "LatentFlip": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "flip_method": [
          [
            "x-axis: vertically",
            "y-axis: horizontally"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "flip_method"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentFlip",
    "display_name": "Flip Latent",
    "description": "",
    "python_module": "nodes",
    "category": "latent/transform",
    "output_node": false
  },
  "LatentCrop": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "width",
        "height",
        "x",
        "y"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentCrop",
    "display_name": "Crop Latent",
    "description": "",
    "python_module": "nodes",
    "category": "latent/transform",
    "output_node": false
  },
  "LoraLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL",
          {
            "tooltip": "The diffusion model the LoRA will be applied to."
          }
        ],
        "clip": [
          "CLIP",
          {
            "tooltip": "The CLIP model the LoRA will be applied to."
          }
        ],
        "lora_name": [
          [],
          {
            "tooltip": "The name of the LoRA."
          }
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01,
            "tooltip": "How strongly to modify the diffusion model. This value can be negative."
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01,
            "tooltip": "How strongly to modify the CLIP model. This value can be negative."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_name",
        "strength_model",
        "strength_clip"
      ]
    },
    "output": [
      "MODEL",
      "CLIP"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP"
    ],
    "name": "LoraLoader",
    "display_name": "Load LoRA",
    "description": "LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together.",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model.",
      "The modified CLIP model."
    ]
  },
  "CLIPLoader": {
    "input": {
      "required": {
        "clip_name": [
          [
            "clip_l.safetensors",
            "open-clip-xlm-roberta-large-vit-huge-14_visual_fp32.safetensors",
            "t5xxl_fp16.safetensors",
            "umt5-xxl-enc-bf16.safetensors",
            "umt5_xxl_fp16.safetensors",
            "umt5_xxl_fp8_e4m3fn_scaled.safetensors"
          ]
        ],
        "type": [
          [
            "stable_diffusion",
            "stable_cascade",
            "sd3",
            "stable_audio",
            "mochi",
            "ltxv",
            "pixart",
            "cosmos",
            "lumina2",
            "wan",
            "hidream"
          ]
        ]
      },
      "optional": {
        "device": [
          [
            "default",
            "cpu"
          ],
          {
            "advanced": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name",
        "type"
      ],
      "optional": [
        "device"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPLoader",
    "display_name": "Load CLIP",
    "description": "[Recipes]\n\nstable_diffusion: clip-l\nstable_cascade: clip-g\nsd3: t5 xxl/ clip-g / clip-l\nstable_audio: t5 base\nmochi: t5 xxl\ncosmos: old t5 xxl\nlumina2: gemma 2 2B\nwan: umt5 xxl\n hidream: llama-3.1 (Recommend) or t5",
    "python_module": "nodes",
    "category": "advanced/loaders",
    "output_node": false
  },
  "UNETLoader": {
    "input": {
      "required": {
        "unet_name": [
          [
            "Wan2.1-Fun-1.3B-Control.safetensors",
            "Wan2_1-I2V-14B-480P_fp8_e4m3fn.safetensors",
            "Wan2_1_VACE_1_3B_preview_bf16.safetensors",
            "clip_l.safetensors",
            "flux1-dev.safetensors",
            "wan2.1_fun_inp_1.3B_bf16.safetensors",
            "wan2.1_i2v_480p_14B_bf16.safetensors",
            "wan2.1_i2v_720p_14B_bf16.safetensors"
          ]
        ],
        "weight_dtype": [
          [
            "default",
            "fp8_e4m3fn",
            "fp8_e4m3fn_fast",
            "fp8_e5m2"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "unet_name",
        "weight_dtype"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "UNETLoader",
    "display_name": "Load Diffusion Model",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/loaders",
    "output_node": false
  },
  "DualCLIPLoader": {
    "input": {
      "required": {
        "clip_name1": [
          [
            "clip_l.safetensors",
            "open-clip-xlm-roberta-large-vit-huge-14_visual_fp32.safetensors",
            "t5xxl_fp16.safetensors",
            "umt5-xxl-enc-bf16.safetensors",
            "umt5_xxl_fp16.safetensors",
            "umt5_xxl_fp8_e4m3fn_scaled.safetensors"
          ]
        ],
        "clip_name2": [
          [
            "clip_l.safetensors",
            "open-clip-xlm-roberta-large-vit-huge-14_visual_fp32.safetensors",
            "t5xxl_fp16.safetensors",
            "umt5-xxl-enc-bf16.safetensors",
            "umt5_xxl_fp16.safetensors",
            "umt5_xxl_fp8_e4m3fn_scaled.safetensors"
          ]
        ],
        "type": [
          [
            "sdxl",
            "sd3",
            "flux",
            "hunyuan_video",
            "hidream"
          ]
        ]
      },
      "optional": {
        "device": [
          [
            "default",
            "cpu"
          ],
          {
            "advanced": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name1",
        "clip_name2",
        "type"
      ],
      "optional": [
        "device"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "DualCLIPLoader",
    "display_name": "DualCLIPLoader",
    "description": "[Recipes]\n\nsdxl: clip-l, clip-g\nsd3: clip-l, clip-g / clip-l, t5 / clip-g, t5\nflux: clip-l, t5\nhidream: at least one of t5 or llama, recommended t5 and llama",
    "python_module": "nodes",
    "category": "advanced/loaders",
    "output_node": false
  },
  "CLIPVisionEncode": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "image": [
          "IMAGE"
        ],
        "crop": [
          [
            "center",
            "none"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "image",
        "crop"
      ]
    },
    "output": [
      "CLIP_VISION_OUTPUT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP_VISION_OUTPUT"
    ],
    "name": "CLIPVisionEncode",
    "display_name": "CLIP Vision Encode",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "StyleModelApply": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "style_model": [
          "STYLE_MODEL"
        ],
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "strength_type": [
          [
            "multiply",
            "attn_bias"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "style_model",
        "clip_vision_output",
        "strength",
        "strength_type"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "StyleModelApply",
    "display_name": "Apply Style Model",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/style_model",
    "output_node": false
  },
  "unCLIPConditioning": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "noise_augmentation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "clip_vision_output",
        "strength",
        "noise_augmentation"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "unCLIPConditioning",
    "display_name": "unCLIPConditioning",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning",
    "output_node": false
  },
  "ControlNetApply": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "control_net",
        "image",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ControlNetApply",
    "display_name": "Apply ControlNet (OLD)",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/controlnet",
    "output_node": false,
    "deprecated": true
  },
  "ControlNetApplyAdvanced": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "control_net",
        "image",
        "strength",
        "start_percent",
        "end_percent"
      ],
      "optional": [
        "vae"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ControlNetApplyAdvanced",
    "display_name": "Apply ControlNet",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/controlnet",
    "output_node": false
  },
  "ControlNetLoader": {
    "input": {
      "required": {
        "control_net_name": [
          [
            "SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net_name"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "ControlNetLoader",
    "display_name": "Load ControlNet Model",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "DiffControlNetLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "control_net_name": [
          [
            "SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "control_net_name"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "DiffControlNetLoader",
    "display_name": "Load ControlNet Model (diff)",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "StyleModelLoader": {
    "input": {
      "required": {
        "style_model_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "style_model_name"
      ]
    },
    "output": [
      "STYLE_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STYLE_MODEL"
    ],
    "name": "StyleModelLoader",
    "display_name": "Load Style Model",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "CLIPVisionLoader": {
    "input": {
      "required": {
        "clip_name": [
          [
            "CLIP-ViT-H-14-laion2B-s32B-b79K.safetensors",
            "clip_vision_h.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name"
      ]
    },
    "output": [
      "CLIP_VISION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP_VISION"
    ],
    "name": "CLIPVisionLoader",
    "display_name": "Load CLIP Vision",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "VAEDecodeTiled": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 32
          }
        ],
        "overlap": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 4096,
            "step": 32
          }
        ],
        "temporal_size": [
          "INT",
          {
            "default": 64,
            "min": 8,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to decode at a time."
          }
        ],
        "temporal_overlap": [
          "INT",
          {
            "default": 8,
            "min": 4,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to overlap."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae",
        "tile_size",
        "overlap",
        "temporal_size",
        "temporal_overlap"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "VAEDecodeTiled",
    "display_name": "VAE Decode (Tiled)",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": false
  },
  "VAEEncodeTiled": {
    "input": {
      "required": {
        "pixels": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 64
          }
        ],
        "overlap": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 4096,
            "step": 32
          }
        ],
        "temporal_size": [
          "INT",
          {
            "default": 64,
            "min": 8,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to encode at a time."
          }
        ],
        "temporal_overlap": [
          "INT",
          {
            "default": 8,
            "min": 4,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to overlap."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pixels",
        "vae",
        "tile_size",
        "overlap",
        "temporal_size",
        "temporal_overlap"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "VAEEncodeTiled",
    "display_name": "VAE Encode (Tiled)",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": false
  },
  "unCLIPCheckpointLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "CLIP_VISION"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "CLIP_VISION"
    ],
    "name": "unCLIPCheckpointLoader",
    "display_name": "unCLIPCheckpointLoader",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "GLIGENLoader": {
    "input": {
      "required": {
        "gligen_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "gligen_name"
      ]
    },
    "output": [
      "GLIGEN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GLIGEN"
    ],
    "name": "GLIGENLoader",
    "display_name": "GLIGENLoader",
    "description": "",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false
  },
  "GLIGENTextBoxApply": {
    "input": {
      "required": {
        "conditioning_to": [
          "CONDITIONING"
        ],
        "clip": [
          "CLIP"
        ],
        "gligen_textbox_model": [
          "GLIGEN"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "width": [
          "INT",
          {
            "default": 64,
            "min": 8,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 64,
            "min": 8,
            "max": 16384,
            "step": 8
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_to",
        "clip",
        "gligen_textbox_model",
        "text",
        "width",
        "height",
        "x",
        "y"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "GLIGENTextBoxApply",
    "display_name": "GLIGENTextBoxApply",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/gligen",
    "output_node": false
  },
  "InpaintModelConditioning": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "pixels": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "noise_mask": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Add a noise mask to the latent so sampling will only happen within the mask. Might improve results or completely break things depending on the model."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "pixels",
        "mask",
        "noise_mask"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "InpaintModelConditioning",
    "display_name": "InpaintModelConditioning",
    "description": "",
    "python_module": "nodes",
    "category": "conditioning/inpaint",
    "output_node": false
  },
  "CheckpointLoader": {
    "input": {
      "required": {
        "config_name": [
          [
            "anything_v3.yaml",
            "v1-inference.yaml",
            "v1-inference_clip_skip_2.yaml",
            "v1-inference_clip_skip_2_fp16.yaml",
            "v1-inference_fp16.yaml",
            "v1-inpainting-inference.yaml",
            "v2-inference-v.yaml",
            "v2-inference-v_fp32.yaml",
            "v2-inference.yaml",
            "v2-inference_fp32.yaml",
            "v2-inpainting-inference.yaml"
          ]
        ],
        "ckpt_name": [
          [
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "config_name",
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "CheckpointLoader",
    "display_name": "Load Checkpoint With Config (DEPRECATED)",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/loaders",
    "output_node": false,
    "deprecated": true
  },
  "DiffusersLoader": {
    "input": {
      "required": {
        "model_path": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "model_path"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "DiffusersLoader",
    "display_name": "DiffusersLoader",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/loaders/deprecated",
    "output_node": false
  },
  "LoadLatent": {
    "input": {
      "required": {
        "latent": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "latent"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LoadLatent",
    "display_name": "LoadLatent",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": false
  },
  "SaveLatent": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "latents/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "samples",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveLatent",
    "display_name": "SaveLatent",
    "description": "",
    "python_module": "nodes",
    "category": "_for_testing",
    "output_node": true
  },
  "ConditioningZeroOut": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningZeroOut",
    "display_name": "ConditioningZeroOut",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "ConditioningSetTimestepRange": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "start": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "start",
        "end"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetTimestepRange",
    "display_name": "ConditioningSetTimestepRange",
    "description": "",
    "python_module": "nodes",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "LoraLoaderModelOnly": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "lora_name": [
          []
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "lora_name",
        "strength_model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "LoraLoaderModelOnly",
    "display_name": "LoraLoaderModelOnly",
    "description": "LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together.",
    "python_module": "nodes",
    "category": "loaders",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model.",
      "The modified CLIP model."
    ]
  },
  "LatentAdd": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentAdd",
    "display_name": "LatentAdd",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentSubtract": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentSubtract",
    "display_name": "LatentSubtract",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentMultiply": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "multiplier"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentMultiply",
    "display_name": "LatentMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentInterpolate": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2",
        "ratio"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentInterpolate",
    "display_name": "LatentInterpolate",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentBatch": {
    "input": {
      "required": {
        "samples1": [
          "LATENT"
        ],
        "samples2": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples1",
        "samples2"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentBatch",
    "display_name": "LatentBatch",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/batch",
    "output_node": false
  },
  "LatentBatchSeedBehavior": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "seed_behavior": [
          [
            "random",
            "fixed"
          ],
          {
            "default": "fixed"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "seed_behavior"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentBatchSeedBehavior",
    "display_name": "LatentBatchSeedBehavior",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced",
    "output_node": false
  },
  "LatentApplyOperation": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "operation": [
          "LATENT_OPERATION"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "operation"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentApplyOperation",
    "display_name": "LatentApplyOperation",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced/operations",
    "output_node": false,
    "experimental": true
  },
  "LatentApplyOperationCFG": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "operation": [
          "LATENT_OPERATION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "operation"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "LatentApplyOperationCFG",
    "display_name": "LatentApplyOperationCFG",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced/operations",
    "output_node": false,
    "experimental": true
  },
  "LatentOperationTonemapReinhard": {
    "input": {
      "required": {
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "multiplier"
      ]
    },
    "output": [
      "LATENT_OPERATION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT_OPERATION"
    ],
    "name": "LatentOperationTonemapReinhard",
    "display_name": "LatentOperationTonemapReinhard",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced/operations",
    "output_node": false,
    "experimental": true
  },
  "LatentOperationSharpen": {
    "input": {
      "required": {
        "sharpen_radius": [
          "INT",
          {
            "default": 9,
            "min": 1,
            "max": 31,
            "step": 1
          }
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "alpha": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sharpen_radius",
        "sigma",
        "alpha"
      ]
    },
    "output": [
      "LATENT_OPERATION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT_OPERATION"
    ],
    "name": "LatentOperationSharpen",
    "display_name": "LatentOperationSharpen",
    "description": "",
    "python_module": "comfy_extras.nodes_latent",
    "category": "latent/advanced/operations",
    "output_node": false,
    "experimental": true
  },
  "HypernetworkLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "hypernetwork_name": [
          []
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "hypernetwork_name",
        "strength"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "HypernetworkLoader",
    "display_name": "HypernetworkLoader",
    "description": "",
    "python_module": "comfy_extras.nodes_hypernetwork",
    "category": "loaders",
    "output_node": false
  },
  "UpscaleModelLoader": {
    "input": {
      "required": {
        "model_name": [
          [
            "4x-UltraSharp.pth",
            "RealESRGAN_x2.pth"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name"
      ]
    },
    "output": [
      "UPSCALE_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "UPSCALE_MODEL"
    ],
    "name": "UpscaleModelLoader",
    "display_name": "Load Upscale Model",
    "description": "",
    "python_module": "comfy_extras.nodes_upscale_model",
    "category": "loaders",
    "output_node": false
  },
  "ImageUpscaleWithModel": {
    "input": {
      "required": {
        "upscale_model": [
          "UPSCALE_MODEL"
        ],
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "upscale_model",
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageUpscaleWithModel",
    "display_name": "Upscale Image (using Model)",
    "description": "",
    "python_module": "comfy_extras.nodes_upscale_model",
    "category": "image/upscaling",
    "output_node": false
  },
  "ImageBlend": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "blend_factor": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blend_mode": [
          [
            "normal",
            "multiply",
            "screen",
            "overlay",
            "soft_light",
            "difference"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2",
        "blend_factor",
        "blend_mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBlend",
    "display_name": "Image Blend",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageBlur": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "blur_radius": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 31,
            "step": 1
          }
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 10.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "blur_radius",
        "sigma"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBlur",
    "display_name": "Image Blur",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageQuantize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "colors": [
          "INT",
          {
            "default": 256,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "dither": [
          [
            "none",
            "floyd-steinberg",
            "bayer-2",
            "bayer-4",
            "bayer-8",
            "bayer-16"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "colors",
        "dither"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageQuantize",
    "display_name": "Image Quantize",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageSharpen": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "sharpen_radius": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 31,
            "step": 1
          }
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "alpha": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "sharpen_radius",
        "sigma",
        "alpha"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageSharpen",
    "display_name": "Image Sharpen",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageScaleToTotalPixels": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "megapixels": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 16.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "upscale_method",
        "megapixels"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageScaleToTotalPixels",
    "display_name": "Scale Image to Total Pixels",
    "description": "",
    "python_module": "comfy_extras.nodes_post_processing",
    "category": "image/upscaling",
    "output_node": false
  },
  "LatentCompositeMasked": {
    "input": {
      "required": {
        "destination": [
          "LATENT"
        ],
        "source": [
          "LATENT"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "resize_source": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "x",
        "y",
        "resize_source"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentCompositeMasked",
    "display_name": "LatentCompositeMasked",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "latent",
    "output_node": false
  },
  "ImageCompositeMasked": {
    "input": {
      "required": {
        "destination": [
          "IMAGE"
        ],
        "source": [
          "IMAGE"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "resize_source": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "x",
        "y",
        "resize_source"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageCompositeMasked",
    "display_name": "ImageCompositeMasked",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "image",
    "output_node": false
  },
  "MaskToImage": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "MaskToImage",
    "display_name": "Convert Mask to Image",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "ImageToMask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "channel": [
          [
            "red",
            "green",
            "blue",
            "alpha"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "channel"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ImageToMask",
    "display_name": "Convert Image to Mask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "ImageColorToMask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "color": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16777215,
            "step": 1,
            "display": "color"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "color"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ImageColorToMask",
    "display_name": "ImageColorToMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "SolidMask": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "width",
        "height"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "SolidMask",
    "display_name": "SolidMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "InvertMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "InvertMask",
    "display_name": "InvertMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "CropMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "x",
        "y",
        "width",
        "height"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "CropMask",
    "display_name": "CropMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "MaskComposite": {
    "input": {
      "required": {
        "destination": [
          "MASK"
        ],
        "source": [
          "MASK"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "operation": [
          [
            "multiply",
            "add",
            "subtract",
            "and",
            "or",
            "xor"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "x",
        "y",
        "operation"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskComposite",
    "display_name": "MaskComposite",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "FeatherMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "left",
        "top",
        "right",
        "bottom"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "FeatherMask",
    "display_name": "FeatherMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "GrowMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "expand": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "tapered_corners": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "expand",
        "tapered_corners"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "GrowMask",
    "display_name": "GrowMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "ThresholdMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "value": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "value"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ThresholdMask",
    "display_name": "ThresholdMask",
    "description": "",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": false
  },
  "MaskPreview": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "mask"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "MaskPreview",
    "display_name": "MaskPreview",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "comfy_extras.nodes_mask",
    "category": "mask",
    "output_node": true
  },
  "PorterDuffImageComposite": {
    "input": {
      "required": {
        "source": [
          "IMAGE"
        ],
        "source_alpha": [
          "MASK"
        ],
        "destination": [
          "IMAGE"
        ],
        "destination_alpha": [
          "MASK"
        ],
        "mode": [
          [
            "ADD",
            "CLEAR",
            "DARKEN",
            "DST",
            "DST_ATOP",
            "DST_IN",
            "DST_OUT",
            "DST_OVER",
            "LIGHTEN",
            "MULTIPLY",
            "OVERLAY",
            "SCREEN",
            "SRC",
            "SRC_ATOP",
            "SRC_IN",
            "SRC_OUT",
            "SRC_OVER",
            "XOR"
          ],
          {
            "default": "DST"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "source",
        "source_alpha",
        "destination",
        "destination_alpha",
        "mode"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "PorterDuffImageComposite",
    "display_name": "Porter-Duff Image Composite",
    "description": "",
    "python_module": "comfy_extras.nodes_compositing",
    "category": "mask/compositing",
    "output_node": false
  },
  "SplitImageWithAlpha": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "SplitImageWithAlpha",
    "display_name": "Split Image with Alpha",
    "description": "",
    "python_module": "comfy_extras.nodes_compositing",
    "category": "mask/compositing",
    "output_node": false
  },
  "JoinImageWithAlpha": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "alpha": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "alpha"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "JoinImageWithAlpha",
    "display_name": "Join Image with Alpha",
    "description": "",
    "python_module": "comfy_extras.nodes_compositing",
    "category": "mask/compositing",
    "output_node": false
  },
  "RebatchLatents": {
    "input": {
      "required": {
        "latents": [
          "LATENT"
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latents",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "RebatchLatents",
    "display_name": "Rebatch Latents",
    "description": "",
    "python_module": "comfy_extras.nodes_rebatch",
    "category": "latent/batch",
    "output_node": false
  },
  "RebatchImages": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "batch_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "RebatchImages",
    "display_name": "Rebatch Images",
    "description": "",
    "python_module": "comfy_extras.nodes_rebatch",
    "category": "image/batch",
    "output_node": false
  },
  "ModelMergeSimple": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "ratio"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSimple",
    "display_name": "ModelMergeSimple",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "ModelMergeBlocks": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "input": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "input",
        "middle",
        "out"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeBlocks",
    "display_name": "ModelMergeBlocks",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "ModelMergeSubtract": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "multiplier"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSubtract",
    "display_name": "ModelMergeSubtract",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "ModelMergeAdd": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeAdd",
    "display_name": "ModelMergeAdd",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "CheckpointSave": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "checkpoints/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "vae",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "CheckpointSave",
    "display_name": "Save Checkpoint",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "CLIPMergeSimple": {
    "input": {
      "required": {
        "clip1": [
          "CLIP"
        ],
        "clip2": [
          "CLIP"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip1",
        "clip2",
        "ratio"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPMergeSimple",
    "display_name": "CLIPMergeSimple",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "CLIPMergeSubtract": {
    "input": {
      "required": {
        "clip1": [
          "CLIP"
        ],
        "clip2": [
          "CLIP"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip1",
        "clip2",
        "multiplier"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPMergeSubtract",
    "display_name": "CLIPMergeSubtract",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "CLIPMergeAdd": {
    "input": {
      "required": {
        "clip1": [
          "CLIP"
        ],
        "clip2": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "clip1",
        "clip2"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPMergeAdd",
    "display_name": "CLIPMergeAdd",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "CLIPSave": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "clip/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "clip",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "CLIPSave",
    "display_name": "CLIPSave",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "VAESave": {
    "input": {
      "required": {
        "vae": [
          "VAE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "vae/ComfyUI_vae"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "vae",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "VAESave",
    "display_name": "VAESave",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "ModelSave": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "diffusion_models/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "model",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ModelSave",
    "display_name": "ModelSave",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "TomePatchModel": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ratio"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "TomePatchModel",
    "display_name": "TomePatchModel",
    "description": "",
    "python_module": "comfy_extras.nodes_tomesd",
    "category": "model_patches/unet",
    "output_node": false
  },
  "CLIPTextEncodeSDXLRefiner": {
    "input": {
      "required": {
        "ascore": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "ascore",
        "width",
        "height",
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeSDXLRefiner",
    "display_name": "CLIPTextEncodeSDXLRefiner",
    "description": "",
    "python_module": "comfy_extras.nodes_clip_sdxl",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "CLIPTextEncodeSDXL": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "crop_w": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384
          }
        ],
        "crop_h": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384
          }
        ],
        "target_width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "target_height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "text_g": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "text_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "width",
        "height",
        "crop_w",
        "crop_h",
        "target_width",
        "target_height",
        "text_g",
        "text_l"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeSDXL",
    "display_name": "CLIPTextEncodeSDXL",
    "description": "",
    "python_module": "comfy_extras.nodes_clip_sdxl",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "Canny": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "low_threshold": [
          "FLOAT",
          {
            "default": 0.4,
            "min": 0.01,
            "max": 0.99,
            "step": 0.01
          }
        ],
        "high_threshold": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0.01,
            "max": 0.99,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "low_threshold",
        "high_threshold"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Canny",
    "display_name": "Canny",
    "description": "",
    "python_module": "comfy_extras.nodes_canny",
    "category": "image/preprocessors",
    "output_node": false
  },
  "FreeU": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "b1": [
          "FLOAT",
          {
            "default": 1.1,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "b2": [
          "FLOAT",
          {
            "default": 1.2,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "s1": [
          "FLOAT",
          {
            "default": 0.9,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "s2": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "b1",
        "b2",
        "s1",
        "s2"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "FreeU",
    "display_name": "FreeU",
    "description": "",
    "python_module": "comfy_extras.nodes_freelunch",
    "category": "model_patches/unet",
    "output_node": false
  },
  "FreeU_V2": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "b1": [
          "FLOAT",
          {
            "default": 1.3,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "b2": [
          "FLOAT",
          {
            "default": 1.4,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "s1": [
          "FLOAT",
          {
            "default": 0.9,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "s2": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "b1",
        "b2",
        "s1",
        "s2"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "FreeU_V2",
    "display_name": "FreeU_V2",
    "description": "",
    "python_module": "comfy_extras.nodes_freelunch",
    "category": "model_patches/unet",
    "output_node": false
  },
  "SamplerCustom": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "add_noise": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "control_after_generate": true
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "sampler": [
          "SAMPLER"
        ],
        "sigmas": [
          "SIGMAS"
        ],
        "latent_image": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "add_noise",
        "noise_seed",
        "cfg",
        "positive",
        "negative",
        "sampler",
        "sigmas",
        "latent_image"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "output",
      "denoised_output"
    ],
    "name": "SamplerCustom",
    "display_name": "SamplerCustom",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling",
    "output_node": false
  },
  "BasicScheduler": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "scheduler",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "BasicScheduler",
    "display_name": "BasicScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "KarrasScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "rho": [
          "FLOAT",
          {
            "default": 7.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "sigma_max",
        "sigma_min",
        "rho"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "KarrasScheduler",
    "display_name": "KarrasScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "ExponentialScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "sigma_max",
        "sigma_min"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "ExponentialScheduler",
    "display_name": "ExponentialScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "PolyexponentialScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "rho": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "sigma_max",
        "sigma_min",
        "rho"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "PolyexponentialScheduler",
    "display_name": "PolyexponentialScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "LaplaceScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "mu": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.1,
            "round": false
          }
        ],
        "beta": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "sigma_max",
        "sigma_min",
        "mu",
        "beta"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "LaplaceScheduler",
    "display_name": "LaplaceScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "VPScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "beta_d": [
          "FLOAT",
          {
            "default": 19.9,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "beta_min": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 5000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "eps_s": [
          "FLOAT",
          {
            "default": 0.001,
            "min": 0.0,
            "max": 1.0,
            "step": 0.0001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "beta_d",
        "beta_min",
        "eps_s"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "VPScheduler",
    "display_name": "VPScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "BetaSamplingScheduler": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "alpha": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0.0,
            "max": 50.0,
            "step": 0.01,
            "round": false
          }
        ],
        "beta": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0.0,
            "max": 50.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "steps",
        "alpha",
        "beta"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "BetaSamplingScheduler",
    "display_name": "BetaSamplingScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "SDTurboScheduler": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "steps": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "SDTurboScheduler",
    "display_name": "SDTurboScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "KSamplerSelect": {
    "input": {
      "required": {
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "sampler_name"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "KSamplerSelect",
    "display_name": "KSamplerSelect",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerEulerAncestral": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerEulerAncestral",
    "display_name": "SamplerEulerAncestral",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerEulerAncestralCFGPP": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerEulerAncestralCFGPP",
    "display_name": "SamplerEulerAncestralCFG++",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerLMS": {
    "input": {
      "required": {
        "order": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 100
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "order"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerLMS",
    "display_name": "SamplerLMS",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMPP_3M_SDE": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "noise_device": [
          [
            "gpu",
            "cpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise",
        "noise_device"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMPP_3M_SDE",
    "display_name": "SamplerDPMPP_3M_SDE",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMPP_2M_SDE": {
    "input": {
      "required": {
        "solver_type": [
          [
            "midpoint",
            "heun"
          ]
        ],
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "noise_device": [
          [
            "gpu",
            "cpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "solver_type",
        "eta",
        "s_noise",
        "noise_device"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMPP_2M_SDE",
    "display_name": "SamplerDPMPP_2M_SDE",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMPP_SDE": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "r": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "noise_device": [
          [
            "gpu",
            "cpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise",
        "r",
        "noise_device"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMPP_SDE",
    "display_name": "SamplerDPMPP_SDE",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMPP_2S_Ancestral": {
    "input": {
      "required": {
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "eta",
        "s_noise"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMPP_2S_Ancestral",
    "display_name": "SamplerDPMPP_2S_Ancestral",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerDPMAdaptative": {
    "input": {
      "required": {
        "order": [
          "INT",
          {
            "default": 3,
            "min": 2,
            "max": 3
          }
        ],
        "rtol": [
          "FLOAT",
          {
            "default": 0.05,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "atol": [
          "FLOAT",
          {
            "default": 0.0078,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "h_init": [
          "FLOAT",
          {
            "default": 0.05,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "pcoeff": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "icoeff": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "dcoeff": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "accept_safety": [
          "FLOAT",
          {
            "default": 0.81,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "eta": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "order",
        "rtol",
        "atol",
        "h_init",
        "pcoeff",
        "icoeff",
        "dcoeff",
        "accept_safety",
        "eta",
        "s_noise"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerDPMAdaptative",
    "display_name": "SamplerDPMAdaptative",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SplitSigmas": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ],
        "step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas",
        "step"
      ]
    },
    "output": [
      "SIGMAS",
      "SIGMAS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "high_sigmas",
      "low_sigmas"
    ],
    "name": "SplitSigmas",
    "display_name": "SplitSigmas",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "SplitSigmasDenoise": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS",
      "SIGMAS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "high_sigmas",
      "low_sigmas"
    ],
    "name": "SplitSigmasDenoise",
    "display_name": "SplitSigmasDenoise",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "FlipSigmas": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "FlipSigmas",
    "display_name": "FlipSigmas",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "SetFirstSigma": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 136.0,
            "min": 0.0,
            "max": 20000.0,
            "step": 0.001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas",
        "sigma"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "SetFirstSigma",
    "display_name": "SetFirstSigma",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/sigmas",
    "output_node": false
  },
  "CFGGuider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "negative",
        "cfg"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GUIDER"
    ],
    "name": "CFGGuider",
    "display_name": "CFGGuider",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/guiders",
    "output_node": false
  },
  "DualCFGGuider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "cond1": [
          "CONDITIONING"
        ],
        "cond2": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "cfg_conds": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "cfg_cond2_negative": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "cond1",
        "cond2",
        "negative",
        "cfg_conds",
        "cfg_cond2_negative"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GUIDER"
    ],
    "name": "DualCFGGuider",
    "display_name": "DualCFGGuider",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/guiders",
    "output_node": false
  },
  "BasicGuider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "conditioning": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "conditioning"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GUIDER"
    ],
    "name": "BasicGuider",
    "display_name": "BasicGuider",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/guiders",
    "output_node": false
  },
  "RandomNoise": {
    "input": {
      "required": {
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "control_after_generate": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "noise_seed"
      ]
    },
    "output": [
      "NOISE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "NOISE"
    ],
    "name": "RandomNoise",
    "display_name": "RandomNoise",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/noise",
    "output_node": false
  },
  "DisableNoise": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "NOISE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "NOISE"
    ],
    "name": "DisableNoise",
    "display_name": "DisableNoise",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling/noise",
    "output_node": false
  },
  "AddNoise": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "noise": [
          "NOISE"
        ],
        "sigmas": [
          "SIGMAS"
        ],
        "latent_image": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "noise",
        "sigmas",
        "latent_image"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "AddNoise",
    "display_name": "AddNoise",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "_for_testing/custom_sampling/noise",
    "output_node": false
  },
  "SamplerCustomAdvanced": {
    "input": {
      "required": {
        "noise": [
          "NOISE"
        ],
        "guider": [
          "GUIDER"
        ],
        "sampler": [
          "SAMPLER"
        ],
        "sigmas": [
          "SIGMAS"
        ],
        "latent_image": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "noise",
        "guider",
        "sampler",
        "sigmas",
        "latent_image"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "output",
      "denoised_output"
    ],
    "name": "SamplerCustomAdvanced",
    "display_name": "SamplerCustomAdvanced",
    "description": "",
    "python_module": "comfy_extras.nodes_custom_sampler",
    "category": "sampling/custom_sampling",
    "output_node": false
  },
  "HyperTile": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "tile_size": [
          "INT",
          {
            "default": 256,
            "min": 1,
            "max": 2048
          }
        ],
        "swap_size": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 128
          }
        ],
        "max_depth": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10
          }
        ],
        "scale_depth": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "tile_size",
        "swap_size",
        "max_depth",
        "scale_depth"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "HyperTile",
    "display_name": "HyperTile",
    "description": "",
    "python_module": "comfy_extras.nodes_hypertile",
    "category": "model_patches/unet",
    "output_node": false
  },
  "ModelSamplingDiscrete": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "sampling": [
          [
            "eps",
            "v_prediction",
            "lcm",
            "x0",
            "img_to_img"
          ]
        ],
        "zsnr": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "sampling",
        "zsnr"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingDiscrete",
    "display_name": "ModelSamplingDiscrete",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingContinuousEDM": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "sampling": [
          [
            "v_prediction",
            "edm",
            "edm_playground_v2.5",
            "eps"
          ]
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 120.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.001,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.002,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "sampling",
        "sigma_max",
        "sigma_min"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingContinuousEDM",
    "display_name": "ModelSamplingContinuousEDM",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingContinuousV": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "sampling": [
          [
            "v_prediction"
          ]
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 500.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.001,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.03,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.001,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "sampling",
        "sigma_max",
        "sigma_min"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingContinuousV",
    "display_name": "ModelSamplingContinuousV",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingStableCascade": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "shift": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "shift"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingStableCascade",
    "display_name": "ModelSamplingStableCascade",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingSD3": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "shift": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "shift"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingSD3",
    "display_name": "ModelSamplingSD3",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingAuraFlow": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "shift": [
          "FLOAT",
          {
            "default": 1.73,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "shift"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingAuraFlow",
    "display_name": "ModelSamplingAuraFlow",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelSamplingFlux": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "max_shift": [
          "FLOAT",
          {
            "default": 1.15,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "base_shift": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "max_shift",
        "base_shift",
        "width",
        "height"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingFlux",
    "display_name": "ModelSamplingFlux",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "RescaleCFG": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "multiplier"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "RescaleCFG",
    "display_name": "RescaleCFG",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/model",
    "output_node": false
  },
  "ModelComputeDtype": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "dtype": [
          [
            "default",
            "fp32",
            "fp16",
            "bf16"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "dtype"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelComputeDtype",
    "display_name": "ModelComputeDtype",
    "description": "",
    "python_module": "comfy_extras.nodes_model_advanced",
    "category": "advanced/debug/model",
    "output_node": false
  },
  "PatchModelAddDownscale": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "block_number": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 32,
            "step": 1
          }
        ],
        "downscale_factor": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.1,
            "max": 9.0,
            "step": 0.001
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 0.35,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "downscale_after_skip": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "downscale_method": [
          [
            "bicubic",
            "nearest-exact",
            "bilinear",
            "area",
            "bislerp"
          ]
        ],
        "upscale_method": [
          [
            "bicubic",
            "nearest-exact",
            "bilinear",
            "area",
            "bislerp"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "block_number",
        "downscale_factor",
        "start_percent",
        "end_percent",
        "downscale_after_skip",
        "downscale_method",
        "upscale_method"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "PatchModelAddDownscale",
    "display_name": "PatchModelAddDownscale (Kohya Deep Shrink)",
    "description": "",
    "python_module": "comfy_extras.nodes_model_downscale",
    "category": "model_patches/unet",
    "output_node": false
  },
  "ImageCrop": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "x",
        "y"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageCrop",
    "display_name": "Image Crop",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/transform",
    "output_node": false
  },
  "RepeatImageBatch": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "amount": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "amount"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "RepeatImageBatch",
    "display_name": "RepeatImageBatch",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/batch",
    "output_node": false
  },
  "ImageFromBatch": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "batch_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4095
          }
        ],
        "length": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "batch_index",
        "length"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageFromBatch",
    "display_name": "ImageFromBatch",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/batch",
    "output_node": false
  },
  "SaveAnimatedWEBP": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "fps": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.01,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "lossless": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "quality": [
          "INT",
          {
            "default": 80,
            "min": 0,
            "max": 100
          }
        ],
        "method": [
          [
            "default",
            "fastest",
            "slowest"
          ]
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "fps",
        "lossless",
        "quality",
        "method"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveAnimatedWEBP",
    "display_name": "SaveAnimatedWEBP",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/animation",
    "output_node": true
  },
  "SaveAnimatedPNG": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "fps": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.01,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "compress_level": [
          "INT",
          {
            "default": 4,
            "min": 0,
            "max": 9
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "fps",
        "compress_level"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveAnimatedPNG",
    "display_name": "SaveAnimatedPNG",
    "description": "",
    "python_module": "comfy_extras.nodes_images",
    "category": "image/animation",
    "output_node": true
  },
  "ImageOnlyCheckpointLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP_VISION",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP_VISION",
      "VAE"
    ],
    "name": "ImageOnlyCheckpointLoader",
    "display_name": "Image Only Checkpoint Loader (img2vid model)",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "loaders/video_models",
    "output_node": false
  },
  "SVD_img2vid_Conditioning": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "video_frames": [
          "INT",
          {
            "default": 14,
            "min": 1,
            "max": 4096
          }
        ],
        "motion_bucket_id": [
          "INT",
          {
            "default": 127,
            "min": 1,
            "max": 1023
          }
        ],
        "fps": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 1024
          }
        ],
        "augmentation_level": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "video_frames",
        "motion_bucket_id",
        "fps",
        "augmentation_level"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "SVD_img2vid_Conditioning",
    "display_name": "SVD_img2vid_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "VideoLinearCFGGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "min_cfg": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.5,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "min_cfg"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "VideoLinearCFGGuidance",
    "display_name": "VideoLinearCFGGuidance",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "sampling/video_models",
    "output_node": false
  },
  "VideoTriangleCFGGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "min_cfg": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.5,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "min_cfg"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "VideoTriangleCFGGuidance",
    "display_name": "VideoTriangleCFGGuidance",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "sampling/video_models",
    "output_node": false
  },
  "ImageOnlyCheckpointSave": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "vae": [
          "VAE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "checkpoints/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip_vision",
        "vae",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ImageOnlyCheckpointSave",
    "display_name": "ImageOnlyCheckpointSave",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "ConditioningSetAreaPercentageVideo": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "width": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "height": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "temporal": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "x": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "y": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "z": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "width",
        "height",
        "temporal",
        "x",
        "y",
        "z",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetAreaPercentageVideo",
    "display_name": "ConditioningSetAreaPercentageVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_video_model",
    "category": "conditioning",
    "output_node": false
  },
  "SelfAttentionGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "scale": [
          "FLOAT",
          {
            "default": 0.5,
            "min": -2.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "blur_sigma": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "scale",
        "blur_sigma"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "SelfAttentionGuidance",
    "display_name": "Self-Attention Guidance",
    "description": "",
    "python_module": "comfy_extras.nodes_sag",
    "category": "_for_testing",
    "output_node": false
  },
  "PerpNeg": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "empty_conditioning": [
          "CONDITIONING"
        ],
        "neg_scale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "empty_conditioning",
        "neg_scale"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "PerpNeg",
    "display_name": "Perp-Neg (DEPRECATED by PerpNegGuider)",
    "description": "",
    "python_module": "comfy_extras.nodes_perpneg",
    "category": "_for_testing",
    "output_node": false,
    "deprecated": true
  },
  "PerpNegGuider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "empty_conditioning": [
          "CONDITIONING"
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "neg_scale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "negative",
        "empty_conditioning",
        "cfg",
        "neg_scale"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GUIDER"
    ],
    "name": "PerpNegGuider",
    "display_name": "PerpNegGuider",
    "description": "",
    "python_module": "comfy_extras.nodes_perpneg",
    "category": "_for_testing",
    "output_node": false
  },
  "StableZero123_Conditioning": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "elevation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ],
        "azimuth": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "batch_size",
        "elevation",
        "azimuth"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "StableZero123_Conditioning",
    "display_name": "StableZero123_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_stable3d",
    "category": "conditioning/3d_models",
    "output_node": false
  },
  "StableZero123_Conditioning_Batched": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "elevation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ],
        "azimuth": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ],
        "elevation_batch_increment": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ],
        "azimuth_batch_increment": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0,
            "step": 0.1,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "batch_size",
        "elevation",
        "azimuth",
        "elevation_batch_increment",
        "azimuth_batch_increment"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "StableZero123_Conditioning_Batched",
    "display_name": "StableZero123_Conditioning_Batched",
    "description": "",
    "python_module": "comfy_extras.nodes_stable3d",
    "category": "conditioning/3d_models",
    "output_node": false
  },
  "SV3D_Conditioning": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "video_frames": [
          "INT",
          {
            "default": 21,
            "min": 1,
            "max": 4096
          }
        ],
        "elevation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -90.0,
            "max": 90.0,
            "step": 0.1,
            "round": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "video_frames",
        "elevation"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "SV3D_Conditioning",
    "display_name": "SV3D_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_stable3d",
    "category": "conditioning/3d_models",
    "output_node": false
  },
  "SD_4XUpscale_Conditioning": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "scale_ratio": [
          "FLOAT",
          {
            "default": 4.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "noise_augmentation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "positive",
        "negative",
        "scale_ratio",
        "noise_augmentation"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "SD_4XUpscale_Conditioning",
    "display_name": "SD_4XUpscale_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_sdupscale",
    "category": "conditioning/upscale_diffusion",
    "output_node": false
  },
  "PhotoMakerLoader": {
    "input": {
      "required": {
        "photomaker_model_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "photomaker_model_name"
      ]
    },
    "output": [
      "PHOTOMAKER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "PHOTOMAKER"
    ],
    "name": "PhotoMakerLoader",
    "display_name": "PhotoMakerLoader",
    "description": "",
    "python_module": "comfy_extras.nodes_photomaker",
    "category": "_for_testing/photomaker",
    "output_node": false
  },
  "PhotoMakerEncode": {
    "input": {
      "required": {
        "photomaker": [
          "PHOTOMAKER"
        ],
        "image": [
          "IMAGE"
        ],
        "clip": [
          "CLIP"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "default": "photograph of photomaker"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "photomaker",
        "image",
        "clip",
        "text"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "PhotoMakerEncode",
    "display_name": "PhotoMakerEncode",
    "description": "",
    "python_module": "comfy_extras.nodes_photomaker",
    "category": "_for_testing/photomaker",
    "output_node": false
  },
  "CLIPTextEncodePixArtAlpha": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodePixArtAlpha",
    "display_name": "CLIPTextEncodePixArtAlpha",
    "description": "Encodes text and sets the resolution conditioning for PixArt Alpha. Does not apply to PixArt Sigma.",
    "python_module": "comfy_extras.nodes_pixart",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "CLIPTextEncodeControlnet": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "conditioning": [
          "CONDITIONING"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "conditioning",
        "text"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeControlnet",
    "display_name": "CLIPTextEncodeControlnet",
    "description": "",
    "python_module": "comfy_extras.nodes_cond",
    "category": "_for_testing/conditioning",
    "output_node": false
  },
  "Morphology": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "operation": [
          [
            "erode",
            "dilate",
            "open",
            "close",
            "gradient",
            "bottom_hat",
            "top_hat"
          ]
        ],
        "kernel_size": [
          "INT",
          {
            "default": 3,
            "min": 3,
            "max": 999,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "operation",
        "kernel_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Morphology",
    "display_name": "ImageMorphology",
    "description": "",
    "python_module": "comfy_extras.nodes_morphology",
    "category": "image/postprocessing",
    "output_node": false
  },
  "ImageRGBToYUV": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "Y",
      "U",
      "V"
    ],
    "name": "ImageRGBToYUV",
    "display_name": "ImageRGBToYUV",
    "description": "",
    "python_module": "comfy_extras.nodes_morphology",
    "category": "image/batch",
    "output_node": false
  },
  "ImageYUVToRGB": {
    "input": {
      "required": {
        "Y": [
          "IMAGE"
        ],
        "U": [
          "IMAGE"
        ],
        "V": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "Y",
        "U",
        "V"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageYUVToRGB",
    "display_name": "ImageYUVToRGB",
    "description": "",
    "python_module": "comfy_extras.nodes_morphology",
    "category": "image/batch",
    "output_node": false
  },
  "StableCascade_EmptyLatentImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 256,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 256,
            "max": 16384,
            "step": 8
          }
        ],
        "compression": [
          "INT",
          {
            "default": 42,
            "min": 4,
            "max": 128,
            "step": 1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "compression",
        "batch_size"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "stage_c",
      "stage_b"
    ],
    "name": "StableCascade_EmptyLatentImage",
    "display_name": "StableCascade_EmptyLatentImage",
    "description": "",
    "python_module": "comfy_extras.nodes_stable_cascade",
    "category": "latent/stable_cascade",
    "output_node": false
  },
  "StableCascade_StageB_Conditioning": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "stage_c": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "stage_c"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "StableCascade_StageB_Conditioning",
    "display_name": "StableCascade_StageB_Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_stable_cascade",
    "category": "conditioning/stable_cascade",
    "output_node": false
  },
  "StableCascade_StageC_VAEEncode": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "compression": [
          "INT",
          {
            "default": 42,
            "min": 4,
            "max": 128,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "vae",
        "compression"
      ]
    },
    "output": [
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "stage_c",
      "stage_b"
    ],
    "name": "StableCascade_StageC_VAEEncode",
    "display_name": "StableCascade_StageC_VAEEncode",
    "description": "",
    "python_module": "comfy_extras.nodes_stable_cascade",
    "category": "latent/stable_cascade",
    "output_node": false
  },
  "StableCascade_SuperResolutionControlnet": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "vae"
      ]
    },
    "output": [
      "IMAGE",
      "LATENT",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "controlnet_input",
      "stage_c",
      "stage_b"
    ],
    "name": "StableCascade_SuperResolutionControlnet",
    "display_name": "StableCascade_SuperResolutionControlnet",
    "description": "",
    "python_module": "comfy_extras.nodes_stable_cascade",
    "category": "_for_testing/stable_cascade",
    "output_node": false,
    "experimental": true
  },
  "DifferentialDiffusion": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "DifferentialDiffusion",
    "display_name": "Differential Diffusion",
    "description": "",
    "python_module": "comfy_extras.nodes_differential_diffusion",
    "category": "_for_testing",
    "output_node": false
  },
  "InstructPixToPixConditioning": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "pixels": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "pixels"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "InstructPixToPixConditioning",
    "display_name": "InstructPixToPixConditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_ip2p",
    "category": "conditioning/instructpix2pix",
    "output_node": false
  },
  "ModelMergeSD1": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "time_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "label_emb.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "out.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "time_embed.",
        "label_emb.",
        "input_blocks.0.",
        "input_blocks.1.",
        "input_blocks.2.",
        "input_blocks.3.",
        "input_blocks.4.",
        "input_blocks.5.",
        "input_blocks.6.",
        "input_blocks.7.",
        "input_blocks.8.",
        "input_blocks.9.",
        "input_blocks.10.",
        "input_blocks.11.",
        "middle_block.0.",
        "middle_block.1.",
        "middle_block.2.",
        "output_blocks.0.",
        "output_blocks.1.",
        "output_blocks.2.",
        "output_blocks.3.",
        "output_blocks.4.",
        "output_blocks.5.",
        "output_blocks.6.",
        "output_blocks.7.",
        "output_blocks.8.",
        "output_blocks.9.",
        "output_blocks.10.",
        "output_blocks.11.",
        "out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSD1",
    "display_name": "ModelMergeSD1",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeSD2": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "time_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "label_emb.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "out.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "time_embed.",
        "label_emb.",
        "input_blocks.0.",
        "input_blocks.1.",
        "input_blocks.2.",
        "input_blocks.3.",
        "input_blocks.4.",
        "input_blocks.5.",
        "input_blocks.6.",
        "input_blocks.7.",
        "input_blocks.8.",
        "input_blocks.9.",
        "input_blocks.10.",
        "input_blocks.11.",
        "middle_block.0.",
        "middle_block.1.",
        "middle_block.2.",
        "output_blocks.0.",
        "output_blocks.1.",
        "output_blocks.2.",
        "output_blocks.3.",
        "output_blocks.4.",
        "output_blocks.5.",
        "output_blocks.6.",
        "output_blocks.7.",
        "output_blocks.8.",
        "output_blocks.9.",
        "output_blocks.10.",
        "output_blocks.11.",
        "out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSD2",
    "display_name": "ModelMergeSD2",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeSDXL": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "time_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "label_emb.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.0": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.0": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "out.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "time_embed.",
        "label_emb.",
        "input_blocks.0",
        "input_blocks.1",
        "input_blocks.2",
        "input_blocks.3",
        "input_blocks.4",
        "input_blocks.5",
        "input_blocks.6",
        "input_blocks.7",
        "input_blocks.8",
        "middle_block.0",
        "middle_block.1",
        "middle_block.2",
        "output_blocks.0",
        "output_blocks.1",
        "output_blocks.2",
        "output_blocks.3",
        "output_blocks.4",
        "output_blocks.5",
        "output_blocks.6",
        "output_blocks.7",
        "output_blocks.8",
        "out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSDXL",
    "display_name": "ModelMergeSDXL",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeSD3_2B": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "x_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "context_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "y_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_embed.",
        "x_embedder.",
        "context_embedder.",
        "y_embedder.",
        "t_embedder.",
        "joint_blocks.0.",
        "joint_blocks.1.",
        "joint_blocks.2.",
        "joint_blocks.3.",
        "joint_blocks.4.",
        "joint_blocks.5.",
        "joint_blocks.6.",
        "joint_blocks.7.",
        "joint_blocks.8.",
        "joint_blocks.9.",
        "joint_blocks.10.",
        "joint_blocks.11.",
        "joint_blocks.12.",
        "joint_blocks.13.",
        "joint_blocks.14.",
        "joint_blocks.15.",
        "joint_blocks.16.",
        "joint_blocks.17.",
        "joint_blocks.18.",
        "joint_blocks.19.",
        "joint_blocks.20.",
        "joint_blocks.21.",
        "joint_blocks.22.",
        "joint_blocks.23.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSD3_2B",
    "display_name": "ModelMergeSD3_2B",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeAuraflow": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "init_x_linear.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "positional_encoding": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "cond_seq_linear.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "register_tokens": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_layers.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_layers.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_layers.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_layers.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.28.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.29.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.30.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_layers.31.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "modF.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_linear.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "init_x_linear.",
        "positional_encoding",
        "cond_seq_linear.",
        "register_tokens",
        "t_embedder.",
        "double_layers.0.",
        "double_layers.1.",
        "double_layers.2.",
        "double_layers.3.",
        "single_layers.0.",
        "single_layers.1.",
        "single_layers.2.",
        "single_layers.3.",
        "single_layers.4.",
        "single_layers.5.",
        "single_layers.6.",
        "single_layers.7.",
        "single_layers.8.",
        "single_layers.9.",
        "single_layers.10.",
        "single_layers.11.",
        "single_layers.12.",
        "single_layers.13.",
        "single_layers.14.",
        "single_layers.15.",
        "single_layers.16.",
        "single_layers.17.",
        "single_layers.18.",
        "single_layers.19.",
        "single_layers.20.",
        "single_layers.21.",
        "single_layers.22.",
        "single_layers.23.",
        "single_layers.24.",
        "single_layers.25.",
        "single_layers.26.",
        "single_layers.27.",
        "single_layers.28.",
        "single_layers.29.",
        "single_layers.30.",
        "single_layers.31.",
        "modF.",
        "final_linear."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeAuraflow",
    "display_name": "ModelMergeAuraflow",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeFlux1": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "img_in.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "time_in.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "guidance_in": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "vector_in.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "txt_in.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "double_blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.28.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.29.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.30.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.31.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.32.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.33.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.34.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.35.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.36.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "single_blocks.37.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "img_in.",
        "time_in.",
        "guidance_in",
        "vector_in.",
        "txt_in.",
        "double_blocks.0.",
        "double_blocks.1.",
        "double_blocks.2.",
        "double_blocks.3.",
        "double_blocks.4.",
        "double_blocks.5.",
        "double_blocks.6.",
        "double_blocks.7.",
        "double_blocks.8.",
        "double_blocks.9.",
        "double_blocks.10.",
        "double_blocks.11.",
        "double_blocks.12.",
        "double_blocks.13.",
        "double_blocks.14.",
        "double_blocks.15.",
        "double_blocks.16.",
        "double_blocks.17.",
        "double_blocks.18.",
        "single_blocks.0.",
        "single_blocks.1.",
        "single_blocks.2.",
        "single_blocks.3.",
        "single_blocks.4.",
        "single_blocks.5.",
        "single_blocks.6.",
        "single_blocks.7.",
        "single_blocks.8.",
        "single_blocks.9.",
        "single_blocks.10.",
        "single_blocks.11.",
        "single_blocks.12.",
        "single_blocks.13.",
        "single_blocks.14.",
        "single_blocks.15.",
        "single_blocks.16.",
        "single_blocks.17.",
        "single_blocks.18.",
        "single_blocks.19.",
        "single_blocks.20.",
        "single_blocks.21.",
        "single_blocks.22.",
        "single_blocks.23.",
        "single_blocks.24.",
        "single_blocks.25.",
        "single_blocks.26.",
        "single_blocks.27.",
        "single_blocks.28.",
        "single_blocks.29.",
        "single_blocks.30.",
        "single_blocks.31.",
        "single_blocks.32.",
        "single_blocks.33.",
        "single_blocks.34.",
        "single_blocks.35.",
        "single_blocks.36.",
        "single_blocks.37.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeFlux1",
    "display_name": "ModelMergeFlux1",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeSD35_Large": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "x_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "context_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "y_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.28.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.29.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.30.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.31.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.32.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.33.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.34.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.35.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.36.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "joint_blocks.37.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_embed.",
        "x_embedder.",
        "context_embedder.",
        "y_embedder.",
        "t_embedder.",
        "joint_blocks.0.",
        "joint_blocks.1.",
        "joint_blocks.2.",
        "joint_blocks.3.",
        "joint_blocks.4.",
        "joint_blocks.5.",
        "joint_blocks.6.",
        "joint_blocks.7.",
        "joint_blocks.8.",
        "joint_blocks.9.",
        "joint_blocks.10.",
        "joint_blocks.11.",
        "joint_blocks.12.",
        "joint_blocks.13.",
        "joint_blocks.14.",
        "joint_blocks.15.",
        "joint_blocks.16.",
        "joint_blocks.17.",
        "joint_blocks.18.",
        "joint_blocks.19.",
        "joint_blocks.20.",
        "joint_blocks.21.",
        "joint_blocks.22.",
        "joint_blocks.23.",
        "joint_blocks.24.",
        "joint_blocks.25.",
        "joint_blocks.26.",
        "joint_blocks.27.",
        "joint_blocks.28.",
        "joint_blocks.29.",
        "joint_blocks.30.",
        "joint_blocks.31.",
        "joint_blocks.32.",
        "joint_blocks.33.",
        "joint_blocks.34.",
        "joint_blocks.35.",
        "joint_blocks.36.",
        "joint_blocks.37.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeSD35_Large",
    "display_name": "ModelMergeSD35_Large",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeMochiPreview": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_frequencies.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t5_y_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t5_yproj.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.28.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.29.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.30.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.31.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.32.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.33.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.34.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.35.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.36.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.37.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.38.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.39.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.40.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.41.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.42.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.43.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.44.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.45.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.46.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.47.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_frequencies.",
        "t_embedder.",
        "t5_y_embedder.",
        "t5_yproj.",
        "blocks.0.",
        "blocks.1.",
        "blocks.2.",
        "blocks.3.",
        "blocks.4.",
        "blocks.5.",
        "blocks.6.",
        "blocks.7.",
        "blocks.8.",
        "blocks.9.",
        "blocks.10.",
        "blocks.11.",
        "blocks.12.",
        "blocks.13.",
        "blocks.14.",
        "blocks.15.",
        "blocks.16.",
        "blocks.17.",
        "blocks.18.",
        "blocks.19.",
        "blocks.20.",
        "blocks.21.",
        "blocks.22.",
        "blocks.23.",
        "blocks.24.",
        "blocks.25.",
        "blocks.26.",
        "blocks.27.",
        "blocks.28.",
        "blocks.29.",
        "blocks.30.",
        "blocks.31.",
        "blocks.32.",
        "blocks.33.",
        "blocks.34.",
        "blocks.35.",
        "blocks.36.",
        "blocks.37.",
        "blocks.38.",
        "blocks.39.",
        "blocks.40.",
        "blocks.41.",
        "blocks.42.",
        "blocks.43.",
        "blocks.44.",
        "blocks.45.",
        "blocks.46.",
        "blocks.47.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeMochiPreview",
    "display_name": "ModelMergeMochiPreview",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeLTXV": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "patchify_proj.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "adaln_single.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "caption_projection.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "transformer_blocks.27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "scale_shift_table": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "proj_out.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "patchify_proj.",
        "adaln_single.",
        "caption_projection.",
        "transformer_blocks.0.",
        "transformer_blocks.1.",
        "transformer_blocks.2.",
        "transformer_blocks.3.",
        "transformer_blocks.4.",
        "transformer_blocks.5.",
        "transformer_blocks.6.",
        "transformer_blocks.7.",
        "transformer_blocks.8.",
        "transformer_blocks.9.",
        "transformer_blocks.10.",
        "transformer_blocks.11.",
        "transformer_blocks.12.",
        "transformer_blocks.13.",
        "transformer_blocks.14.",
        "transformer_blocks.15.",
        "transformer_blocks.16.",
        "transformer_blocks.17.",
        "transformer_blocks.18.",
        "transformer_blocks.19.",
        "transformer_blocks.20.",
        "transformer_blocks.21.",
        "transformer_blocks.22.",
        "transformer_blocks.23.",
        "transformer_blocks.24.",
        "transformer_blocks.25.",
        "transformer_blocks.26.",
        "transformer_blocks.27.",
        "scale_shift_table",
        "proj_out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeLTXV",
    "display_name": "ModelMergeLTXV",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeCosmos7B": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "extra_pos_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "x_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "affline_norm.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_embedder.",
        "extra_pos_embedder.",
        "x_embedder.",
        "t_embedder.",
        "affline_norm.",
        "blocks.block0.",
        "blocks.block1.",
        "blocks.block2.",
        "blocks.block3.",
        "blocks.block4.",
        "blocks.block5.",
        "blocks.block6.",
        "blocks.block7.",
        "blocks.block8.",
        "blocks.block9.",
        "blocks.block10.",
        "blocks.block11.",
        "blocks.block12.",
        "blocks.block13.",
        "blocks.block14.",
        "blocks.block15.",
        "blocks.block16.",
        "blocks.block17.",
        "blocks.block18.",
        "blocks.block19.",
        "blocks.block20.",
        "blocks.block21.",
        "blocks.block22.",
        "blocks.block23.",
        "blocks.block24.",
        "blocks.block25.",
        "blocks.block26.",
        "blocks.block27.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeCosmos7B",
    "display_name": "ModelMergeCosmos7B",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeCosmos14B": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "pos_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "extra_pos_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "x_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "t_embedder.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "affline_norm.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block28.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block29.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block30.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block31.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block32.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block33.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block34.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.block35.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "final_layer.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "pos_embedder.",
        "extra_pos_embedder.",
        "x_embedder.",
        "t_embedder.",
        "affline_norm.",
        "blocks.block0.",
        "blocks.block1.",
        "blocks.block2.",
        "blocks.block3.",
        "blocks.block4.",
        "blocks.block5.",
        "blocks.block6.",
        "blocks.block7.",
        "blocks.block8.",
        "blocks.block9.",
        "blocks.block10.",
        "blocks.block11.",
        "blocks.block12.",
        "blocks.block13.",
        "blocks.block14.",
        "blocks.block15.",
        "blocks.block16.",
        "blocks.block17.",
        "blocks.block18.",
        "blocks.block19.",
        "blocks.block20.",
        "blocks.block21.",
        "blocks.block22.",
        "blocks.block23.",
        "blocks.block24.",
        "blocks.block25.",
        "blocks.block26.",
        "blocks.block27.",
        "blocks.block28.",
        "blocks.block29.",
        "blocks.block30.",
        "blocks.block31.",
        "blocks.block32.",
        "blocks.block33.",
        "blocks.block34.",
        "blocks.block35.",
        "final_layer."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeCosmos14B",
    "display_name": "ModelMergeCosmos14B",
    "description": "",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "ModelMergeWAN2_1": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "patch_embedding.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "time_embedding.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "time_projection.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "text_embedding.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "img_emb.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.12.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.13.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.14.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.15.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.16.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.17.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.18.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.19.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.20.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.21.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.22.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.23.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.24.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.25.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.26.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.27.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.28.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.29.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.30.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.31.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.32.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.33.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.34.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.35.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.36.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.37.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.38.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "blocks.39.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "head.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "patch_embedding.",
        "time_embedding.",
        "time_projection.",
        "text_embedding.",
        "img_emb.",
        "blocks.0.",
        "blocks.1.",
        "blocks.2.",
        "blocks.3.",
        "blocks.4.",
        "blocks.5.",
        "blocks.6.",
        "blocks.7.",
        "blocks.8.",
        "blocks.9.",
        "blocks.10.",
        "blocks.11.",
        "blocks.12.",
        "blocks.13.",
        "blocks.14.",
        "blocks.15.",
        "blocks.16.",
        "blocks.17.",
        "blocks.18.",
        "blocks.19.",
        "blocks.20.",
        "blocks.21.",
        "blocks.22.",
        "blocks.23.",
        "blocks.24.",
        "blocks.25.",
        "blocks.26.",
        "blocks.27.",
        "blocks.28.",
        "blocks.29.",
        "blocks.30.",
        "blocks.31.",
        "blocks.32.",
        "blocks.33.",
        "blocks.34.",
        "blocks.35.",
        "blocks.36.",
        "blocks.37.",
        "blocks.38.",
        "blocks.39.",
        "head."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelMergeWAN2_1",
    "display_name": "ModelMergeWAN2_1",
    "description": "1.3B model has 30 blocks, 14B model has 40 blocks. Image to video model has the extra img_emb.",
    "python_module": "comfy_extras.nodes_model_merging_model_specific",
    "category": "advanced/model_merging/model_specific",
    "output_node": false
  },
  "PerturbedAttentionGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "scale": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "scale"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "PerturbedAttentionGuidance",
    "display_name": "PerturbedAttentionGuidance",
    "description": "",
    "python_module": "comfy_extras.nodes_pag",
    "category": "model_patches/unet",
    "output_node": false
  },
  "AlignYourStepsScheduler": {
    "input": {
      "required": {
        "model_type": [
          [
            "SD1",
            "SDXL",
            "SVD"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 10000
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_type",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "AlignYourStepsScheduler",
    "display_name": "AlignYourStepsScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_align_your_steps",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "UNetSelfAttentionMultiply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "q",
        "k",
        "v",
        "out"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "UNetSelfAttentionMultiply",
    "display_name": "UNetSelfAttentionMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_attention_multiply",
    "category": "_for_testing/attention_experiments",
    "output_node": false
  },
  "UNetCrossAttentionMultiply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "q",
        "k",
        "v",
        "out"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "UNetCrossAttentionMultiply",
    "display_name": "UNetCrossAttentionMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_attention_multiply",
    "category": "_for_testing/attention_experiments",
    "output_node": false
  },
  "CLIPAttentionMultiply": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "q",
        "k",
        "v",
        "out"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "CLIPAttentionMultiply",
    "display_name": "CLIPAttentionMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_attention_multiply",
    "category": "_for_testing/attention_experiments",
    "output_node": false
  },
  "UNetTemporalAttentionMultiply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "self_structural": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "self_temporal": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "cross_structural": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "cross_temporal": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "self_structural",
        "self_temporal",
        "cross_structural",
        "cross_temporal"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "UNetTemporalAttentionMultiply",
    "display_name": "UNetTemporalAttentionMultiply",
    "description": "",
    "python_module": "comfy_extras.nodes_attention_multiply",
    "category": "_for_testing/attention_experiments",
    "output_node": false
  },
  "SamplerLCMUpscale": {
    "input": {
      "required": {
        "scale_ratio": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "scale_steps": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 1000,
            "step": 1
          }
        ],
        "upscale_method": [
          [
            "bislerp",
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "scale_ratio",
        "scale_steps",
        "upscale_method"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerLCMUpscale",
    "display_name": "SamplerLCMUpscale",
    "description": "",
    "python_module": "comfy_extras.nodes_advanced_samplers",
    "category": "sampling/custom_sampling/samplers",
    "output_node": false
  },
  "SamplerEulerCFGpp": {
    "input": {
      "required": {
        "version": [
          [
            "regular",
            "alternative"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "version"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "SamplerEulerCFGpp",
    "display_name": "SamplerEulerCFG++",
    "description": "",
    "python_module": "comfy_extras.nodes_advanced_samplers",
    "category": "_for_testing",
    "output_node": false
  },
  "WebcamCapture": {
    "input": {
      "required": {
        "image": [
          "WEBCAM",
          {}
        ],
        "width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "capture_on_queue": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "capture_on_queue"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "WebcamCapture",
    "display_name": "Webcam Capture",
    "description": "",
    "python_module": "comfy_extras.nodes_webcam",
    "category": "image",
    "output_node": false
  },
  "EmptyLatentAudio": {
    "input": {
      "required": {
        "seconds": [
          "FLOAT",
          {
            "default": 47.6,
            "min": 1.0,
            "max": 1000.0,
            "step": 0.1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seconds",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyLatentAudio",
    "display_name": "EmptyLatentAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "latent/audio",
    "output_node": false
  },
  "VAEEncodeAudio": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "audio",
        "vae"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "VAEEncodeAudio",
    "display_name": "VAEEncodeAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "latent/audio",
    "output_node": false
  },
  "VAEDecodeAudio": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "AUDIO"
    ],
    "name": "VAEDecodeAudio",
    "display_name": "VAEDecodeAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "latent/audio",
    "output_node": false
  },
  "SaveAudio": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "audio/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "audio",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveAudio",
    "display_name": "SaveAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "audio",
    "output_node": true
  },
  "LoadAudio": {
    "input": {
      "required": {
        "audio": [
          [
            "1.mp4",
            "2.mp4",
            "3.mp4",
            "4.mp4",
            "5.mp4",
            "6.mp4",
            "WanI2V_Result_00016.mp4",
            "WanI2V_Result_00036.mp4",
            "WanI2V_Result_00056.mp4",
            "finalVideo_v42_2025-04-03.mp4"
          ],
          {
            "audio_upload": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "audio"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "AUDIO"
    ],
    "name": "LoadAudio",
    "display_name": "LoadAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "audio",
    "output_node": false
  },
  "PreviewAudio": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "audio"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "PreviewAudio",
    "display_name": "PreviewAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "audio",
    "output_node": true
  },
  "ConditioningStableAudio": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "seconds_start": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.1
          }
        ],
        "seconds_total": [
          "FLOAT",
          {
            "default": 47.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "seconds_start",
        "seconds_total"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ConditioningStableAudio",
    "display_name": "ConditioningStableAudio",
    "description": "",
    "python_module": "comfy_extras.nodes_audio",
    "category": "conditioning",
    "output_node": false
  },
  "TripleCLIPLoader": {
    "input": {
      "required": {
        "clip_name1": [
          [
            "clip_l.safetensors",
            "open-clip-xlm-roberta-large-vit-huge-14_visual_fp32.safetensors",
            "t5xxl_fp16.safetensors",
            "umt5-xxl-enc-bf16.safetensors",
            "umt5_xxl_fp16.safetensors",
            "umt5_xxl_fp8_e4m3fn_scaled.safetensors"
          ]
        ],
        "clip_name2": [
          [
            "clip_l.safetensors",
            "open-clip-xlm-roberta-large-vit-huge-14_visual_fp32.safetensors",
            "t5xxl_fp16.safetensors",
            "umt5-xxl-enc-bf16.safetensors",
            "umt5_xxl_fp16.safetensors",
            "umt5_xxl_fp8_e4m3fn_scaled.safetensors"
          ]
        ],
        "clip_name3": [
          [
            "clip_l.safetensors",
            "open-clip-xlm-roberta-large-vit-huge-14_visual_fp32.safetensors",
            "t5xxl_fp16.safetensors",
            "umt5-xxl-enc-bf16.safetensors",
            "umt5_xxl_fp16.safetensors",
            "umt5_xxl_fp8_e4m3fn_scaled.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name1",
        "clip_name2",
        "clip_name3"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "TripleCLIPLoader",
    "display_name": "TripleCLIPLoader",
    "description": "[Recipes]\n\nsd3: clip-l, clip-g, t5",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "advanced/loaders",
    "output_node": false
  },
  "EmptySD3LatentImage": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptySD3LatentImage",
    "display_name": "EmptySD3LatentImage",
    "description": "",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "latent/sd3",
    "output_node": false
  },
  "CLIPTextEncodeSD3": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "clip_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "clip_g": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "t5xxl": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "empty_padding": [
          [
            "none",
            "empty_prompt"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "clip_l",
        "clip_g",
        "t5xxl",
        "empty_padding"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeSD3",
    "display_name": "CLIPTextEncodeSD3",
    "description": "",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "ControlNetApplySD3": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "vae": [
          "VAE"
        ],
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "control_net",
        "vae",
        "image",
        "strength",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ControlNetApplySD3",
    "display_name": "Apply Controlnet with VAE",
    "description": "",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "conditioning/controlnet",
    "output_node": false,
    "deprecated": true
  },
  "SkipLayerGuidanceSD3": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "layers": [
          "STRING",
          {
            "default": "7, 8, 9",
            "multiline": false
          }
        ],
        "scale": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.01,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "layers",
        "scale",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "SkipLayerGuidanceSD3",
    "display_name": "SkipLayerGuidanceSD3",
    "description": "Generic version of SkipLayerGuidance node that can be used on every DiT model.",
    "python_module": "comfy_extras.nodes_sd3",
    "category": "advanced/guidance",
    "output_node": false,
    "experimental": true
  },
  "GITSScheduler": {
    "input": {
      "required": {
        "coeff": [
          "FLOAT",
          {
            "default": 1.2,
            "min": 0.8,
            "max": 1.5,
            "step": 0.05
          }
        ],
        "steps": [
          "INT",
          {
            "default": 10,
            "min": 2,
            "max": 1000
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "coeff",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "GITSScheduler",
    "display_name": "GITSScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_gits",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "SetUnionControlNetType": {
    "input": {
      "required": {
        "control_net": [
          "CONTROL_NET"
        ],
        "type": [
          [
            "auto",
            "openpose",
            "depth",
            "hed/pidi/scribble/ted",
            "canny/lineart/anime_lineart/mlsd",
            "normal",
            "segment",
            "tile",
            "repaint"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net",
        "type"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "SetUnionControlNetType",
    "display_name": "SetUnionControlNetType",
    "description": "",
    "python_module": "comfy_extras.nodes_controlnet",
    "category": "conditioning/controlnet",
    "output_node": false
  },
  "ControlNetInpaintingAliMamaApply": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "vae": [
          "VAE"
        ],
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "control_net",
        "vae",
        "image",
        "mask",
        "strength",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "ControlNetInpaintingAliMamaApply",
    "display_name": "ControlNetInpaintingAliMamaApply",
    "description": "",
    "python_module": "comfy_extras.nodes_controlnet",
    "category": "conditioning/controlnet",
    "output_node": false
  },
  "CLIPTextEncodeHunyuanDiT": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "bert": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "mt5xl": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "bert",
        "mt5xl"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeHunyuanDiT",
    "display_name": "CLIPTextEncodeHunyuanDiT",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "TextEncodeHunyuanVideo_ImageToVideo": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "image_interleave": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 512,
            "tooltip": "How much the image influences things vs the text prompt. Higher number means more influence from the text prompt."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "clip_vision_output",
        "prompt",
        "image_interleave"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "TextEncodeHunyuanVideo_ImageToVideo",
    "display_name": "TextEncodeHunyuanVideo_ImageToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "EmptyHunyuanLatentVideo": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 848,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 25,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "length",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyHunyuanLatentVideo",
    "display_name": "EmptyHunyuanLatentVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan",
    "category": "latent/video",
    "output_node": false
  },
  "HunyuanImageToVideo": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 848,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 53,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "guidance_type": [
          [
            "v1 (concat)",
            "v2 (replace)"
          ]
        ]
      },
      "optional": {
        "start_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "vae",
        "width",
        "height",
        "length",
        "batch_size",
        "guidance_type"
      ],
      "optional": [
        "start_image"
      ]
    },
    "output": [
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "latent"
    ],
    "name": "HunyuanImageToVideo",
    "display_name": "HunyuanImageToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "CLIPTextEncodeFlux": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "clip_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "t5xxl": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "guidance": [
          "FLOAT",
          {
            "default": 3.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "clip_l",
        "t5xxl",
        "guidance"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeFlux",
    "display_name": "CLIPTextEncodeFlux",
    "description": "",
    "python_module": "comfy_extras.nodes_flux",
    "category": "advanced/conditioning/flux",
    "output_node": false
  },
  "FluxGuidance": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "guidance": [
          "FLOAT",
          {
            "default": 3.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "guidance"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "FluxGuidance",
    "display_name": "FluxGuidance",
    "description": "",
    "python_module": "comfy_extras.nodes_flux",
    "category": "advanced/conditioning/flux",
    "output_node": false
  },
  "FluxDisableGuidance": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "FluxDisableGuidance",
    "display_name": "FluxDisableGuidance",
    "description": "This node completely disables the guidance embed on Flux and Flux like models",
    "python_module": "comfy_extras.nodes_flux",
    "category": "advanced/conditioning/flux",
    "output_node": false
  },
  "LoraSave": {
    "input": {
      "required": {
        "filename_prefix": [
          "STRING",
          {
            "default": "loras/ComfyUI_extracted_lora"
          }
        ],
        "rank": [
          "INT",
          {
            "default": 8,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "lora_type": [
          [
            "standard",
            "full_diff"
          ]
        ],
        "bias_diff": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "model_diff": [
          "MODEL",
          {
            "tooltip": "The ModelSubtract output to be converted to a lora."
          }
        ],
        "text_encoder_diff": [
          "CLIP",
          {
            "tooltip": "The CLIPSubtract output to be converted to a lora."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "filename_prefix",
        "rank",
        "lora_type",
        "bias_diff"
      ],
      "optional": [
        "model_diff",
        "text_encoder_diff"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "LoraSave",
    "display_name": "Extract and Save Lora",
    "description": "",
    "python_module": "comfy_extras.nodes_lora_extract",
    "category": "_for_testing",
    "output_node": true
  },
  "TorchCompileModel": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "backend"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "TorchCompileModel",
    "display_name": "TorchCompileModel",
    "description": "",
    "python_module": "comfy_extras.nodes_torch_compile",
    "category": "_for_testing",
    "output_node": false,
    "experimental": true
  },
  "EmptyMochiLatentVideo": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 848,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 25,
            "min": 7,
            "max": 16384,
            "step": 6
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "length",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyMochiLatentVideo",
    "display_name": "EmptyMochiLatentVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_mochi",
    "category": "latent/video",
    "output_node": false
  },
  "SkipLayerGuidanceDiT": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "double_layers": [
          "STRING",
          {
            "default": "7, 8, 9",
            "multiline": false
          }
        ],
        "single_layers": [
          "STRING",
          {
            "default": "7, 8, 9",
            "multiline": false
          }
        ],
        "scale": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.01,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "rescaling_scale": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "double_layers",
        "single_layers",
        "scale",
        "start_percent",
        "end_percent",
        "rescaling_scale"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "SkipLayerGuidanceDiT",
    "display_name": "SkipLayerGuidanceDiT",
    "description": "Generic version of SkipLayerGuidance node that can be used on every DiT model.",
    "python_module": "comfy_extras.nodes_slg",
    "category": "advanced/guidance",
    "output_node": false,
    "experimental": true
  },
  "Mahiro": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "patched_model"
    ],
    "name": "Mahiro",
    "display_name": "Mahiro is so cute that she deserves a better guidance function!! (\u3002\u30fb\u03c9\u30fb\u3002)",
    "description": "Modify the guidance to scale more on the 'direction' of the positive prompt rather than the difference between the negative prompt.",
    "python_module": "comfy_extras.nodes_mahiro",
    "category": "_for_testing",
    "output_node": false
  },
  "EmptyLTXVLatentVideo": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 768,
            "min": 64,
            "max": 16384,
            "step": 32
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 32
          }
        ],
        "length": [
          "INT",
          {
            "default": 97,
            "min": 1,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "length",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyLTXVLatentVideo",
    "display_name": "EmptyLTXVLatentVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "latent/video/ltxv",
    "output_node": false
  },
  "LTXVImgToVideo": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 768,
            "min": 64,
            "max": 16384,
            "step": 32
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 32
          }
        ],
        "length": [
          "INT",
          {
            "default": 97,
            "min": 9,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "image",
        "width",
        "height",
        "length",
        "batch_size"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "LTXVImgToVideo",
    "display_name": "LTXVImgToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "ModelSamplingLTXV": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "max_shift": [
          "FLOAT",
          {
            "default": 2.05,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "base_shift": [
          "FLOAT",
          {
            "default": 0.95,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "max_shift",
        "base_shift"
      ],
      "optional": [
        "latent"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelSamplingLTXV",
    "display_name": "ModelSamplingLTXV",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "advanced/model",
    "output_node": false
  },
  "LTXVConditioning": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "frame_rate": [
          "FLOAT",
          {
            "default": 25.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "frame_rate"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "LTXVConditioning",
    "display_name": "LTXVConditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "LTXVScheduler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "max_shift": [
          "FLOAT",
          {
            "default": 2.05,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "base_shift": [
          "FLOAT",
          {
            "default": 0.95,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "stretch": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Stretch the sigmas to be in the range [terminal, 1]."
          }
        ],
        "terminal": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 0.99,
            "step": 0.01,
            "tooltip": "The terminal value of the sigmas after stretching."
          }
        ]
      },
      "optional": {
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "max_shift",
        "base_shift",
        "stretch",
        "terminal"
      ],
      "optional": [
        "latent"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "LTXVScheduler",
    "display_name": "LTXVScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "LTXVAddGuide": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "latent": [
          "LATENT"
        ],
        "image": [
          "IMAGE",
          {
            "tooltip": "Image or video to condition the latent video on. Must be 8*n + 1 frames.If the video is not 8*n + 1 frames, it will be cropped to the nearest 8*n + 1 frames."
          }
        ],
        "frame_idx": [
          "INT",
          {
            "default": 0,
            "min": -9999,
            "max": 9999,
            "tooltip": "Frame index to start the conditioning at. For single-frame images or videos with 1-8 frames, any frame_idx value is acceptable. For videos with 9+ frames, frame_idx must be divisible by 8, otherwise it will be rounded down to the nearest multiple of 8. Negative values are counted from the end of the video."
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "latent",
        "image",
        "frame_idx",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "LTXVAddGuide",
    "display_name": "LTXVAddGuide",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "LTXVPreprocess": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "img_compression": [
          "INT",
          {
            "default": 35,
            "min": 0,
            "max": 100,
            "tooltip": "Amount of compression to apply on image."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "img_compression"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "output_image"
    ],
    "name": "LTXVPreprocess",
    "display_name": "LTXVPreprocess",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "image",
    "output_node": false
  },
  "LTXVCropGuides": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "latent"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "LTXVCropGuides",
    "display_name": "LTXVCropGuides",
    "description": "",
    "python_module": "comfy_extras.nodes_lt",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "CreateHookLora": {
    "input": {
      "required": {
        "lora_name": [
          []
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "prev_hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "lora_name",
        "strength_model",
        "strength_clip"
      ],
      "optional": [
        "prev_hooks"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CreateHookLora",
    "display_name": "Create Hook LoRA",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/create",
    "output_node": false,
    "experimental": true
  },
  "CreateHookLoraModelOnly": {
    "input": {
      "required": {
        "lora_name": [
          []
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "prev_hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "lora_name",
        "strength_model"
      ],
      "optional": [
        "prev_hooks"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CreateHookLoraModelOnly",
    "display_name": "Create Hook LoRA (MO)",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/create",
    "output_node": false,
    "experimental": true
  },
  "CreateHookModelAsLora": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "prev_hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "strength_model",
        "strength_clip"
      ],
      "optional": [
        "prev_hooks"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CreateHookModelAsLora",
    "display_name": "Create Hook Model as LoRA",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/create",
    "output_node": false,
    "experimental": true
  },
  "CreateHookModelAsLoraModelOnly": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "prev_hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "strength_model"
      ],
      "optional": [
        "prev_hooks"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CreateHookModelAsLoraModelOnly",
    "display_name": "Create Hook Model as LoRA (MO)",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/create",
    "output_node": false,
    "experimental": true
  },
  "SetHookKeyframes": {
    "input": {
      "required": {
        "hooks": [
          "HOOKS"
        ]
      },
      "optional": {
        "hook_kf": [
          "HOOK_KEYFRAMES"
        ]
      }
    },
    "input_order": {
      "required": [
        "hooks"
      ],
      "optional": [
        "hook_kf"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "SetHookKeyframes",
    "display_name": "Set Hook Keyframes",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/scheduling",
    "output_node": false,
    "experimental": true
  },
  "CreateHookKeyframe": {
    "input": {
      "required": {
        "strength_mult": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "prev_hook_kf": [
          "HOOK_KEYFRAMES"
        ]
      }
    },
    "input_order": {
      "required": [
        "strength_mult",
        "start_percent"
      ],
      "optional": [
        "prev_hook_kf"
      ]
    },
    "output": [
      "HOOK_KEYFRAMES"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOK_KF"
    ],
    "name": "CreateHookKeyframe",
    "display_name": "Create Hook Keyframe",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/scheduling",
    "output_node": false,
    "experimental": true
  },
  "CreateHookKeyframesInterpolated": {
    "input": {
      "required": {
        "strength_start": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "strength_end": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out"
          ]
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "keyframes_count": [
          "INT",
          {
            "default": 5,
            "min": 2,
            "max": 100,
            "step": 1
          }
        ],
        "print_keyframes": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "prev_hook_kf": [
          "HOOK_KEYFRAMES"
        ]
      }
    },
    "input_order": {
      "required": [
        "strength_start",
        "strength_end",
        "interpolation",
        "start_percent",
        "end_percent",
        "keyframes_count",
        "print_keyframes"
      ],
      "optional": [
        "prev_hook_kf"
      ]
    },
    "output": [
      "HOOK_KEYFRAMES"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOK_KF"
    ],
    "name": "CreateHookKeyframesInterpolated",
    "display_name": "Create Hook Keyframes Interp.",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/scheduling",
    "output_node": false,
    "experimental": true
  },
  "CreateHookKeyframesFromFloats": {
    "input": {
      "required": {
        "floats_strength": [
          "FLOATS",
          {
            "default": -1,
            "min": -1,
            "step": 0.001,
            "forceInput": true
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "print_keyframes": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "prev_hook_kf": [
          "HOOK_KEYFRAMES"
        ]
      }
    },
    "input_order": {
      "required": [
        "floats_strength",
        "start_percent",
        "end_percent",
        "print_keyframes"
      ],
      "optional": [
        "prev_hook_kf"
      ]
    },
    "output": [
      "HOOK_KEYFRAMES"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOK_KF"
    ],
    "name": "CreateHookKeyframesFromFloats",
    "display_name": "Create Hook Keyframes From Floats",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/scheduling",
    "output_node": false,
    "experimental": true
  },
  "CombineHooks2": {
    "input": {
      "required": {},
      "optional": {
        "hooks_A": [
          "HOOKS"
        ],
        "hooks_B": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "hooks_A",
        "hooks_B"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CombineHooks2",
    "display_name": "Combine Hooks [2]",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/combine",
    "output_node": false,
    "experimental": true
  },
  "CombineHooks4": {
    "input": {
      "required": {},
      "optional": {
        "hooks_A": [
          "HOOKS"
        ],
        "hooks_B": [
          "HOOKS"
        ],
        "hooks_C": [
          "HOOKS"
        ],
        "hooks_D": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "hooks_A",
        "hooks_B",
        "hooks_C",
        "hooks_D"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CombineHooks4",
    "display_name": "Combine Hooks [4]",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/combine",
    "output_node": false,
    "experimental": true
  },
  "CombineHooks8": {
    "input": {
      "required": {},
      "optional": {
        "hooks_A": [
          "HOOKS"
        ],
        "hooks_B": [
          "HOOKS"
        ],
        "hooks_C": [
          "HOOKS"
        ],
        "hooks_D": [
          "HOOKS"
        ],
        "hooks_E": [
          "HOOKS"
        ],
        "hooks_F": [
          "HOOKS"
        ],
        "hooks_G": [
          "HOOKS"
        ],
        "hooks_H": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "hooks_A",
        "hooks_B",
        "hooks_C",
        "hooks_D",
        "hooks_E",
        "hooks_F",
        "hooks_G",
        "hooks_H"
      ]
    },
    "output": [
      "HOOKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "HOOKS"
    ],
    "name": "CombineHooks8",
    "display_name": "Combine Hooks [8]",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/combine",
    "output_node": false,
    "experimental": true
  },
  "ConditioningSetProperties": {
    "input": {
      "required": {
        "cond_NEW": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "hooks": [
          "HOOKS"
        ],
        "timesteps": [
          "TIMESTEPS_RANGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "cond_NEW",
        "strength",
        "set_cond_area"
      ],
      "optional": [
        "mask",
        "hooks",
        "timesteps"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetProperties",
    "display_name": "Cond Set Props",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond single",
    "output_node": false,
    "experimental": true
  },
  "ConditioningSetPropertiesAndCombine": {
    "input": {
      "required": {
        "cond": [
          "CONDITIONING"
        ],
        "cond_NEW": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "hooks": [
          "HOOKS"
        ],
        "timesteps": [
          "TIMESTEPS_RANGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "cond",
        "cond_NEW",
        "strength",
        "set_cond_area"
      ],
      "optional": [
        "mask",
        "hooks",
        "timesteps"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetPropertiesAndCombine",
    "display_name": "Cond Set Props Combine",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond single",
    "output_node": false,
    "experimental": true
  },
  "PairConditioningSetProperties": {
    "input": {
      "required": {
        "positive_NEW": [
          "CONDITIONING"
        ],
        "negative_NEW": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "hooks": [
          "HOOKS"
        ],
        "timesteps": [
          "TIMESTEPS_RANGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive_NEW",
        "negative_NEW",
        "strength",
        "set_cond_area"
      ],
      "optional": [
        "mask",
        "hooks",
        "timesteps"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "PairConditioningSetProperties",
    "display_name": "Cond Pair Set Props",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond pair",
    "output_node": false,
    "experimental": true
  },
  "PairConditioningSetPropertiesAndCombine": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "positive_NEW": [
          "CONDITIONING"
        ],
        "negative_NEW": [
          "CONDITIONING"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "hooks": [
          "HOOKS"
        ],
        "timesteps": [
          "TIMESTEPS_RANGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "positive_NEW",
        "negative_NEW",
        "strength",
        "set_cond_area"
      ],
      "optional": [
        "mask",
        "hooks",
        "timesteps"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "PairConditioningSetPropertiesAndCombine",
    "display_name": "Cond Pair Set Props Combine",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond pair",
    "output_node": false,
    "experimental": true
  },
  "ConditioningSetDefaultCombine": {
    "input": {
      "required": {
        "cond": [
          "CONDITIONING"
        ],
        "cond_DEFAULT": [
          "CONDITIONING"
        ]
      },
      "optional": {
        "hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "cond",
        "cond_DEFAULT"
      ],
      "optional": [
        "hooks"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningSetDefaultCombine",
    "display_name": "Cond Set Default Combine",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond single",
    "output_node": false,
    "experimental": true
  },
  "PairConditioningSetDefaultCombine": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "positive_DEFAULT": [
          "CONDITIONING"
        ],
        "negative_DEFAULT": [
          "CONDITIONING"
        ]
      },
      "optional": {
        "hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "positive_DEFAULT",
        "negative_DEFAULT"
      ],
      "optional": [
        "hooks"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "PairConditioningSetDefaultCombine",
    "display_name": "Cond Pair Set Default Combine",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond pair",
    "output_node": false,
    "experimental": true
  },
  "PairConditioningCombine": {
    "input": {
      "required": {
        "positive_A": [
          "CONDITIONING"
        ],
        "negative_A": [
          "CONDITIONING"
        ],
        "positive_B": [
          "CONDITIONING"
        ],
        "negative_B": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive_A",
        "negative_A",
        "positive_B",
        "negative_B"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "PairConditioningCombine",
    "display_name": "Cond Pair Combine",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/cond pair",
    "output_node": false,
    "experimental": true
  },
  "SetClipHooks": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "apply_to_conds": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "schedule_clip": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "hooks": [
          "HOOKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "apply_to_conds",
        "schedule_clip"
      ],
      "optional": [
        "hooks"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "SetClipHooks",
    "display_name": "Set CLIP Hooks",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks/clip",
    "output_node": false,
    "experimental": true
  },
  "ConditioningTimestepsRange": {
    "input": {
      "required": {
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "TIMESTEPS_RANGE",
      "TIMESTEPS_RANGE",
      "TIMESTEPS_RANGE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "TIMESTEPS_RANGE",
      "BEFORE_RANGE",
      "AFTER_RANGE"
    ],
    "name": "ConditioningTimestepsRange",
    "display_name": "Timesteps Range",
    "description": "",
    "python_module": "comfy_extras.nodes_hooks",
    "category": "advanced/hooks",
    "output_node": false,
    "experimental": true
  },
  "Load3D": {
    "input": {
      "required": {
        "model_file": [
          [],
          {
            "file_upload": true
          }
        ],
        "image": [
          "LOAD_3D",
          {}
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_file",
        "image",
        "width",
        "height"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "STRING",
      "IMAGE",
      "IMAGE",
      "LOAD3D_CAMERA"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "mesh_path",
      "normal",
      "lineart",
      "camera_info"
    ],
    "name": "Load3D",
    "display_name": "Load 3D",
    "description": "",
    "python_module": "comfy_extras.nodes_load_3d",
    "category": "3d",
    "output_node": false,
    "experimental": true
  },
  "Load3DAnimation": {
    "input": {
      "required": {
        "model_file": [
          [],
          {
            "file_upload": true
          }
        ],
        "image": [
          "LOAD_3D_ANIMATION",
          {}
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_file",
        "image",
        "width",
        "height"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "STRING",
      "IMAGE",
      "LOAD3D_CAMERA"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "mesh_path",
      "normal",
      "camera_info"
    ],
    "name": "Load3DAnimation",
    "display_name": "Load 3D - Animation",
    "description": "",
    "python_module": "comfy_extras.nodes_load_3d",
    "category": "3d",
    "output_node": false,
    "experimental": true
  },
  "Preview3D": {
    "input": {
      "required": {
        "model_file": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "camera_info": [
          "LOAD3D_CAMERA",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "model_file"
      ],
      "optional": [
        "camera_info"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Preview3D",
    "display_name": "Preview 3D",
    "description": "",
    "python_module": "comfy_extras.nodes_load_3d",
    "category": "3d",
    "output_node": true,
    "experimental": true
  },
  "Preview3DAnimation": {
    "input": {
      "required": {
        "model_file": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      },
      "optional": {
        "camera_info": [
          "LOAD3D_CAMERA",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "model_file"
      ],
      "optional": [
        "camera_info"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Preview3DAnimation",
    "display_name": "Preview 3D - Animation",
    "description": "",
    "python_module": "comfy_extras.nodes_load_3d",
    "category": "3d",
    "output_node": true,
    "experimental": true
  },
  "EmptyCosmosLatentVideo": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1280,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 704,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 121,
            "min": 1,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "length",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyCosmosLatentVideo",
    "display_name": "EmptyCosmosLatentVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_cosmos",
    "category": "latent/video",
    "output_node": false
  },
  "CosmosImageToVideoLatent": {
    "input": {
      "required": {
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 1280,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 704,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 121,
            "min": 1,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      },
      "optional": {
        "start_image": [
          "IMAGE"
        ],
        "end_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "vae",
        "width",
        "height",
        "length",
        "batch_size"
      ],
      "optional": [
        "start_image",
        "end_image"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "CosmosImageToVideoLatent",
    "display_name": "CosmosImageToVideoLatent",
    "description": "",
    "python_module": "comfy_extras.nodes_cosmos",
    "category": "conditioning/inpaint",
    "output_node": false
  },
  "SaveWEBM": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "codec": [
          [
            "vp9",
            "av1"
          ]
        ],
        "fps": [
          "FLOAT",
          {
            "default": 24.0,
            "min": 0.01,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "crf": [
          "FLOAT",
          {
            "default": 32.0,
            "min": 0,
            "max": 63.0,
            "step": 1,
            "tooltip": "Higher crf means lower quality with a smaller file size, lower crf means higher quality higher filesize."
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "codec",
        "fps",
        "crf"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveWEBM",
    "display_name": "SaveWEBM",
    "description": "",
    "python_module": "comfy_extras.nodes_video",
    "category": "image/video",
    "output_node": true,
    "experimental": true
  },
  "CLIPTextEncodeLumina2": {
    "input": {
      "required": {
        "system_prompt": [
          [
            "superior",
            "alignment"
          ],
          {
            "tooltip": "Lumina2 provide two types of system prompts:Superior: You are an assistant designed to generate superior images with the superior degree of image-text alignment based on textual prompts or user prompts. Alignment: You are an assistant designed to generate high-quality images with the highest degree of image-text alignment based on textual prompts."
          }
        ],
        "user_prompt": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "tooltip": "The text to be encoded."
          }
        ],
        "clip": [
          "CLIP",
          {
            "tooltip": "The CLIP model used for encoding the text."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "system_prompt",
        "user_prompt",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeLumina2",
    "display_name": "CLIP Text Encode for Lumina2",
    "description": "Encodes a system prompt and a user prompt using a CLIP model into an embedding that can be used to guide the diffusion model towards generating specific images.",
    "python_module": "comfy_extras.nodes_lumina2",
    "category": "conditioning",
    "output_node": false,
    "output_tooltips": [
      "A conditioning containing the embedded text used to guide the diffusion model."
    ]
  },
  "RenormCFG": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "cfg_trunc": [
          "FLOAT",
          {
            "default": 100,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "renorm_cfg": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "cfg_trunc",
        "renorm_cfg"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "RenormCFG",
    "display_name": "RenormCFG",
    "description": "",
    "python_module": "comfy_extras.nodes_lumina2",
    "category": "advanced/model",
    "output_node": false
  },
  "WanImageToVideo": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 832,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      },
      "optional": {
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "start_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "width",
        "height",
        "length",
        "batch_size"
      ],
      "optional": [
        "clip_vision_output",
        "start_image"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "WanImageToVideo",
    "display_name": "WanImageToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_wan",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "WanFunControlToVideo": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 832,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      },
      "optional": {
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "start_image": [
          "IMAGE"
        ],
        "control_video": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "width",
        "height",
        "length",
        "batch_size"
      ],
      "optional": [
        "clip_vision_output",
        "start_image",
        "control_video"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "WanFunControlToVideo",
    "display_name": "WanFunControlToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_wan",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "WanFunInpaintToVideo": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 832,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      },
      "optional": {
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "start_image": [
          "IMAGE"
        ],
        "end_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "width",
        "height",
        "length",
        "batch_size"
      ],
      "optional": [
        "clip_vision_output",
        "start_image",
        "end_image"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "WanFunInpaintToVideo",
    "display_name": "WanFunInpaintToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_wan",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "WanFirstLastFrameToVideo": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 832,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      },
      "optional": {
        "clip_vision_start_image": [
          "CLIP_VISION_OUTPUT"
        ],
        "clip_vision_end_image": [
          "CLIP_VISION_OUTPUT"
        ],
        "start_image": [
          "IMAGE"
        ],
        "end_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "width",
        "height",
        "length",
        "batch_size"
      ],
      "optional": [
        "clip_vision_start_image",
        "clip_vision_end_image",
        "start_image",
        "end_image"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "WanFirstLastFrameToVideo",
    "display_name": "WanFirstLastFrameToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_wan",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "WanVaceToVideo": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 832,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 16,
            "max": 16384,
            "step": 16
          }
        ],
        "length": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 16384,
            "step": 4
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "control_video": [
          "IMAGE"
        ],
        "control_masks": [
          "MASK"
        ],
        "reference_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "width",
        "height",
        "length",
        "batch_size",
        "strength"
      ],
      "optional": [
        "control_video",
        "control_masks",
        "reference_image"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent",
      "trim_latent"
    ],
    "name": "WanVaceToVideo",
    "display_name": "WanVaceToVideo",
    "description": "",
    "python_module": "comfy_extras.nodes_wan",
    "category": "conditioning/video_models",
    "output_node": false,
    "experimental": true
  },
  "TrimVideoLatent": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "trim_amount": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 99999
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "trim_amount"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "TrimVideoLatent",
    "display_name": "TrimVideoLatent",
    "description": "",
    "python_module": "comfy_extras.nodes_wan",
    "category": "latent/video",
    "output_node": false,
    "experimental": true
  },
  "LotusConditioning": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "conditioning"
    ],
    "name": "LotusConditioning",
    "display_name": "LotusConditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_lotus",
    "category": "conditioning/lotus",
    "output_node": false
  },
  "EmptyLatentHunyuan3Dv2": {
    "input": {
      "required": {
        "resolution": [
          "INT",
          {
            "default": 3072,
            "min": 1,
            "max": 8192
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "resolution",
        "batch_size"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "EmptyLatentHunyuan3Dv2",
    "display_name": "EmptyLatentHunyuan3Dv2",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan3d",
    "category": "latent/3d",
    "output_node": false
  },
  "Hunyuan3Dv2Conditioning": {
    "input": {
      "required": {
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision_output"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "Hunyuan3Dv2Conditioning",
    "display_name": "Hunyuan3Dv2Conditioning",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan3d",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "Hunyuan3Dv2ConditioningMultiView": {
    "input": {
      "required": {},
      "optional": {
        "front": [
          "CLIP_VISION_OUTPUT"
        ],
        "left": [
          "CLIP_VISION_OUTPUT"
        ],
        "back": [
          "CLIP_VISION_OUTPUT"
        ],
        "right": [
          "CLIP_VISION_OUTPUT"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "front",
        "left",
        "back",
        "right"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "Hunyuan3Dv2ConditioningMultiView",
    "display_name": "Hunyuan3Dv2ConditioningMultiView",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan3d",
    "category": "conditioning/video_models",
    "output_node": false
  },
  "VAEDecodeHunyuan3D": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "num_chunks": [
          "INT",
          {
            "default": 8000,
            "min": 1000,
            "max": 500000
          }
        ],
        "octree_resolution": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 512
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae",
        "num_chunks",
        "octree_resolution"
      ]
    },
    "output": [
      "VOXEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "VOXEL"
    ],
    "name": "VAEDecodeHunyuan3D",
    "display_name": "VAEDecodeHunyuan3D",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan3d",
    "category": "latent/3d",
    "output_node": false
  },
  "VoxelToMeshBasic": {
    "input": {
      "required": {
        "voxel": [
          "VOXEL"
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.6,
            "min": -1.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "voxel",
        "threshold"
      ]
    },
    "output": [
      "MESH"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MESH"
    ],
    "name": "VoxelToMeshBasic",
    "display_name": "VoxelToMeshBasic",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan3d",
    "category": "3d",
    "output_node": false
  },
  "VoxelToMesh": {
    "input": {
      "required": {
        "voxel": [
          "VOXEL"
        ],
        "algorithm": [
          [
            "surface net",
            "basic"
          ]
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.6,
            "min": -1.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "voxel",
        "algorithm",
        "threshold"
      ]
    },
    "output": [
      "MESH"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MESH"
    ],
    "name": "VoxelToMesh",
    "display_name": "VoxelToMesh",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan3d",
    "category": "3d",
    "output_node": false
  },
  "SaveGLB": {
    "input": {
      "required": {
        "mesh": [
          "MESH"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "mesh/ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "mesh",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveGLB",
    "display_name": "SaveGLB",
    "description": "",
    "python_module": "comfy_extras.nodes_hunyuan3d",
    "category": "3d",
    "output_node": true
  },
  "PrimitiveString": {
    "input": {
      "required": {
        "value": [
          "STRING",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "PrimitiveString",
    "display_name": "String",
    "description": "",
    "python_module": "comfy_extras.nodes_primitive",
    "category": "utils/primitive",
    "output_node": false
  },
  "PrimitiveInt": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "min": -9223372036854775807,
            "max": 9223372036854775807,
            "control_after_generate": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "PrimitiveInt",
    "display_name": "Int",
    "description": "",
    "python_module": "comfy_extras.nodes_primitive",
    "category": "utils/primitive",
    "output_node": false
  },
  "PrimitiveFloat": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "min": -9223372036854775807,
            "max": 9223372036854775807
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "PrimitiveFloat",
    "display_name": "Float",
    "description": "",
    "python_module": "comfy_extras.nodes_primitive",
    "category": "utils/primitive",
    "output_node": false
  },
  "PrimitiveBoolean": {
    "input": {
      "required": {
        "value": [
          "BOOLEAN",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "PrimitiveBoolean",
    "display_name": "Boolean",
    "description": "",
    "python_module": "comfy_extras.nodes_primitive",
    "category": "utils/primitive",
    "output_node": false
  },
  "CFGZeroStar": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "patched_model"
    ],
    "name": "CFGZeroStar",
    "display_name": "CFGZeroStar",
    "description": "",
    "python_module": "comfy_extras.nodes_cfg",
    "category": "advanced/guidance",
    "output_node": false
  },
  "OptimalStepsScheduler": {
    "input": {
      "required": {
        "model_type": [
          [
            "FLUX",
            "Wan"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 3,
            "max": 1000
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_type",
        "steps",
        "denoise"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "OptimalStepsScheduler",
    "display_name": "OptimalStepsScheduler",
    "description": "",
    "python_module": "comfy_extras.nodes_optimalsteps",
    "category": "sampling/custom_sampling/schedulers",
    "output_node": false
  },
  "QuadrupleCLIPLoader": {
    "input": {
      "required": {
        "clip_name1": [
          [
            "clip_l.safetensors",
            "open-clip-xlm-roberta-large-vit-huge-14_visual_fp32.safetensors",
            "t5xxl_fp16.safetensors",
            "umt5-xxl-enc-bf16.safetensors",
            "umt5_xxl_fp16.safetensors",
            "umt5_xxl_fp8_e4m3fn_scaled.safetensors"
          ]
        ],
        "clip_name2": [
          [
            "clip_l.safetensors",
            "open-clip-xlm-roberta-large-vit-huge-14_visual_fp32.safetensors",
            "t5xxl_fp16.safetensors",
            "umt5-xxl-enc-bf16.safetensors",
            "umt5_xxl_fp16.safetensors",
            "umt5_xxl_fp8_e4m3fn_scaled.safetensors"
          ]
        ],
        "clip_name3": [
          [
            "clip_l.safetensors",
            "open-clip-xlm-roberta-large-vit-huge-14_visual_fp32.safetensors",
            "t5xxl_fp16.safetensors",
            "umt5-xxl-enc-bf16.safetensors",
            "umt5_xxl_fp16.safetensors",
            "umt5_xxl_fp8_e4m3fn_scaled.safetensors"
          ]
        ],
        "clip_name4": [
          [
            "clip_l.safetensors",
            "open-clip-xlm-roberta-large-vit-huge-14_visual_fp32.safetensors",
            "t5xxl_fp16.safetensors",
            "umt5-xxl-enc-bf16.safetensors",
            "umt5_xxl_fp16.safetensors",
            "umt5_xxl_fp8_e4m3fn_scaled.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_name1",
        "clip_name2",
        "clip_name3",
        "clip_name4"
      ]
    },
    "output": [
      "CLIP"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP"
    ],
    "name": "QuadrupleCLIPLoader",
    "display_name": "QuadrupleCLIPLoader",
    "description": "[Recipes]\n\nhidream: long clip-l, long clip-g, t5xxl, llama_8b_3.1_instruct",
    "python_module": "comfy_extras.nodes_hidream",
    "category": "advanced/loaders",
    "output_node": false
  },
  "CLIPTextEncodeHiDream": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "clip_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "clip_g": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "t5xxl": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "llama": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "clip_l",
        "clip_g",
        "t5xxl",
        "llama"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeHiDream",
    "display_name": "CLIPTextEncodeHiDream",
    "description": "",
    "python_module": "comfy_extras.nodes_hidream",
    "category": "advanced/conditioning",
    "output_node": false
  },
  "FreSca": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "scale_low": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 10,
            "step": 0.01,
            "tooltip": "Scaling factor for low-frequency components"
          }
        ],
        "scale_high": [
          "FLOAT",
          {
            "default": 1.25,
            "min": 0,
            "max": 10,
            "step": 0.01,
            "tooltip": "Scaling factor for high-frequency components"
          }
        ],
        "freq_cutoff": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "step": 1,
            "tooltip": "Number of frequency indices around center to consider as low-frequency"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "scale_low",
        "scale_high",
        "freq_cutoff"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "FreSca",
    "display_name": "FreSca",
    "description": "Applies frequency-dependent scaling to the guidance",
    "python_module": "comfy_extras.nodes_fresca",
    "category": "_for_testing",
    "output_node": false
  },
  "OpenAIDalle2": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Text prompt for DALL\u00b7E"
          }
        ]
      },
      "optional": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 2147483647,
            "step": 1,
            "display": "number",
            "tooltip": "not implemented yet in backend"
          }
        ],
        "size": [
          "COMBO",
          {
            "options": [
              "256x256",
              "512x512",
              "1024x1024"
            ],
            "default": "1024x1024",
            "tooltip": "Image size"
          }
        ],
        "n": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 8,
            "step": 1,
            "display": "number",
            "tooltip": "How many images to generate"
          }
        ],
        "image": [
          "IMAGE",
          {
            "default": null,
            "tooltip": "Optional reference image for image editing."
          }
        ],
        "mask": [
          "MASK",
          {
            "default": null,
            "tooltip": "Optional mask for inpainting (white areas will be replaced)"
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG"
      }
    },
    "input_order": {
      "required": [
        "prompt"
      ],
      "optional": [
        "seed",
        "size",
        "n",
        "image",
        "mask"
      ],
      "hidden": [
        "auth_token"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "OpenAIDalle2",
    "display_name": "OpenAI DALL\u00b7E 2",
    "description": "Generates images synchronously via OpenAI's DALL\u00b7E 2 endpoint.\n\nUses the proxy at /proxy/openai/images/generations. Returned URLs are short\u2011lived,\nso download or cache results if you need to keep them.",
    "python_module": "comfy_api_nodes.nodes_api",
    "category": "api node",
    "output_node": false,
    "api_node": true
  },
  "OpenAIDalle3": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Text prompt for DALL\u00b7E"
          }
        ]
      },
      "optional": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 2147483647,
            "step": 1,
            "display": "number",
            "tooltip": "not implemented yet in backend"
          }
        ],
        "quality": [
          "COMBO",
          {
            "options": [
              "standard",
              "hd"
            ],
            "default": "standard",
            "tooltip": "Image quality"
          }
        ],
        "style": [
          "COMBO",
          {
            "options": [
              "natural",
              "vivid"
            ],
            "default": "natural",
            "tooltip": "Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images."
          }
        ],
        "size": [
          "COMBO",
          {
            "options": [
              "1024x1024",
              "1024x1792",
              "1792x1024"
            ],
            "default": "1024x1024",
            "tooltip": "Image size"
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG"
      }
    },
    "input_order": {
      "required": [
        "prompt"
      ],
      "optional": [
        "seed",
        "quality",
        "style",
        "size"
      ],
      "hidden": [
        "auth_token"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "OpenAIDalle3",
    "display_name": "OpenAI DALL\u00b7E 3",
    "description": "Generates images synchronously via OpenAI's DALL\u00b7E 3 endpoint.\n\nUses the proxy at /proxy/openai/images/generations. Returned URLs are short\u2011lived,\nso download or cache results if you need to keep them.",
    "python_module": "comfy_api_nodes.nodes_api",
    "category": "api node",
    "output_node": false,
    "api_node": true
  },
  "OpenAIGPTImage1": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "tooltip": "Text prompt for GPT Image 1"
          }
        ]
      },
      "optional": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 2147483647,
            "step": 1,
            "display": "number",
            "tooltip": "not implemented yet in backend"
          }
        ],
        "quality": [
          "COMBO",
          {
            "options": [
              "low",
              "medium",
              "high"
            ],
            "default": "low",
            "tooltip": "Image quality, affects cost and generation time."
          }
        ],
        "background": [
          "COMBO",
          {
            "options": [
              "opaque",
              "transparent"
            ],
            "default": "opaque",
            "tooltip": "Return image with or without background"
          }
        ],
        "size": [
          "COMBO",
          {
            "options": [
              "auto",
              "1024x1024",
              "1024x1536",
              "1536x1024"
            ],
            "default": "auto",
            "tooltip": "Image size"
          }
        ],
        "n": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 8,
            "step": 1,
            "display": "number",
            "tooltip": "How many images to generate"
          }
        ],
        "image": [
          "IMAGE",
          {
            "default": null,
            "tooltip": "Optional reference image for image editing."
          }
        ],
        "mask": [
          "MASK",
          {
            "default": null,
            "tooltip": "Optional mask for inpainting (white areas will be replaced)"
          }
        ]
      },
      "hidden": {
        "auth_token": "AUTH_TOKEN_COMFY_ORG"
      }
    },
    "input_order": {
      "required": [
        "prompt"
      ],
      "optional": [
        "seed",
        "quality",
        "background",
        "size",
        "n",
        "image",
        "mask"
      ],
      "hidden": [
        "auth_token"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "OpenAIGPTImage1",
    "display_name": "OpenAI GPT Image 1",
    "description": "Generates images synchronously via OpenAI's GPT Image 1 endpoint.\n\nUses the proxy at /proxy/openai/images/generations. Returned URLs are short\u2011lived,\nso download or cache results if you need to keep them.",
    "python_module": "comfy_api_nodes.nodes_api",
    "category": "api node",
    "output_node": false,
    "api_node": true
  },
  "Checkpoint Loader w/Name (WLSH)": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "modelname"
    ],
    "name": "Checkpoint Loader w/Name (WLSH)",
    "display_name": "Checkpoint Loader w/Name (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/loaders",
    "output_node": false
  },
  "KSamplerAdvanced (WLSH)": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "add_noise": [
          [
            "enable",
            "disable"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "start_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "end_at_step": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000
          }
        ],
        "return_with_leftover_noise": [
          [
            "disable",
            "enable"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "add_noise",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "start_at_step",
        "end_at_step",
        "return_with_leftover_noise",
        "denoise"
      ]
    },
    "output": [
      "LATENT",
      "INFO"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "INFO"
    ],
    "name": "KSamplerAdvanced (WLSH)",
    "display_name": "KSamplerAdvanced (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/sampling",
    "output_node": false
  },
  "CLIP Positive-Negative (WLSH)": {
    "input": {
      "required": {
        "clip": [
          "CLIP"
        ],
        "positive_text": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "negative_text": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip",
        "positive_text",
        "negative_text"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "CLIP Positive-Negative (WLSH)",
    "display_name": "CLIP Positive-Negative (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/conditioning",
    "output_node": false
  },
  "CLIP Positive-Negative w/Text (WLSH)": {
    "input": {
      "required": {
        "positive": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "positive_text",
      "negative_text"
    ],
    "name": "CLIP Positive-Negative w/Text (WLSH)",
    "display_name": "CLIP Positive-Negative w/Text (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/conditioning",
    "output_node": false
  },
  "CLIP Positive-Negative XL (WLSH)": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 8192
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 8192
          }
        ],
        "crop_w": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192
          }
        ],
        "crop_h": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192
          }
        ],
        "target_width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 8192
          }
        ],
        "target_height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 8192
          }
        ],
        "positive_g": [
          "STRING",
          {
            "multiline": true,
            "default": "POS_G"
          }
        ],
        "positive_l": [
          "STRING",
          {
            "multiline": true,
            "default": "POS_L"
          }
        ],
        "negative_g": [
          "STRING",
          {
            "multiline": true,
            "default": "NEG_G"
          }
        ],
        "negative_l": [
          "STRING",
          {
            "multiline": true,
            "default": "NEG_L"
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "crop_w",
        "crop_h",
        "target_width",
        "target_height",
        "positive_g",
        "positive_l",
        "negative_g",
        "negative_l",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "CLIP Positive-Negative XL (WLSH)",
    "display_name": "CLIP Positive-Negative XL (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/conditioning",
    "output_node": false
  },
  "CLIP Positive-Negative XL w/Text (WLSH)": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 8192
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 8192
          }
        ],
        "crop_w": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192
          }
        ],
        "crop_h": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192
          }
        ],
        "target_width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 8192
          }
        ],
        "target_height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 8192
          }
        ],
        "positive_g": [
          "STRING",
          {
            "multiline": true,
            "default": "POS_G"
          }
        ],
        "positive_l": [
          "STRING",
          {
            "multiline": true,
            "default": "POS_L"
          }
        ],
        "negative_g": [
          "STRING",
          {
            "multiline": true,
            "default": "NEG_G"
          }
        ],
        "negative_l": [
          "STRING",
          {
            "multiline": true,
            "default": "NEG_L"
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "crop_w",
        "crop_h",
        "target_width",
        "target_height",
        "positive_g",
        "positive_l",
        "negative_g",
        "negative_l",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "positive_text",
      "negative_text"
    ],
    "name": "CLIP Positive-Negative XL w/Text (WLSH)",
    "display_name": "CLIP Positive-Negative XL w/Text (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/conditioning",
    "output_node": false
  },
  "CLIP +/- w/Text Unified (WLSH)": {
    "input": {
      "required": {
        "positive": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "negative": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "clip": [
          "CLIP"
        ],
        "conditioner": [
          [
            "SD1.5",
            "SDXL"
          ]
        ]
      },
      "optional": {
        "width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 8192
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 8192
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "clip",
        "conditioner"
      ],
      "optional": [
        "width",
        "height"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "positive_text",
      "negative_text"
    ],
    "name": "CLIP +/- w/Text Unified (WLSH)",
    "display_name": "CLIP +/- w/Text Unified (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/conditioning",
    "output_node": false
  },
  "Empty Latent by Pixels (WLSH)": {
    "input": {
      "required": {
        "aspect": [
          [
            "1:1",
            "5:4",
            "4:3",
            "3:2",
            "16:10",
            "16:9",
            "19:9",
            "21:9",
            "43:18",
            "2:1",
            "3:1",
            "4:1"
          ]
        ],
        "direction": [
          [
            "landscape",
            "portrait"
          ]
        ],
        "megapixels": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 16.0,
            "step": 0.01
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "aspect",
        "direction",
        "megapixels",
        "batch_size"
      ]
    },
    "output": [
      "LATENT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "latent",
      "width",
      "height"
    ],
    "name": "Empty Latent by Pixels (WLSH)",
    "display_name": "Empty Latent by Pixels (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/latent",
    "output_node": false
  },
  "Empty Latent by Ratio (WLSH)": {
    "input": {
      "required": {
        "aspect": [
          [
            "1:1",
            "6:5",
            "5:4",
            "4:3",
            "3:2",
            "16:10",
            "16:9",
            "19:9",
            "21:9",
            "43:18",
            "2:1",
            "3:1",
            "4:1"
          ]
        ],
        "direction": [
          [
            "landscape",
            "portrait"
          ]
        ],
        "shortside": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 64
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "aspect",
        "direction",
        "shortside",
        "batch_size"
      ]
    },
    "output": [
      "LATENT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "latent",
      "width",
      "height"
    ],
    "name": "Empty Latent by Ratio (WLSH)",
    "display_name": "Empty Latent by Ratio (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/latent",
    "output_node": false
  },
  "Empty Latent by Size (WLSH)": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 8192,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 8192,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "batch_size"
      ]
    },
    "output": [
      "LATENT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "latent",
      "width",
      "height"
    ],
    "name": "Empty Latent by Size (WLSH)",
    "display_name": "Empty Latent by Size (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/latent",
    "output_node": false
  },
  "SDXL Quick Empty Latent (WLSH)": {
    "input": {
      "required": {
        "resolution": [
          [
            "1024x1024|1:1",
            "1152x896|9:7",
            "1216x832|19:13",
            "1344x768|7:4",
            "1536x640|12:5"
          ]
        ],
        "direction": [
          [
            "landscape",
            "portrait"
          ]
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "resolution",
        "direction",
        "batch_size"
      ]
    },
    "output": [
      "LATENT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "latent",
      "width",
      "height"
    ],
    "name": "SDXL Quick Empty Latent (WLSH)",
    "display_name": "SDXL Quick Empty Latent (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/latent",
    "output_node": false
  },
  "Image Load with Metadata (WLSH)": {
    "input": {
      "required": {
        "verbose": [
          [
            "true",
            "false"
          ]
        ],
        "image": [
          [
            "1.mp4",
            "1743139954017_TDV72HWXg9.jpeg",
            "1743586696790_gZJJX9pmlv.jpeg",
            "2.jpeg",
            "2.mp4",
            "3.jpeg",
            "3.mp4",
            "4.jpeg",
            "4.mp4",
            "5.mp4",
            "5.png",
            "6.jpeg",
            "6.mp4",
            "WanI2V_Result_00016.mp4",
            "WanI2V_Result_00036.mp4",
            "WanI2V_Result_00056.mp4",
            "bird_input_1.png",
            "example.png",
            "finalVideo_v42_2025-04-03.mp4",
            "pass_2_upscaled_00001_ (1).png",
            "pass_2_upscaled_00001_.png"
          ],
          {
            "image_upload": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "verbose",
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "STRING",
      "STRING",
      "INT",
      "INT",
      "FLOAT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "positive",
      "negative",
      "seed",
      "steps",
      "cfg",
      "width",
      "height"
    ],
    "name": "Image Load with Metadata (WLSH)",
    "display_name": "Image Load with Metadata (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/image",
    "output_node": false
  },
  "Grayscale Image (WLSH)": {
    "input": {
      "required": {
        "original": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "original"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "grayscale"
    ],
    "name": "Grayscale Image (WLSH)",
    "display_name": "Grayscale Image (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/image",
    "output_node": false
  },
  "Generate Border Mask (WLSH)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "direction": [
          [
            "left",
            "right",
            "up",
            "down"
          ]
        ],
        "pixels": [
          "INT",
          {
            "default": 128,
            "min": 32,
            "max": 512,
            "step": 32
          }
        ],
        "overlap": [
          "INT",
          {
            "default": 64,
            "min": 16,
            "max": 256,
            "step": 16
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "direction",
        "pixels",
        "overlap"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Generate Border Mask (WLSH)",
    "display_name": "Generate Border Mask (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/inpainting",
    "output_node": false
  },
  "Outpaint to Image (WLSH)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "direction": [
          [
            "left",
            "right",
            "up",
            "down"
          ]
        ],
        "pixels": [
          "INT",
          {
            "default": 128,
            "min": 32,
            "max": 512,
            "step": 32
          }
        ],
        "mask_padding": [
          "INT",
          {
            "default": 12,
            "min": 0,
            "max": 64,
            "step": 4
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "direction",
        "pixels",
        "mask_padding"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "Outpaint to Image (WLSH)",
    "display_name": "Outpaint to Image (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/inpainting",
    "output_node": false
  },
  "VAE Encode for Inpaint w/Padding (WLSH)": {
    "input": {
      "required": {
        "pixels": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "mask": [
          "MASK"
        ],
        "mask_padding": [
          "INT",
          {
            "default": 24,
            "min": 6,
            "max": 128,
            "step": 2
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pixels",
        "vae",
        "mask",
        "mask_padding"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "VAE Encode for Inpaint w/Padding (WLSH)",
    "display_name": "VAE Encode for Inpaint w/Padding (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/inpainting",
    "output_node": false
  },
  "Image Scale By Factor (WLSH)": {
    "input": {
      "required": {
        "original": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area"
          ]
        ],
        "factor": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.1,
            "max": 8.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "original",
        "upscale_method",
        "factor"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Scale By Factor (WLSH)",
    "display_name": "Image Scale By Factor (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/upscaling",
    "output_node": false
  },
  "Image Scale by Shortside (WLSH)": {
    "input": {
      "required": {
        "original": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area"
          ]
        ],
        "shortside": [
          "INT",
          {
            "default": 512,
            "min": 32,
            "max": 4096,
            "step": 32
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "original",
        "upscale_method",
        "shortside"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "width",
      "height"
    ],
    "name": "Image Scale by Shortside (WLSH)",
    "display_name": "Image Scale by Shortside (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/upscaling",
    "output_node": false
  },
  "SDXL Quick Image Scale (WLSH)": {
    "input": {
      "required": {
        "original": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area"
          ]
        ],
        "resolution": [
          [
            "1024x1024|1:1",
            "1152x896|9:7",
            "1216x832|19:13",
            "1344x768|7:4",
            "1536x640|12:5"
          ]
        ],
        "direction": [
          [
            "landscape",
            "portrait"
          ]
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "original",
        "upscale_method",
        "resolution",
        "direction",
        "crop"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "SDXL Quick Image Scale (WLSH)",
    "display_name": "SDXL Quick Image Scale (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/upscaling",
    "output_node": false
  },
  "Upscale by Factor with Model (WLSH)": {
    "input": {
      "required": {
        "upscale_model": [
          "UPSCALE_MODEL"
        ],
        "image": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area"
          ]
        ],
        "factor": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.1,
            "max": 8.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "upscale_model",
        "image",
        "upscale_method",
        "factor"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Upscale by Factor with Model (WLSH)",
    "display_name": "Upscale by Factor with Model (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/upscaling",
    "output_node": false
  },
  "Multiply Integer (WLSH)": {
    "input": {
      "required": {
        "number": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 10000,
            "forceInput": true
          }
        ],
        "multiplier": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "number",
        "multiplier"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "Multiply Integer (WLSH)",
    "display_name": "Multiply Integer (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/number",
    "output_node": false
  },
  "Quick Resolution Multiply (WLSH)": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 8192,
            "forceInput": true
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 8192,
            "forceInput": true
          }
        ],
        "multiplier": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "multiplier"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "width",
      "height"
    ],
    "name": "Quick Resolution Multiply (WLSH)",
    "display_name": "Quick Resolution Multiply (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/number",
    "output_node": false
  },
  "Resolutions by Ratio (WLSH)": {
    "input": {
      "required": {
        "aspect": [
          [
            "1:1",
            "6:5",
            "5:4",
            "4:3",
            "3:2",
            "16:10",
            "16:9",
            "21:9",
            "43:18",
            "2:1",
            "3:1",
            "4:1"
          ]
        ],
        "direction": [
          [
            "landscape",
            "portrait"
          ]
        ],
        "shortside": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "aspect",
        "direction",
        "shortside"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "width",
      "height"
    ],
    "name": "Resolutions by Ratio (WLSH)",
    "display_name": "Resolutions by Ratio (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/number",
    "output_node": false
  },
  "Seed to Number (WLSH)": {
    "input": {
      "required": {
        "seed": [
          "SEED"
        ]
      }
    },
    "input_order": {
      "required": [
        "seed"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "Seed to Number (WLSH)",
    "display_name": "Seed to Number (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/number",
    "output_node": false
  },
  "Seed and Int (WLSH)": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed"
      ]
    },
    "output": [
      "INT",
      "SEED"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "SEED"
    ],
    "name": "Seed and Int (WLSH)",
    "display_name": "Seed and Int (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/number",
    "output_node": false
  },
  "SDXL Steps (WLSH)": {
    "input": {
      "required": {
        "precondition": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 10000
          }
        ],
        "base": [
          "INT",
          {
            "default": 12,
            "min": 1,
            "max": 10000
          }
        ],
        "total": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "precondition",
        "base",
        "total"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "pre",
      "base",
      "total"
    ],
    "name": "SDXL Steps (WLSH)",
    "display_name": "SDXL Steps (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/number",
    "output_node": false
  },
  "SDXL Resolutions (WLSH)": {
    "input": {
      "required": {
        "resolution": [
          [
            "1024x1024|1:1",
            "1152x896|9:7",
            "1216x832|19:13",
            "1344x768|7:4",
            "1536x640|12:5"
          ]
        ],
        "direction": [
          [
            "landscape",
            "portrait"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "resolution",
        "direction"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "width",
      "height"
    ],
    "name": "SDXL Resolutions (WLSH)",
    "display_name": "SDXL Resolutions (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/number",
    "output_node": false
  },
  "Build Filename String (WLSH)": {
    "input": {
      "required": {
        "filename": [
          "STRING",
          {
            "%time_%seed": "info",
            "multiline": false
          }
        ]
      },
      "optional": {
        "modelname": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "counter": [
          "SEED",
          {
            "default": 0
          }
        ],
        "time_format": [
          "STRING",
          {
            "default": "%Y-%m-%d-%H%M%S",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "filename"
      ],
      "optional": [
        "modelname",
        "seed",
        "counter",
        "time_format"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "filename"
    ],
    "name": "Build Filename String (WLSH)",
    "display_name": "Build Filename String (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/text",
    "output_node": false
  },
  "Time String (WLSH)": {
    "input": {
      "required": {
        "style": [
          [
            "%Y%m%d%H%M%S",
            "%Y%m%d%H%M",
            "%Y%m%d",
            "%Y-%m-%d-%H%M%S",
            "%Y-%m-%d-%H%M",
            "%Y-%m-%d"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "style"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "time_format"
    ],
    "name": "Time String (WLSH)",
    "display_name": "Time String (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/text",
    "output_node": false
  },
  "Simple Pattern Replace (WLSH)": {
    "input": {
      "required": {
        "input_string": [
          "STRING",
          {
            "multiline": true,
            "forceInput": true
          }
        ],
        "list_string": [
          "STRING",
          {
            "default": ""
          }
        ],
        "pattern": [
          "STRING",
          {
            "default": "$var"
          }
        ],
        "delimiter": [
          "STRING",
          {
            "default": ","
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_string",
        "list_string",
        "pattern",
        "delimiter",
        "seed"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "string"
    ],
    "name": "Simple Pattern Replace (WLSH)",
    "display_name": "Simple Pattern Replace (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/text",
    "output_node": false
  },
  "Simple String Combine (WLSH)": {
    "input": {
      "required": {
        "addition": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "placement": [
          [
            "after",
            "before"
          ]
        ],
        "separator": [
          [
            "comma",
            "space",
            "newline",
            "none"
          ]
        ]
      },
      "optional": {
        "input_string": [
          "STRING",
          {
            "multiline": true,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "addition",
        "placement",
        "separator"
      ],
      "optional": [
        "input_string"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "combined"
    ],
    "name": "Simple String Combine (WLSH)",
    "display_name": "Simple String Combine (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/text",
    "output_node": false
  },
  "Prompt Weight (WLSH)": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "forceInput": true
          }
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 5.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "weight"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "prompt"
    ],
    "name": "Prompt Weight (WLSH)",
    "display_name": "Prompt Weight (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/text",
    "output_node": false
  },
  "Image Save with Prompt (WLSH)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename": [
          "STRING",
          {
            "default": "%time_%seed",
            "multiline": false
          }
        ],
        "path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "extension": [
          [
            "png",
            "jpeg",
            "tiff",
            "gif"
          ]
        ],
        "quality": [
          "INT",
          {
            "default": 100,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ]
      },
      "optional": {
        "positive": [
          "STRING",
          {
            "multiline": true,
            "forceInput": true
          }
        ],
        "negative": [
          "STRING",
          {
            "multiline": true,
            "forceInput": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "forceInput": true
          }
        ],
        "modelname": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "forceInput": true
          }
        ],
        "counter": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "time_format": [
          "STRING",
          {
            "default": "%Y-%m-%d-%H%M%S",
            "multiline": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename",
        "path",
        "extension",
        "quality"
      ],
      "optional": [
        "positive",
        "negative",
        "seed",
        "modelname",
        "counter",
        "time_format"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Image Save with Prompt (WLSH)",
    "display_name": "Image Save with Prompt (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/IO",
    "output_node": true
  },
  "Image Save with Prompt/Info (WLSH)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename": [
          "STRING",
          {
            "default": "%time_%seed",
            "multiline": false
          }
        ],
        "path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "extension": [
          [
            "png",
            "jpeg",
            "tiff",
            "gif"
          ]
        ],
        "quality": [
          "INT",
          {
            "default": 100,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ]
      },
      "optional": {
        "positive": [
          "STRING",
          {
            "multiline": true,
            "forceInput": true
          }
        ],
        "negative": [
          "STRING",
          {
            "multiline": true,
            "forceInput": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "forceInput": true
          }
        ],
        "modelname": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "forceInput": true
          }
        ],
        "counter": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "time_format": [
          "STRING",
          {
            "default": "%Y-%m-%d-%H%M%S",
            "multiline": false
          }
        ],
        "info": [
          "INFO"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename",
        "path",
        "extension",
        "quality"
      ],
      "optional": [
        "positive",
        "negative",
        "seed",
        "modelname",
        "counter",
        "time_format",
        "info"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Image Save with Prompt/Info (WLSH)",
    "display_name": "Image Save with Prompt/Info (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/IO",
    "output_node": true
  },
  "Image Save with Prompt File (WLSH)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename": [
          "STRING",
          {
            "default": "%time_%seed",
            "multiline": false
          }
        ],
        "path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "extension": [
          [
            "png",
            "jpeg",
            "tiff",
            "gif"
          ]
        ],
        "quality": [
          "INT",
          {
            "default": 100,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ]
      },
      "optional": {
        "positive": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "forceInput": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "forceInput": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "forceInput": true
          }
        ],
        "modelname": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "forceInput": true
          }
        ],
        "counter": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "time_format": [
          "STRING",
          {
            "default": "%Y-%m-%d-%H%M%S",
            "multiline": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename",
        "path",
        "extension",
        "quality"
      ],
      "optional": [
        "positive",
        "negative",
        "seed",
        "modelname",
        "counter",
        "time_format"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Image Save with Prompt File (WLSH)",
    "display_name": "Image Save with Prompt File (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/IO",
    "output_node": true
  },
  "Image Save with Prompt/Info File (WLSH)": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename": [
          "STRING",
          {
            "default": "%time_%seed",
            "multiline": false
          }
        ],
        "path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "extension": [
          [
            "png",
            "jpeg",
            "tiff",
            "gif"
          ]
        ],
        "quality": [
          "INT",
          {
            "default": 100,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ]
      },
      "optional": {
        "positive": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "forceInput": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "forceInput": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "forceInput": true
          }
        ],
        "modelname": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "forceInput": true
          }
        ],
        "counter": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "time_format": [
          "STRING",
          {
            "default": "%Y-%m-%d-%H%M%S",
            "multiline": false
          }
        ],
        "info": [
          "INFO"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename",
        "path",
        "extension",
        "quality"
      ],
      "optional": [
        "positive",
        "negative",
        "seed",
        "modelname",
        "counter",
        "time_format",
        "info"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Image Save with Prompt/Info File (WLSH)",
    "display_name": "Image Save with Prompt/Info File (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/IO",
    "output_node": true
  },
  "Save Prompt (WLSH)": {
    "input": {
      "required": {
        "filename": [
          "STRING",
          {
            "default": "info",
            "multiline": false
          }
        ],
        "path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "forceInput": true
          }
        ]
      },
      "optional": {
        "negative": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "forceInput": true
          }
        ],
        "modelname": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "forceInput": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "forceInput": true
          }
        ],
        "counter": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "time_format": [
          "STRING",
          {
            "default": "%Y-%m-%d-%H%M%S",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "filename",
        "path",
        "positive"
      ],
      "optional": [
        "negative",
        "modelname",
        "seed",
        "counter",
        "time_format"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Save Prompt (WLSH)",
    "display_name": "Save Prompt (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/IO",
    "output_node": true
  },
  "Save Prompt/Info (WLSH)": {
    "input": {
      "required": {
        "filename": [
          "STRING",
          {
            "default": "info",
            "multiline": false
          }
        ],
        "path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "forceInput": true
          }
        ]
      },
      "optional": {
        "negative": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "forceInput": true
          }
        ],
        "modelname": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "forceInput": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "forceInput": true
          }
        ],
        "counter": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "time_format": [
          "STRING",
          {
            "default": "%Y-%m-%d-%H%M%S",
            "multiline": false
          }
        ],
        "info": [
          "INFO"
        ]
      }
    },
    "input_order": {
      "required": [
        "filename",
        "path",
        "positive"
      ],
      "optional": [
        "negative",
        "modelname",
        "seed",
        "counter",
        "time_format",
        "info"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Save Prompt/Info (WLSH)",
    "display_name": "Save Prompt/Info (WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/IO",
    "output_node": true
  },
  "Save Positive Prompt(WLSH)": {
    "input": {
      "required": {
        "filename": [
          "STRING",
          {
            "default": "info",
            "multiline": false
          }
        ],
        "path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "filename",
        "path",
        "positive"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Save Positive Prompt(WLSH)",
    "display_name": "Save Positive Prompt(WLSH)",
    "description": "",
    "python_module": "custom_nodes.wlsh_nodes",
    "category": "WLSH Nodes/IO",
    "output_node": true
  },
  "UltralyticsDetectorProvider": {
    "input": {
      "required": {
        "model_name": [
          [
            "bbox/face_yolov8m.pt",
            "bbox/hand_yolov8s.pt",
            "segm/person_yolov8m-seg.pt"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name"
      ]
    },
    "output": [
      "BBOX_DETECTOR",
      "SEGM_DETECTOR"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "BBOX_DETECTOR",
      "SEGM_DETECTOR"
    ],
    "name": "UltralyticsDetectorProvider",
    "display_name": "UltralyticsDetectorProvider",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-subpack",
    "category": "ImpactPack",
    "output_node": false
  },
  "KSampler (Efficient)": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 7.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "preview_method": [
          [
            "auto",
            "latent2rgb",
            "taesd",
            "vae_decoded_only",
            "none"
          ]
        ],
        "vae_decode": [
          [
            "true",
            "true (tiled)",
            "false"
          ]
        ]
      },
      "optional": {
        "optional_vae": [
          "VAE"
        ],
        "script": [
          "SCRIPT"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "model",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "denoise",
        "preview_method",
        "vae_decode"
      ],
      "optional": [
        "optional_vae",
        "script"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CONDITIONING+",
      "CONDITIONING-",
      "LATENT",
      "VAE",
      "IMAGE"
    ],
    "name": "KSampler (Efficient)",
    "display_name": "KSampler (Efficient)",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Sampling",
    "output_node": true
  },
  "KSampler Adv. (Efficient)": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "add_noise": [
          [
            "enable",
            "disable"
          ]
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 7.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "start_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "end_at_step": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000
          }
        ],
        "return_with_leftover_noise": [
          [
            "disable",
            "enable"
          ]
        ],
        "preview_method": [
          [
            "auto",
            "latent2rgb",
            "taesd",
            "none"
          ]
        ],
        "vae_decode": [
          [
            "true",
            "true (tiled)",
            "false",
            "output only",
            "output only (tiled)"
          ]
        ]
      },
      "optional": {
        "optional_vae": [
          "VAE"
        ],
        "script": [
          "SCRIPT"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "model",
        "add_noise",
        "noise_seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "latent_image",
        "start_at_step",
        "end_at_step",
        "return_with_leftover_noise",
        "preview_method",
        "vae_decode"
      ],
      "optional": [
        "optional_vae",
        "script"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CONDITIONING+",
      "CONDITIONING-",
      "LATENT",
      "VAE",
      "IMAGE"
    ],
    "name": "KSampler Adv. (Efficient)",
    "display_name": "KSampler Adv. (Efficient)",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Sampling",
    "output_node": true
  },
  "KSampler SDXL (Eff.)": {
    "input": {
      "required": {
        "sdxl_tuple": [
          "SDXL_TUPLE"
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 7.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "latent_image": [
          "LATENT"
        ],
        "start_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "refine_at_step": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 10000
          }
        ],
        "preview_method": [
          [
            "auto",
            "latent2rgb",
            "taesd",
            "none"
          ]
        ],
        "vae_decode": [
          [
            "true",
            "true (tiled)",
            "false",
            "output only",
            "output only (tiled)"
          ]
        ]
      },
      "optional": {
        "optional_vae": [
          "VAE"
        ],
        "script": [
          "SCRIPT"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "sdxl_tuple",
        "noise_seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "latent_image",
        "start_at_step",
        "refine_at_step",
        "preview_method",
        "vae_decode"
      ],
      "optional": [
        "optional_vae",
        "script"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "SDXL_TUPLE",
      "LATENT",
      "VAE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "SDXL_TUPLE",
      "LATENT",
      "VAE",
      "IMAGE"
    ],
    "name": "KSampler SDXL (Eff.)",
    "display_name": "KSampler SDXL (Eff.)",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Sampling",
    "output_node": true
  },
  "Efficient Loader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "vae_name": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "clip_skip": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "lora_name": [
          [
            "None"
          ]
        ],
        "lora_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "CLIP_POSITIVE",
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "CLIP_NEGATIVE",
            "multiline": true
          }
        ],
        "token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "weight_interpretation": [
          [
            "comfy",
            "A1111",
            "compel",
            "comfy++",
            "down_weight"
          ]
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 262144
          }
        ]
      },
      "optional": {
        "lora_stack": [
          "LORA_STACK"
        ],
        "cnet_stack": [
          "CONTROL_NET_STACK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "vae_name",
        "clip_skip",
        "lora_name",
        "lora_model_strength",
        "lora_clip_strength",
        "positive",
        "negative",
        "token_normalization",
        "weight_interpretation",
        "empty_latent_width",
        "empty_latent_height",
        "batch_size"
      ],
      "optional": [
        "lora_stack",
        "cnet_stack"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "CLIP",
      "DEPENDENCIES"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CONDITIONING+",
      "CONDITIONING-",
      "LATENT",
      "VAE",
      "CLIP",
      "DEPENDENCIES"
    ],
    "name": "Efficient Loader",
    "display_name": "Efficient Loader",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Loaders",
    "output_node": false
  },
  "Eff. Loader SDXL": {
    "input": {
      "required": {
        "base_ckpt_name": [
          [
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "base_clip_skip": [
          "INT",
          {
            "default": -2,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "refiner_ckpt_name": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "refiner_clip_skip": [
          "INT",
          {
            "default": -2,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "positive_ascore": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "negative_ascore": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "vae_name": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "positive": [
          "STRING",
          {
            "default": "CLIP_POSITIVE",
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "CLIP_NEGATIVE",
            "multiline": true
          }
        ],
        "token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "weight_interpretation": [
          [
            "comfy",
            "A1111",
            "compel",
            "comfy++",
            "down_weight"
          ]
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      },
      "optional": {
        "lora_stack": [
          "LORA_STACK"
        ],
        "cnet_stack": [
          "CONTROL_NET_STACK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "base_ckpt_name",
        "base_clip_skip",
        "refiner_ckpt_name",
        "refiner_clip_skip",
        "positive_ascore",
        "negative_ascore",
        "vae_name",
        "positive",
        "negative",
        "token_normalization",
        "weight_interpretation",
        "empty_latent_width",
        "empty_latent_height",
        "batch_size"
      ],
      "optional": [
        "lora_stack",
        "cnet_stack"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "SDXL_TUPLE",
      "LATENT",
      "VAE",
      "DEPENDENCIES"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "SDXL_TUPLE",
      "LATENT",
      "VAE",
      "DEPENDENCIES"
    ],
    "name": "Eff. Loader SDXL",
    "display_name": "Eff. Loader SDXL",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Loaders",
    "output_node": false
  },
  "LoRA Stacker": {
    "input": {
      "required": {
        "input_mode": [
          [
            "simple",
            "advanced"
          ]
        ],
        "lora_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50,
            "step": 1
          }
        ],
        "lora_name_1": [
          [
            "None"
          ]
        ],
        "lora_wt_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_2": [
          [
            "None"
          ]
        ],
        "lora_wt_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_3": [
          [
            "None"
          ]
        ],
        "lora_wt_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_4": [
          [
            "None"
          ]
        ],
        "lora_wt_4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_5": [
          [
            "None"
          ]
        ],
        "lora_wt_5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_6": [
          [
            "None"
          ]
        ],
        "lora_wt_6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_7": [
          [
            "None"
          ]
        ],
        "lora_wt_7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_8": [
          [
            "None"
          ]
        ],
        "lora_wt_8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_9": [
          [
            "None"
          ]
        ],
        "lora_wt_9": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_9": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_9": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_10": [
          [
            "None"
          ]
        ],
        "lora_wt_10": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_10": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_10": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_11": [
          [
            "None"
          ]
        ],
        "lora_wt_11": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_11": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_11": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_12": [
          [
            "None"
          ]
        ],
        "lora_wt_12": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_12": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_12": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_13": [
          [
            "None"
          ]
        ],
        "lora_wt_13": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_13": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_13": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_14": [
          [
            "None"
          ]
        ],
        "lora_wt_14": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_14": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_14": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_15": [
          [
            "None"
          ]
        ],
        "lora_wt_15": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_15": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_15": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_16": [
          [
            "None"
          ]
        ],
        "lora_wt_16": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_16": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_16": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_17": [
          [
            "None"
          ]
        ],
        "lora_wt_17": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_17": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_17": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_18": [
          [
            "None"
          ]
        ],
        "lora_wt_18": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_18": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_18": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_19": [
          [
            "None"
          ]
        ],
        "lora_wt_19": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_19": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_19": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_20": [
          [
            "None"
          ]
        ],
        "lora_wt_20": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_20": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_20": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_21": [
          [
            "None"
          ]
        ],
        "lora_wt_21": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_21": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_21": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_22": [
          [
            "None"
          ]
        ],
        "lora_wt_22": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_22": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_22": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_23": [
          [
            "None"
          ]
        ],
        "lora_wt_23": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_23": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_23": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_24": [
          [
            "None"
          ]
        ],
        "lora_wt_24": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_24": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_24": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_25": [
          [
            "None"
          ]
        ],
        "lora_wt_25": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_25": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_25": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_26": [
          [
            "None"
          ]
        ],
        "lora_wt_26": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_26": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_26": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_27": [
          [
            "None"
          ]
        ],
        "lora_wt_27": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_27": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_27": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_28": [
          [
            "None"
          ]
        ],
        "lora_wt_28": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_28": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_28": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_29": [
          [
            "None"
          ]
        ],
        "lora_wt_29": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_29": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_29": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_30": [
          [
            "None"
          ]
        ],
        "lora_wt_30": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_30": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_30": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_31": [
          [
            "None"
          ]
        ],
        "lora_wt_31": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_31": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_31": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_32": [
          [
            "None"
          ]
        ],
        "lora_wt_32": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_32": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_32": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_33": [
          [
            "None"
          ]
        ],
        "lora_wt_33": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_33": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_33": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_34": [
          [
            "None"
          ]
        ],
        "lora_wt_34": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_34": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_34": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_35": [
          [
            "None"
          ]
        ],
        "lora_wt_35": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_35": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_35": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_36": [
          [
            "None"
          ]
        ],
        "lora_wt_36": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_36": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_36": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_37": [
          [
            "None"
          ]
        ],
        "lora_wt_37": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_37": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_37": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_38": [
          [
            "None"
          ]
        ],
        "lora_wt_38": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_38": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_38": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_39": [
          [
            "None"
          ]
        ],
        "lora_wt_39": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_39": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_39": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_40": [
          [
            "None"
          ]
        ],
        "lora_wt_40": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_40": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_40": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_41": [
          [
            "None"
          ]
        ],
        "lora_wt_41": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_41": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_41": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_42": [
          [
            "None"
          ]
        ],
        "lora_wt_42": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_42": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_42": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_43": [
          [
            "None"
          ]
        ],
        "lora_wt_43": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_43": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_43": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_44": [
          [
            "None"
          ]
        ],
        "lora_wt_44": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_44": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_44": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_45": [
          [
            "None"
          ]
        ],
        "lora_wt_45": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_45": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_45": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_46": [
          [
            "None"
          ]
        ],
        "lora_wt_46": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_46": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_46": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_47": [
          [
            "None"
          ]
        ],
        "lora_wt_47": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_47": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_47": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_48": [
          [
            "None"
          ]
        ],
        "lora_wt_48": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_48": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_48": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_49": [
          [
            "None"
          ]
        ],
        "lora_wt_49": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "model_str_49": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_49": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "lora_stack": [
          "LORA_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "input_mode",
        "lora_count",
        "lora_name_1",
        "lora_wt_1",
        "model_str_1",
        "clip_str_1",
        "lora_name_2",
        "lora_wt_2",
        "model_str_2",
        "clip_str_2",
        "lora_name_3",
        "lora_wt_3",
        "model_str_3",
        "clip_str_3",
        "lora_name_4",
        "lora_wt_4",
        "model_str_4",
        "clip_str_4",
        "lora_name_5",
        "lora_wt_5",
        "model_str_5",
        "clip_str_5",
        "lora_name_6",
        "lora_wt_6",
        "model_str_6",
        "clip_str_6",
        "lora_name_7",
        "lora_wt_7",
        "model_str_7",
        "clip_str_7",
        "lora_name_8",
        "lora_wt_8",
        "model_str_8",
        "clip_str_8",
        "lora_name_9",
        "lora_wt_9",
        "model_str_9",
        "clip_str_9",
        "lora_name_10",
        "lora_wt_10",
        "model_str_10",
        "clip_str_10",
        "lora_name_11",
        "lora_wt_11",
        "model_str_11",
        "clip_str_11",
        "lora_name_12",
        "lora_wt_12",
        "model_str_12",
        "clip_str_12",
        "lora_name_13",
        "lora_wt_13",
        "model_str_13",
        "clip_str_13",
        "lora_name_14",
        "lora_wt_14",
        "model_str_14",
        "clip_str_14",
        "lora_name_15",
        "lora_wt_15",
        "model_str_15",
        "clip_str_15",
        "lora_name_16",
        "lora_wt_16",
        "model_str_16",
        "clip_str_16",
        "lora_name_17",
        "lora_wt_17",
        "model_str_17",
        "clip_str_17",
        "lora_name_18",
        "lora_wt_18",
        "model_str_18",
        "clip_str_18",
        "lora_name_19",
        "lora_wt_19",
        "model_str_19",
        "clip_str_19",
        "lora_name_20",
        "lora_wt_20",
        "model_str_20",
        "clip_str_20",
        "lora_name_21",
        "lora_wt_21",
        "model_str_21",
        "clip_str_21",
        "lora_name_22",
        "lora_wt_22",
        "model_str_22",
        "clip_str_22",
        "lora_name_23",
        "lora_wt_23",
        "model_str_23",
        "clip_str_23",
        "lora_name_24",
        "lora_wt_24",
        "model_str_24",
        "clip_str_24",
        "lora_name_25",
        "lora_wt_25",
        "model_str_25",
        "clip_str_25",
        "lora_name_26",
        "lora_wt_26",
        "model_str_26",
        "clip_str_26",
        "lora_name_27",
        "lora_wt_27",
        "model_str_27",
        "clip_str_27",
        "lora_name_28",
        "lora_wt_28",
        "model_str_28",
        "clip_str_28",
        "lora_name_29",
        "lora_wt_29",
        "model_str_29",
        "clip_str_29",
        "lora_name_30",
        "lora_wt_30",
        "model_str_30",
        "clip_str_30",
        "lora_name_31",
        "lora_wt_31",
        "model_str_31",
        "clip_str_31",
        "lora_name_32",
        "lora_wt_32",
        "model_str_32",
        "clip_str_32",
        "lora_name_33",
        "lora_wt_33",
        "model_str_33",
        "clip_str_33",
        "lora_name_34",
        "lora_wt_34",
        "model_str_34",
        "clip_str_34",
        "lora_name_35",
        "lora_wt_35",
        "model_str_35",
        "clip_str_35",
        "lora_name_36",
        "lora_wt_36",
        "model_str_36",
        "clip_str_36",
        "lora_name_37",
        "lora_wt_37",
        "model_str_37",
        "clip_str_37",
        "lora_name_38",
        "lora_wt_38",
        "model_str_38",
        "clip_str_38",
        "lora_name_39",
        "lora_wt_39",
        "model_str_39",
        "clip_str_39",
        "lora_name_40",
        "lora_wt_40",
        "model_str_40",
        "clip_str_40",
        "lora_name_41",
        "lora_wt_41",
        "model_str_41",
        "clip_str_41",
        "lora_name_42",
        "lora_wt_42",
        "model_str_42",
        "clip_str_42",
        "lora_name_43",
        "lora_wt_43",
        "model_str_43",
        "clip_str_43",
        "lora_name_44",
        "lora_wt_44",
        "model_str_44",
        "clip_str_44",
        "lora_name_45",
        "lora_wt_45",
        "model_str_45",
        "clip_str_45",
        "lora_name_46",
        "lora_wt_46",
        "model_str_46",
        "clip_str_46",
        "lora_name_47",
        "lora_wt_47",
        "model_str_47",
        "clip_str_47",
        "lora_name_48",
        "lora_wt_48",
        "model_str_48",
        "clip_str_48",
        "lora_name_49",
        "lora_wt_49",
        "model_str_49",
        "clip_str_49"
      ],
      "optional": [
        "lora_stack"
      ]
    },
    "output": [
      "LORA_STACK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LORA_STACK"
    ],
    "name": "LoRA Stacker",
    "display_name": "LoRA Stacker",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Stackers",
    "output_node": false
  },
  "Control Net Stacker": {
    "input": {
      "required": {
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "cnet_stack": [
          "CONTROL_NET_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net",
        "image",
        "strength",
        "start_percent",
        "end_percent"
      ],
      "optional": [
        "cnet_stack"
      ]
    },
    "output": [
      "CONTROL_NET_STACK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CNET_STACK"
    ],
    "name": "Control Net Stacker",
    "display_name": "Control Net Stacker",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Stackers",
    "output_node": false
  },
  "Apply ControlNet Stack": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ]
      },
      "optional": {
        "cnet_stack": [
          "CONTROL_NET_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative"
      ],
      "optional": [
        "cnet_stack"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "CONDITIONING+",
      "CONDITIONING-"
    ],
    "name": "Apply ControlNet Stack",
    "display_name": "Apply ControlNet Stack",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Stackers",
    "output_node": false
  },
  "Unpack SDXL Tuple": {
    "input": {
      "required": {
        "sdxl_tuple": [
          "SDXL_TUPLE"
        ]
      }
    },
    "input_order": {
      "required": [
        "sdxl_tuple"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "CONDITIONING",
      "CONDITIONING",
      "MODEL",
      "CLIP",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "BASE_MODEL",
      "BASE_CLIP",
      "BASE_CONDITIONING+",
      "BASE_CONDITIONING-",
      "REFINER_MODEL",
      "REFINER_CLIP",
      "REFINER_CONDITIONING+",
      "REFINER_CONDITIONING-"
    ],
    "name": "Unpack SDXL Tuple",
    "display_name": "Unpack SDXL Tuple",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Misc",
    "output_node": false
  },
  "Pack SDXL Tuple": {
    "input": {
      "required": {
        "base_model": [
          "MODEL"
        ],
        "base_clip": [
          "CLIP"
        ],
        "base_positive": [
          "CONDITIONING"
        ],
        "base_negative": [
          "CONDITIONING"
        ],
        "refiner_model": [
          "MODEL"
        ],
        "refiner_clip": [
          "CLIP"
        ],
        "refiner_positive": [
          "CONDITIONING"
        ],
        "refiner_negative": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "base_model",
        "base_clip",
        "base_positive",
        "base_negative",
        "refiner_model",
        "refiner_clip",
        "refiner_positive",
        "refiner_negative"
      ]
    },
    "output": [
      "SDXL_TUPLE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SDXL_TUPLE"
    ],
    "name": "Pack SDXL Tuple",
    "display_name": "Pack SDXL Tuple",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Misc",
    "output_node": false
  },
  "XY Plot": {
    "input": {
      "required": {
        "grid_spacing": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 500,
            "step": 5
          }
        ],
        "XY_flip": [
          [
            "False",
            "True"
          ]
        ],
        "Y_label_orientation": [
          [
            "Horizontal",
            "Vertical"
          ]
        ],
        "cache_models": [
          [
            "True",
            "False"
          ]
        ],
        "ksampler_output_image": [
          [
            "Images",
            "Plot"
          ]
        ]
      },
      "optional": {
        "dependencies": [
          "DEPENDENCIES"
        ],
        "X": [
          "XY"
        ],
        "Y": [
          "XY"
        ]
      },
      "hidden": {
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "grid_spacing",
        "XY_flip",
        "Y_label_orientation",
        "cache_models",
        "ksampler_output_image"
      ],
      "optional": [
        "dependencies",
        "X",
        "Y"
      ],
      "hidden": [
        "my_unique_id"
      ]
    },
    "output": [
      "SCRIPT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SCRIPT"
    ],
    "name": "XY Plot",
    "display_name": "XY Plot",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Scripts",
    "output_node": false
  },
  "XY Input: Seeds++ Batch": {
    "input": {
      "required": {
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "batch_count"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: Seeds++ Batch",
    "display_name": "XY Input: Seeds++ Batch",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: Add/Return Noise": {
    "input": {
      "required": {
        "XY_type": [
          [
            "add_noise",
            "return_with_leftover_noise"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "XY_type"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: Add/Return Noise",
    "display_name": "XY Input: Add/Return Noise",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: Steps": {
    "input": {
      "required": {
        "target_parameter": [
          [
            "steps",
            "start_at_step",
            "end_at_step",
            "refine_at_step"
          ]
        ],
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "first_step": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 10000
          }
        ],
        "last_step": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "first_start_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "last_start_step": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 10000
          }
        ],
        "first_end_step": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 10000
          }
        ],
        "last_end_step": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 10000
          }
        ],
        "first_refine_step": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 10000
          }
        ],
        "last_refine_step": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "target_parameter",
        "batch_count",
        "first_step",
        "last_step",
        "first_start_step",
        "last_start_step",
        "first_end_step",
        "last_end_step",
        "first_refine_step",
        "last_refine_step"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: Steps",
    "display_name": "XY Input: Steps",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: CFG Scale": {
    "input": {
      "required": {
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "first_cfg": [
          "FLOAT",
          {
            "default": 7.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "last_cfg": [
          "FLOAT",
          {
            "default": 9.0,
            "min": 0.0,
            "max": 100.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "batch_count",
        "first_cfg",
        "last_cfg"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: CFG Scale",
    "display_name": "XY Input: CFG Scale",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: Sampler/Scheduler": {
    "input": {
      "required": {
        "target_parameter": [
          [
            "sampler",
            "scheduler",
            "sampler & scheduler"
          ]
        ],
        "input_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50,
            "step": 1
          }
        ],
        "sampler_1": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_1": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_2": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_2": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_3": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_3": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_4": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_4": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_5": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_5": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_6": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_6": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_7": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_7": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_8": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_8": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_9": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_9": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_10": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_10": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_11": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_11": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_12": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_12": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_13": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_13": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_14": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_14": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_15": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_15": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_16": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_16": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_17": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_17": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_18": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_18": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_19": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_19": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_20": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_20": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_21": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_21": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_22": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_22": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_23": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_23": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_24": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_24": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_25": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_25": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_26": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_26": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_27": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_27": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_28": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_28": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_29": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_29": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_30": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_30": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_31": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_31": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_32": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_32": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_33": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_33": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_34": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_34": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_35": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_35": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_36": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_36": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_37": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_37": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_38": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_38": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_39": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_39": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_40": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_40": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_41": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_41": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_42": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_42": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_43": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_43": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_44": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_44": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_45": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_45": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_46": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_46": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_47": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_47": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_48": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_48": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_49": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_49": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ],
        "sampler_50": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_50": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SD1",
            "AYS SDXL",
            "AYS SVD",
            "GITS"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "target_parameter",
        "input_count",
        "sampler_1",
        "scheduler_1",
        "sampler_2",
        "scheduler_2",
        "sampler_3",
        "scheduler_3",
        "sampler_4",
        "scheduler_4",
        "sampler_5",
        "scheduler_5",
        "sampler_6",
        "scheduler_6",
        "sampler_7",
        "scheduler_7",
        "sampler_8",
        "scheduler_8",
        "sampler_9",
        "scheduler_9",
        "sampler_10",
        "scheduler_10",
        "sampler_11",
        "scheduler_11",
        "sampler_12",
        "scheduler_12",
        "sampler_13",
        "scheduler_13",
        "sampler_14",
        "scheduler_14",
        "sampler_15",
        "scheduler_15",
        "sampler_16",
        "scheduler_16",
        "sampler_17",
        "scheduler_17",
        "sampler_18",
        "scheduler_18",
        "sampler_19",
        "scheduler_19",
        "sampler_20",
        "scheduler_20",
        "sampler_21",
        "scheduler_21",
        "sampler_22",
        "scheduler_22",
        "sampler_23",
        "scheduler_23",
        "sampler_24",
        "scheduler_24",
        "sampler_25",
        "scheduler_25",
        "sampler_26",
        "scheduler_26",
        "sampler_27",
        "scheduler_27",
        "sampler_28",
        "scheduler_28",
        "sampler_29",
        "scheduler_29",
        "sampler_30",
        "scheduler_30",
        "sampler_31",
        "scheduler_31",
        "sampler_32",
        "scheduler_32",
        "sampler_33",
        "scheduler_33",
        "sampler_34",
        "scheduler_34",
        "sampler_35",
        "scheduler_35",
        "sampler_36",
        "scheduler_36",
        "sampler_37",
        "scheduler_37",
        "sampler_38",
        "scheduler_38",
        "sampler_39",
        "scheduler_39",
        "sampler_40",
        "scheduler_40",
        "sampler_41",
        "scheduler_41",
        "sampler_42",
        "scheduler_42",
        "sampler_43",
        "scheduler_43",
        "sampler_44",
        "scheduler_44",
        "sampler_45",
        "scheduler_45",
        "sampler_46",
        "scheduler_46",
        "sampler_47",
        "scheduler_47",
        "sampler_48",
        "scheduler_48",
        "sampler_49",
        "scheduler_49",
        "sampler_50",
        "scheduler_50"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: Sampler/Scheduler",
    "display_name": "XY Input: Sampler/Scheduler",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: Denoise": {
    "input": {
      "required": {
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "first_denoise": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "last_denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "batch_count",
        "first_denoise",
        "last_denoise"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: Denoise",
    "display_name": "XY Input: Denoise",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: VAE": {
    "input": {
      "required": {
        "input_mode": [
          [
            "VAE Names",
            "VAE Batch"
          ]
        ],
        "batch_path": [
          "STRING",
          {
            "default": "/example_folder",
            "multiline": false
          }
        ],
        "subdirectories": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "batch_sort": [
          [
            "ascending",
            "descending"
          ]
        ],
        "batch_max": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 50,
            "step": 1
          }
        ],
        "vae_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50,
            "step": 1
          }
        ],
        "vae_name_1": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_2": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_3": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_4": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_5": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_6": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_7": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_8": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_9": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_10": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_11": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_12": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_13": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_14": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_15": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_16": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_17": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_18": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_19": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_20": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_21": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_22": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_23": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_24": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_25": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_26": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_27": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_28": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_29": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_30": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_31": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_32": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_33": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_34": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_35": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_36": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_37": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_38": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_39": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_40": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_41": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_42": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_43": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_44": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_45": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_46": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_47": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_48": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_49": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_name_50": [
          [
            "None",
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "input_mode",
        "batch_path",
        "subdirectories",
        "batch_sort",
        "batch_max",
        "vae_count",
        "vae_name_1",
        "vae_name_2",
        "vae_name_3",
        "vae_name_4",
        "vae_name_5",
        "vae_name_6",
        "vae_name_7",
        "vae_name_8",
        "vae_name_9",
        "vae_name_10",
        "vae_name_11",
        "vae_name_12",
        "vae_name_13",
        "vae_name_14",
        "vae_name_15",
        "vae_name_16",
        "vae_name_17",
        "vae_name_18",
        "vae_name_19",
        "vae_name_20",
        "vae_name_21",
        "vae_name_22",
        "vae_name_23",
        "vae_name_24",
        "vae_name_25",
        "vae_name_26",
        "vae_name_27",
        "vae_name_28",
        "vae_name_29",
        "vae_name_30",
        "vae_name_31",
        "vae_name_32",
        "vae_name_33",
        "vae_name_34",
        "vae_name_35",
        "vae_name_36",
        "vae_name_37",
        "vae_name_38",
        "vae_name_39",
        "vae_name_40",
        "vae_name_41",
        "vae_name_42",
        "vae_name_43",
        "vae_name_44",
        "vae_name_45",
        "vae_name_46",
        "vae_name_47",
        "vae_name_48",
        "vae_name_49",
        "vae_name_50"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: VAE",
    "display_name": "XY Input: VAE",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: Prompt S/R": {
    "input": {
      "required": {
        "target_prompt": [
          [
            "positive",
            "negative"
          ]
        ],
        "search_txt": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 49
          }
        ],
        "replace_1": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_2": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_3": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_4": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_5": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_6": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_7": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_8": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_9": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_10": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_11": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_12": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_13": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_14": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_15": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_16": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_17": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_18": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_19": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_20": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_21": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_22": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_23": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_24": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_25": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_26": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_27": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_28": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_29": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_30": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_31": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_32": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_33": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_34": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_35": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_36": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_37": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_38": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_39": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_40": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_41": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_42": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_43": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_44": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_45": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_46": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_47": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_48": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_49": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "target_prompt",
        "search_txt",
        "replace_count",
        "replace_1",
        "replace_2",
        "replace_3",
        "replace_4",
        "replace_5",
        "replace_6",
        "replace_7",
        "replace_8",
        "replace_9",
        "replace_10",
        "replace_11",
        "replace_12",
        "replace_13",
        "replace_14",
        "replace_15",
        "replace_16",
        "replace_17",
        "replace_18",
        "replace_19",
        "replace_20",
        "replace_21",
        "replace_22",
        "replace_23",
        "replace_24",
        "replace_25",
        "replace_26",
        "replace_27",
        "replace_28",
        "replace_29",
        "replace_30",
        "replace_31",
        "replace_32",
        "replace_33",
        "replace_34",
        "replace_35",
        "replace_36",
        "replace_37",
        "replace_38",
        "replace_39",
        "replace_40",
        "replace_41",
        "replace_42",
        "replace_43",
        "replace_44",
        "replace_45",
        "replace_46",
        "replace_47",
        "replace_48",
        "replace_49"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: Prompt S/R",
    "display_name": "XY Input: Prompt S/R",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: Aesthetic Score": {
    "input": {
      "required": {
        "target_ascore": [
          [
            "positive",
            "negative"
          ]
        ],
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "first_ascore": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "last_ascore": [
          "FLOAT",
          {
            "default": 10.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "target_ascore",
        "batch_count",
        "first_ascore",
        "last_ascore"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: Aesthetic Score",
    "display_name": "XY Input: Aesthetic Score",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: Refiner On/Off": {
    "input": {
      "required": {
        "refine_at_percent": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "refine_at_percent"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: Refiner On/Off",
    "display_name": "XY Input: Refiner On/Off",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: Checkpoint": {
    "input": {
      "required": {
        "target_ckpt": [
          [
            "Base",
            "Refiner"
          ]
        ],
        "input_mode": [
          [
            "Ckpt Names",
            "Ckpt Names+ClipSkip",
            "Ckpt Names+ClipSkip+VAE",
            "Checkpoint Batch"
          ]
        ],
        "batch_path": [
          "STRING",
          {
            "default": "/example_folder",
            "multiline": false
          }
        ],
        "subdirectories": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "batch_sort": [
          [
            "ascending",
            "descending"
          ]
        ],
        "batch_max": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 50,
            "step": 1
          }
        ],
        "ckpt_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50,
            "step": 1
          }
        ],
        "ckpt_name_1": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_1": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_1": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_2": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_2": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_2": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_3": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_3": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_3": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_4": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_4": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_4": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_5": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_5": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_5": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_6": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_6": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_6": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_7": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_7": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_7": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_8": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_8": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_8": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_9": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_9": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_9": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_10": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_10": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_10": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_11": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_11": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_11": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_12": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_12": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_12": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_13": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_13": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_13": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_14": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_14": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_14": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_15": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_15": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_15": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_16": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_16": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_16": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_17": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_17": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_17": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_18": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_18": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_18": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_19": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_19": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_19": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_20": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_20": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_20": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_21": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_21": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_21": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_22": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_22": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_22": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_23": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_23": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_23": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_24": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_24": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_24": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_25": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_25": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_25": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_26": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_26": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_26": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_27": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_27": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_27": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_28": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_28": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_28": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_29": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_29": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_29": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_30": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_30": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_30": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_31": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_31": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_31": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_32": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_32": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_32": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_33": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_33": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_33": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_34": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_34": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_34": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_35": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_35": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_35": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_36": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_36": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_36": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_37": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_37": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_37": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_38": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_38": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_38": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_39": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_39": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_39": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_40": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_40": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_40": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_41": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_41": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_41": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_42": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_42": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_42": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_43": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_43": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_43": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_44": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_44": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_44": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_45": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_45": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_45": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_46": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_46": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_46": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_47": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_47": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_47": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_48": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_48": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_48": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_49": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_49": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_49": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_50": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_50": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_50": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "target_ckpt",
        "input_mode",
        "batch_path",
        "subdirectories",
        "batch_sort",
        "batch_max",
        "ckpt_count",
        "ckpt_name_1",
        "clip_skip_1",
        "vae_name_1",
        "ckpt_name_2",
        "clip_skip_2",
        "vae_name_2",
        "ckpt_name_3",
        "clip_skip_3",
        "vae_name_3",
        "ckpt_name_4",
        "clip_skip_4",
        "vae_name_4",
        "ckpt_name_5",
        "clip_skip_5",
        "vae_name_5",
        "ckpt_name_6",
        "clip_skip_6",
        "vae_name_6",
        "ckpt_name_7",
        "clip_skip_7",
        "vae_name_7",
        "ckpt_name_8",
        "clip_skip_8",
        "vae_name_8",
        "ckpt_name_9",
        "clip_skip_9",
        "vae_name_9",
        "ckpt_name_10",
        "clip_skip_10",
        "vae_name_10",
        "ckpt_name_11",
        "clip_skip_11",
        "vae_name_11",
        "ckpt_name_12",
        "clip_skip_12",
        "vae_name_12",
        "ckpt_name_13",
        "clip_skip_13",
        "vae_name_13",
        "ckpt_name_14",
        "clip_skip_14",
        "vae_name_14",
        "ckpt_name_15",
        "clip_skip_15",
        "vae_name_15",
        "ckpt_name_16",
        "clip_skip_16",
        "vae_name_16",
        "ckpt_name_17",
        "clip_skip_17",
        "vae_name_17",
        "ckpt_name_18",
        "clip_skip_18",
        "vae_name_18",
        "ckpt_name_19",
        "clip_skip_19",
        "vae_name_19",
        "ckpt_name_20",
        "clip_skip_20",
        "vae_name_20",
        "ckpt_name_21",
        "clip_skip_21",
        "vae_name_21",
        "ckpt_name_22",
        "clip_skip_22",
        "vae_name_22",
        "ckpt_name_23",
        "clip_skip_23",
        "vae_name_23",
        "ckpt_name_24",
        "clip_skip_24",
        "vae_name_24",
        "ckpt_name_25",
        "clip_skip_25",
        "vae_name_25",
        "ckpt_name_26",
        "clip_skip_26",
        "vae_name_26",
        "ckpt_name_27",
        "clip_skip_27",
        "vae_name_27",
        "ckpt_name_28",
        "clip_skip_28",
        "vae_name_28",
        "ckpt_name_29",
        "clip_skip_29",
        "vae_name_29",
        "ckpt_name_30",
        "clip_skip_30",
        "vae_name_30",
        "ckpt_name_31",
        "clip_skip_31",
        "vae_name_31",
        "ckpt_name_32",
        "clip_skip_32",
        "vae_name_32",
        "ckpt_name_33",
        "clip_skip_33",
        "vae_name_33",
        "ckpt_name_34",
        "clip_skip_34",
        "vae_name_34",
        "ckpt_name_35",
        "clip_skip_35",
        "vae_name_35",
        "ckpt_name_36",
        "clip_skip_36",
        "vae_name_36",
        "ckpt_name_37",
        "clip_skip_37",
        "vae_name_37",
        "ckpt_name_38",
        "clip_skip_38",
        "vae_name_38",
        "ckpt_name_39",
        "clip_skip_39",
        "vae_name_39",
        "ckpt_name_40",
        "clip_skip_40",
        "vae_name_40",
        "ckpt_name_41",
        "clip_skip_41",
        "vae_name_41",
        "ckpt_name_42",
        "clip_skip_42",
        "vae_name_42",
        "ckpt_name_43",
        "clip_skip_43",
        "vae_name_43",
        "ckpt_name_44",
        "clip_skip_44",
        "vae_name_44",
        "ckpt_name_45",
        "clip_skip_45",
        "vae_name_45",
        "ckpt_name_46",
        "clip_skip_46",
        "vae_name_46",
        "ckpt_name_47",
        "clip_skip_47",
        "vae_name_47",
        "ckpt_name_48",
        "clip_skip_48",
        "vae_name_48",
        "ckpt_name_49",
        "clip_skip_49",
        "vae_name_49",
        "ckpt_name_50",
        "clip_skip_50",
        "vae_name_50"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: Checkpoint",
    "display_name": "XY Input: Checkpoint",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: Clip Skip": {
    "input": {
      "required": {
        "target_ckpt": [
          [
            "Base",
            "Refiner"
          ]
        ],
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "first_clip_skip": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "last_clip_skip": [
          "INT",
          {
            "default": -3,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "target_ckpt",
        "batch_count",
        "first_clip_skip",
        "last_clip_skip"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: Clip Skip",
    "display_name": "XY Input: Clip Skip",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: LoRA": {
    "input": {
      "required": {
        "input_mode": [
          [
            "LoRA Names",
            "LoRA Names+Weights",
            "LoRA Batch"
          ]
        ],
        "batch_path": [
          "STRING",
          {
            "default": "/example_folder",
            "multiline": false
          }
        ],
        "subdirectories": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "batch_sort": [
          [
            "ascending",
            "descending"
          ]
        ],
        "batch_max": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 50,
            "step": 1
          }
        ],
        "lora_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50,
            "step": 1
          }
        ],
        "model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_1": [
          [
            "None"
          ]
        ],
        "model_str_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_2": [
          [
            "None"
          ]
        ],
        "model_str_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_3": [
          [
            "None"
          ]
        ],
        "model_str_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_4": [
          [
            "None"
          ]
        ],
        "model_str_4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_5": [
          [
            "None"
          ]
        ],
        "model_str_5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_6": [
          [
            "None"
          ]
        ],
        "model_str_6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_7": [
          [
            "None"
          ]
        ],
        "model_str_7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_8": [
          [
            "None"
          ]
        ],
        "model_str_8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_9": [
          [
            "None"
          ]
        ],
        "model_str_9": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_9": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_10": [
          [
            "None"
          ]
        ],
        "model_str_10": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_10": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_11": [
          [
            "None"
          ]
        ],
        "model_str_11": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_11": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_12": [
          [
            "None"
          ]
        ],
        "model_str_12": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_12": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_13": [
          [
            "None"
          ]
        ],
        "model_str_13": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_13": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_14": [
          [
            "None"
          ]
        ],
        "model_str_14": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_14": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_15": [
          [
            "None"
          ]
        ],
        "model_str_15": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_15": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_16": [
          [
            "None"
          ]
        ],
        "model_str_16": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_16": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_17": [
          [
            "None"
          ]
        ],
        "model_str_17": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_17": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_18": [
          [
            "None"
          ]
        ],
        "model_str_18": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_18": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_19": [
          [
            "None"
          ]
        ],
        "model_str_19": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_19": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_20": [
          [
            "None"
          ]
        ],
        "model_str_20": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_20": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_21": [
          [
            "None"
          ]
        ],
        "model_str_21": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_21": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_22": [
          [
            "None"
          ]
        ],
        "model_str_22": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_22": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_23": [
          [
            "None"
          ]
        ],
        "model_str_23": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_23": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_24": [
          [
            "None"
          ]
        ],
        "model_str_24": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_24": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_25": [
          [
            "None"
          ]
        ],
        "model_str_25": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_25": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_26": [
          [
            "None"
          ]
        ],
        "model_str_26": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_26": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_27": [
          [
            "None"
          ]
        ],
        "model_str_27": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_27": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_28": [
          [
            "None"
          ]
        ],
        "model_str_28": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_28": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_29": [
          [
            "None"
          ]
        ],
        "model_str_29": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_29": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_30": [
          [
            "None"
          ]
        ],
        "model_str_30": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_30": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_31": [
          [
            "None"
          ]
        ],
        "model_str_31": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_31": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_32": [
          [
            "None"
          ]
        ],
        "model_str_32": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_32": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_33": [
          [
            "None"
          ]
        ],
        "model_str_33": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_33": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_34": [
          [
            "None"
          ]
        ],
        "model_str_34": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_34": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_35": [
          [
            "None"
          ]
        ],
        "model_str_35": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_35": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_36": [
          [
            "None"
          ]
        ],
        "model_str_36": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_36": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_37": [
          [
            "None"
          ]
        ],
        "model_str_37": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_37": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_38": [
          [
            "None"
          ]
        ],
        "model_str_38": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_38": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_39": [
          [
            "None"
          ]
        ],
        "model_str_39": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_39": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_40": [
          [
            "None"
          ]
        ],
        "model_str_40": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_40": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_41": [
          [
            "None"
          ]
        ],
        "model_str_41": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_41": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_42": [
          [
            "None"
          ]
        ],
        "model_str_42": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_42": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_43": [
          [
            "None"
          ]
        ],
        "model_str_43": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_43": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_44": [
          [
            "None"
          ]
        ],
        "model_str_44": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_44": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_45": [
          [
            "None"
          ]
        ],
        "model_str_45": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_45": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_46": [
          [
            "None"
          ]
        ],
        "model_str_46": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_46": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_47": [
          [
            "None"
          ]
        ],
        "model_str_47": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_47": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_48": [
          [
            "None"
          ]
        ],
        "model_str_48": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_48": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_49": [
          [
            "None"
          ]
        ],
        "model_str_49": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_49": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_50": [
          [
            "None"
          ]
        ],
        "model_str_50": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_50": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "lora_stack": [
          "LORA_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "input_mode",
        "batch_path",
        "subdirectories",
        "batch_sort",
        "batch_max",
        "lora_count",
        "model_strength",
        "clip_strength",
        "lora_name_1",
        "model_str_1",
        "clip_str_1",
        "lora_name_2",
        "model_str_2",
        "clip_str_2",
        "lora_name_3",
        "model_str_3",
        "clip_str_3",
        "lora_name_4",
        "model_str_4",
        "clip_str_4",
        "lora_name_5",
        "model_str_5",
        "clip_str_5",
        "lora_name_6",
        "model_str_6",
        "clip_str_6",
        "lora_name_7",
        "model_str_7",
        "clip_str_7",
        "lora_name_8",
        "model_str_8",
        "clip_str_8",
        "lora_name_9",
        "model_str_9",
        "clip_str_9",
        "lora_name_10",
        "model_str_10",
        "clip_str_10",
        "lora_name_11",
        "model_str_11",
        "clip_str_11",
        "lora_name_12",
        "model_str_12",
        "clip_str_12",
        "lora_name_13",
        "model_str_13",
        "clip_str_13",
        "lora_name_14",
        "model_str_14",
        "clip_str_14",
        "lora_name_15",
        "model_str_15",
        "clip_str_15",
        "lora_name_16",
        "model_str_16",
        "clip_str_16",
        "lora_name_17",
        "model_str_17",
        "clip_str_17",
        "lora_name_18",
        "model_str_18",
        "clip_str_18",
        "lora_name_19",
        "model_str_19",
        "clip_str_19",
        "lora_name_20",
        "model_str_20",
        "clip_str_20",
        "lora_name_21",
        "model_str_21",
        "clip_str_21",
        "lora_name_22",
        "model_str_22",
        "clip_str_22",
        "lora_name_23",
        "model_str_23",
        "clip_str_23",
        "lora_name_24",
        "model_str_24",
        "clip_str_24",
        "lora_name_25",
        "model_str_25",
        "clip_str_25",
        "lora_name_26",
        "model_str_26",
        "clip_str_26",
        "lora_name_27",
        "model_str_27",
        "clip_str_27",
        "lora_name_28",
        "model_str_28",
        "clip_str_28",
        "lora_name_29",
        "model_str_29",
        "clip_str_29",
        "lora_name_30",
        "model_str_30",
        "clip_str_30",
        "lora_name_31",
        "model_str_31",
        "clip_str_31",
        "lora_name_32",
        "model_str_32",
        "clip_str_32",
        "lora_name_33",
        "model_str_33",
        "clip_str_33",
        "lora_name_34",
        "model_str_34",
        "clip_str_34",
        "lora_name_35",
        "model_str_35",
        "clip_str_35",
        "lora_name_36",
        "model_str_36",
        "clip_str_36",
        "lora_name_37",
        "model_str_37",
        "clip_str_37",
        "lora_name_38",
        "model_str_38",
        "clip_str_38",
        "lora_name_39",
        "model_str_39",
        "clip_str_39",
        "lora_name_40",
        "model_str_40",
        "clip_str_40",
        "lora_name_41",
        "model_str_41",
        "clip_str_41",
        "lora_name_42",
        "model_str_42",
        "clip_str_42",
        "lora_name_43",
        "model_str_43",
        "clip_str_43",
        "lora_name_44",
        "model_str_44",
        "clip_str_44",
        "lora_name_45",
        "model_str_45",
        "clip_str_45",
        "lora_name_46",
        "model_str_46",
        "clip_str_46",
        "lora_name_47",
        "model_str_47",
        "clip_str_47",
        "lora_name_48",
        "model_str_48",
        "clip_str_48",
        "lora_name_49",
        "model_str_49",
        "clip_str_49",
        "lora_name_50",
        "model_str_50",
        "clip_str_50"
      ],
      "optional": [
        "lora_stack"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: LoRA",
    "display_name": "XY Input: LoRA",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: LoRA Plot": {
    "input": {
      "required": {
        "input_mode": [
          [
            "X: LoRA Batch, Y: LoRA Weight",
            "X: LoRA Batch, Y: Model Strength",
            "X: LoRA Batch, Y: Clip Strength",
            "X: Model Strength, Y: Clip Strength"
          ]
        ],
        "lora_name": [
          [
            "None"
          ]
        ],
        "model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "X_batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "X_batch_path": [
          "STRING",
          {
            "default": "/example_folder",
            "multiline": false
          }
        ],
        "X_subdirectories": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "X_batch_sort": [
          [
            "ascending",
            "descending"
          ]
        ],
        "X_first_value": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "X_last_value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "Y_batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "Y_first_value": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "Y_last_value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "lora_stack": [
          "LORA_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "input_mode",
        "lora_name",
        "model_strength",
        "clip_strength",
        "X_batch_count",
        "X_batch_path",
        "X_subdirectories",
        "X_batch_sort",
        "X_first_value",
        "X_last_value",
        "Y_batch_count",
        "Y_first_value",
        "Y_last_value"
      ],
      "optional": [
        "lora_stack"
      ]
    },
    "output": [
      "XY",
      "XY"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "X",
      "Y"
    ],
    "name": "XY Input: LoRA Plot",
    "display_name": "XY Input: LoRA Plot",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: LoRA Stacks": {
    "input": {
      "required": {
        "node_state": [
          [
            "Enabled"
          ]
        ]
      },
      "optional": {
        "lora_stack_1": [
          "LORA_STACK"
        ],
        "lora_stack_2": [
          "LORA_STACK"
        ],
        "lora_stack_3": [
          "LORA_STACK"
        ],
        "lora_stack_4": [
          "LORA_STACK"
        ],
        "lora_stack_5": [
          "LORA_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "node_state"
      ],
      "optional": [
        "lora_stack_1",
        "lora_stack_2",
        "lora_stack_3",
        "lora_stack_4",
        "lora_stack_5"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: LoRA Stacks",
    "display_name": "XY Input: LoRA Stacks",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: Control Net": {
    "input": {
      "required": {
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "target_parameter": [
          [
            "strength",
            "start_percent",
            "end_percent"
          ]
        ],
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "first_strength": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "last_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "first_start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "last_start_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "first_end_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "last_end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "cnet_stack": [
          "CONTROL_NET_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net",
        "image",
        "target_parameter",
        "batch_count",
        "first_strength",
        "last_strength",
        "first_start_percent",
        "last_start_percent",
        "first_end_percent",
        "last_end_percent",
        "strength",
        "start_percent",
        "end_percent"
      ],
      "optional": [
        "cnet_stack"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: Control Net",
    "display_name": "XY Input: Control Net",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: Control Net Plot": {
    "input": {
      "required": {
        "control_net": [
          "CONTROL_NET"
        ],
        "image": [
          "IMAGE"
        ],
        "plot_type": [
          [
            "X: Strength, Y: Start%",
            "X: Strength, Y: End%",
            "X: Start%, Y: Strength",
            "X: Start%, Y: End%",
            "X: End%, Y: Strength",
            "X: End%, Y: Start%"
          ]
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "X_batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "X_first_value": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "X_last_value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "Y_batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "Y_first_value": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "Y_last_value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "cnet_stack": [
          "CONTROL_NET_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net",
        "image",
        "plot_type",
        "strength",
        "start_percent",
        "end_percent",
        "X_batch_count",
        "X_first_value",
        "X_last_value",
        "Y_batch_count",
        "Y_first_value",
        "Y_last_value"
      ],
      "optional": [
        "cnet_stack"
      ]
    },
    "output": [
      "XY",
      "XY"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "X",
      "Y"
    ],
    "name": "XY Input: Control Net Plot",
    "display_name": "XY Input: Control Net Plot",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "XY Input: Manual XY Entry": {
    "input": {
      "required": {
        "plot_type": [
          [
            "Nothing",
            "Seeds++ Batch",
            "Steps",
            "StartStep",
            "EndStep",
            "CFG Scale",
            "Sampler",
            "Scheduler",
            "Denoise",
            "VAE",
            "Positive Prompt S/R",
            "Negative Prompt S/R",
            "Checkpoint",
            "Clip Skip",
            "LoRA"
          ]
        ],
        "plot_value": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "plot_type",
        "plot_value"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "XY Input: Manual XY Entry",
    "display_name": "XY Input: Manual XY Entry",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "Manual XY Entry Info": {
    "input": {
      "required": {
        "notes": [
          "STRING",
          {
            "default": "_____________SYNTAX_____________\n(X/Y_types)     (X/Y_values)\nSeeds++ Batch   batch_count\nSteps           steps_1;steps_2;...\nStartStep       start_step_1;start_step_2;...\nEndStep         end_step_1;end_step_2;...\nCFG Scale       cfg_1;cfg_2;...\nSampler(1)      sampler_1;sampler_2;...\nSampler(2)      sampler_1,scheduler_1;...\nSampler(3)      sampler_1;...;,default_scheduler\nScheduler       scheduler_1;scheduler_2;...\nDenoise         denoise_1;denoise_2;...\nVAE             vae_1;vae_2;vae_3;...\n+Prompt S/R     search_txt;replace_1;replace_2;...\n-Prompt S/R     search_txt;replace_1;replace_2;...\nCheckpoint(1)   ckpt_1;ckpt_2;ckpt_3;...\nCheckpoint(2)   ckpt_1,clip_skip_1;...\nCheckpoint(3)   ckpt_1;ckpt_2;...;,default_clip_skip\nClip Skip       clip_skip_1;clip_skip_2;...\nLoRA(1)         lora_1;lora_2;lora_3;...\nLoRA(2)         lora_1;...;,default_model_str,default_clip_str\nLoRA(3)         lora_1,model_str_1,clip_str_1;...\n\n____________SAMPLERS____________\neuler;\neuler_cfg_pp;\neuler_ancestral;\neuler_ancestral_cfg_pp;\nheun;\nheunpp2;\ndpm_2;\ndpm_2_ancestral;\nlms;\ndpm_fast;\ndpm_adaptive;\ndpmpp_2s_ancestral;\ndpmpp_2s_ancestral_cfg_pp;\ndpmpp_sde;\ndpmpp_sde_gpu;\ndpmpp_2m;\ndpmpp_2m_cfg_pp;\ndpmpp_2m_sde;\ndpmpp_2m_sde_gpu;\ndpmpp_3m_sde;\ndpmpp_3m_sde_gpu;\nddpm;\nlcm;\nipndm;\nipndm_v;\ndeis;\nres_multistep;\nres_multistep_cfg_pp;\nres_multistep_ancestral;\nres_multistep_ancestral_cfg_pp;\ngradient_estimation;\ner_sde;\nseeds_2;\nseeds_3;\nddim;\nuni_pc;\nuni_pc_bh2\n\n___________SCHEDULERS___________\nnormal;\nkarras;\nexponential;\nsgm_uniform;\nsimple;\nddim_uniform;\nbeta;\nlinear_quadratic;\nkl_optimal;\nAYS SD1;\nAYS SDXL;\nAYS SVD;\nGITS\n\n_____________VAES_______________\nSDXL/sdxl_vae.safetensors;\nWan2_1_VAE_bf16.safetensors;\nWan2_1_VAE_fp32.safetensors;\nwan_2.1_vae.safetensors\n\n___________CHECKPOINTS__________\ndisneyrealcartoonmix_v10.safetensors;\nkatayamaMixXLV2_katayamaMixXLV2.safetensors;\nrealvisxlV50_v50LightningBakedvae.safetensors;\nzavychromaxl_v100.safetensors\n\n_____________LORAS______________\n\n",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "notes"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Manual XY Entry Info",
    "display_name": "Manual XY Entry Info",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "Join XY Inputs of Same Type": {
    "input": {
      "required": {
        "XY_1": [
          "XY"
        ],
        "XY_2": [
          "XY"
        ]
      }
    },
    "input_order": {
      "required": [
        "XY_1",
        "XY_2"
      ]
    },
    "output": [
      "XY"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "Join XY Inputs of Same Type",
    "display_name": "Join XY Inputs of Same Type",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/XY Inputs",
    "output_node": false
  },
  "Image Overlay": {
    "input": {
      "required": {
        "base_image": [
          "IMAGE"
        ],
        "overlay_image": [
          "IMAGE"
        ],
        "overlay_resize": [
          [
            "None",
            "Fit",
            "Resize by rescale_factor",
            "Resize to width & heigth"
          ]
        ],
        "resize_method": [
          [
            "nearest-exact",
            "bilinear",
            "area"
          ]
        ],
        "rescale_factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.01,
            "max": 16.0,
            "step": 0.01
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "x_offset": [
          "INT",
          {
            "default": 0,
            "min": -48000,
            "max": 48000,
            "step": 1
          }
        ],
        "y_offset": [
          "INT",
          {
            "default": 0,
            "min": -48000,
            "max": 48000,
            "step": 1
          }
        ],
        "rotation": [
          "INT",
          {
            "default": 0,
            "min": -180,
            "max": 180,
            "step": 0.1
          }
        ],
        "opacity": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 0.1
          }
        ]
      },
      "optional": {
        "optional_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "base_image",
        "overlay_image",
        "overlay_resize",
        "resize_method",
        "rescale_factor",
        "width",
        "height",
        "x_offset",
        "y_offset",
        "rotation",
        "opacity"
      ],
      "optional": [
        "optional_mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Overlay",
    "display_name": "Image Overlay",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Image",
    "output_node": false
  },
  "Noise Control Script": {
    "input": {
      "required": {
        "rng_source": [
          [
            "cpu",
            "gpu",
            "nv"
          ]
        ],
        "cfg_denoiser": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "add_seed_noise": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "weight": [
          "FLOAT",
          {
            "default": 0.015,
            "min": 0,
            "max": 1,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "script": [
          "SCRIPT"
        ]
      }
    },
    "input_order": {
      "required": [
        "rng_source",
        "cfg_denoiser",
        "add_seed_noise",
        "seed",
        "weight"
      ],
      "optional": [
        "script"
      ]
    },
    "output": [
      "SCRIPT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SCRIPT"
    ],
    "name": "Noise Control Script",
    "display_name": "Noise Control Script",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Scripts",
    "output_node": false
  },
  "HighRes-Fix Script": {
    "input": {
      "required": {
        "upscale_type": [
          [
            "latent",
            "pixel",
            "both"
          ]
        ],
        "hires_ckpt_name": [
          [
            "(use same)",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "latent_upscaler": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "bislerp",
            "city96.v1",
            "city96.xl",
            "ttl_nn.SDXL",
            "ttl_nn.SD 1.x"
          ]
        ],
        "pixel_upscaler": [
          [
            "4x-UltraSharp.pth",
            "RealESRGAN_x2.pth"
          ]
        ],
        "upscale_by": [
          "FLOAT",
          {
            "default": 1.25,
            "min": 0.01,
            "max": 8.0,
            "step": 0.05
          }
        ],
        "use_same_seed": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "hires_steps": [
          "INT",
          {
            "default": 12,
            "min": 1,
            "max": 10000
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.56,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "iterations": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 5,
            "step": 1
          }
        ],
        "use_controlnet": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "control_net_name": [
          [
            "SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors"
          ]
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "preprocessor": [
          [
            "none",
            "Zoe-DepthMapPreprocessor",
            "UniFormer-SemSegPreprocessor",
            "SemSegPreprocessor",
            "TilePreprocessor",
            "TTPlanet_TileGF_Preprocessor",
            "TTPlanet_TileSimple_Preprocessor",
            "TEEDPreprocessor",
            "ShufflePreprocessor",
            "SAMPreprocessor",
            "ScribblePreprocessor",
            "Scribble_XDoG_Preprocessor",
            "Scribble_PiDiNet_Preprocessor",
            "ImageLuminanceDetector",
            "ImageIntensityDetector",
            "PyraCannyPreprocessor",
            "PiDiNetPreprocessor",
            "OpenposePreprocessor",
            "OneFormer-COCO-SemSegPreprocessor",
            "OneFormer-ADE20K-SemSegPreprocessor",
            "BAE-NormalMapPreprocessor",
            "M-LSDPreprocessor",
            "MiDaS-NormalMapPreprocessor",
            "MiDaS-DepthMapPreprocessor",
            "Metric3D-DepthMapPreprocessor",
            "Metric3D-NormalMapPreprocessor",
            "MeshGraphormer-DepthMapPreprocessor",
            "MediaPipe-FaceMeshPreprocessor",
            "Manga2Anime_LineArt_Preprocessor",
            "LineartStandardPreprocessor",
            "AnimeLineArtPreprocessor",
            "LineArtPreprocessor",
            "LeReS-DepthMapPreprocessor",
            "HEDPreprocessor",
            "FakeScribblePreprocessor",
            "DWPreprocessor",
            "AnimalPosePreprocessor",
            "DSINE-NormalMapPreprocessor",
            "DepthAnythingV2Preprocessor",
            "DepthAnythingPreprocessor",
            "Zoe_DepthAnythingPreprocessor",
            "DensePosePreprocessor",
            "ColorPreprocessor",
            "CannyEdgePreprocessor",
            "BinaryPreprocessor",
            "AnyLineArtPreprocessor_aux",
            "AnimeFace_SemSegPreprocessor"
          ],
          {
            "default": "none"
          }
        ],
        "preprocessor_imgs": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "script": [
          "SCRIPT"
        ]
      },
      "hidden": {
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "upscale_type",
        "hires_ckpt_name",
        "latent_upscaler",
        "pixel_upscaler",
        "upscale_by",
        "use_same_seed",
        "seed",
        "hires_steps",
        "denoise",
        "iterations",
        "use_controlnet",
        "control_net_name",
        "strength",
        "preprocessor",
        "preprocessor_imgs"
      ],
      "optional": [
        "script"
      ],
      "hidden": [
        "my_unique_id"
      ]
    },
    "output": [
      "SCRIPT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SCRIPT"
    ],
    "name": "HighRes-Fix Script",
    "display_name": "HighRes-Fix Script",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Scripts",
    "output_node": false
  },
  "Tiled Upscaler Script": {
    "input": {
      "required": {
        "upscale_by": [
          "FLOAT",
          {
            "default": 1.25,
            "min": 0.01,
            "max": 8.0,
            "step": 0.05
          }
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 256,
            "max": 16384,
            "step": 64
          }
        ],
        "tiling_strategy": [
          [
            "random",
            "random strict",
            "padded",
            "simple",
            "none"
          ]
        ],
        "tiling_steps": [
          "INT",
          {
            "default": 30,
            "min": 1,
            "max": 10000
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.4,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "use_controlnet": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "tile_controlnet": [
          [
            "SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors"
          ]
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "script": [
          "SCRIPT"
        ]
      }
    },
    "input_order": {
      "required": [
        "upscale_by",
        "tile_size",
        "tiling_strategy",
        "tiling_steps",
        "seed",
        "denoise",
        "use_controlnet",
        "tile_controlnet",
        "strength"
      ],
      "optional": [
        "script"
      ]
    },
    "output": [
      "SCRIPT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SCRIPT"
    ],
    "name": "Tiled Upscaler Script",
    "display_name": "Tiled Upscaler Script",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Scripts",
    "output_node": false
  },
  "LoRA Stack to String converter": {
    "input": {
      "required": {
        "lora_stack": [
          "LORA_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "lora_stack"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LoRA string"
    ],
    "name": "LoRA Stack to String converter",
    "display_name": "LoRA Stack to String converter",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Misc",
    "output_node": false
  },
  "Evaluate Integers": {
    "input": {
      "required": {
        "python_expression": [
          "STRING",
          {
            "default": "((a + b) - c) / 2",
            "multiline": false
          }
        ],
        "print_to_console": [
          [
            "False",
            "True"
          ]
        ]
      },
      "optional": {
        "a": [
          "INT",
          {
            "default": 0,
            "min": -48000,
            "max": 48000,
            "step": 1
          }
        ],
        "b": [
          "INT",
          {
            "default": 0,
            "min": -48000,
            "max": 48000,
            "step": 1
          }
        ],
        "c": [
          "INT",
          {
            "default": 0,
            "min": -48000,
            "max": 48000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "python_expression",
        "print_to_console"
      ],
      "optional": [
        "a",
        "b",
        "c"
      ]
    },
    "output": [
      "INT",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "INT",
      "FLOAT",
      "STRING"
    ],
    "name": "Evaluate Integers",
    "display_name": "Evaluate Integers",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Simple Eval",
    "output_node": true
  },
  "Evaluate Floats": {
    "input": {
      "required": {
        "python_expression": [
          "STRING",
          {
            "default": "((a + b) - c) / 2",
            "multiline": false
          }
        ],
        "print_to_console": [
          [
            "False",
            "True"
          ]
        ]
      },
      "optional": {
        "a": [
          "FLOAT",
          {
            "default": 0,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 1
          }
        ],
        "b": [
          "FLOAT",
          {
            "default": 0,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 1
          }
        ],
        "c": [
          "FLOAT",
          {
            "default": 0,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "python_expression",
        "print_to_console"
      ],
      "optional": [
        "a",
        "b",
        "c"
      ]
    },
    "output": [
      "INT",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "INT",
      "FLOAT",
      "STRING"
    ],
    "name": "Evaluate Floats",
    "display_name": "Evaluate Floats",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Simple Eval",
    "output_node": true
  },
  "Evaluate Strings": {
    "input": {
      "required": {
        "python_expression": [
          "STRING",
          {
            "default": "a + b + c",
            "multiline": false
          }
        ],
        "print_to_console": [
          [
            "False",
            "True"
          ]
        ]
      },
      "optional": {
        "a": [
          "STRING",
          {
            "default": "Hello",
            "multiline": false
          }
        ],
        "b": [
          "STRING",
          {
            "default": " World",
            "multiline": false
          }
        ],
        "c": [
          "STRING",
          {
            "default": "!",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "python_expression",
        "print_to_console"
      ],
      "optional": [
        "a",
        "b",
        "c"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Evaluate Strings",
    "display_name": "Evaluate Strings",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Simple Eval",
    "output_node": true
  },
  "Simple Eval Examples": {
    "input": {
      "required": {
        "models_text": [
          "STRING",
          {
            "default": "The Evaluate Integers, Floats, and Strings nodes \nnow employ the SimpleEval library, enabling secure \ncreation and execution of custom Python expressions.\n\n(https://github.com/danthedeckie/simpleeval)\n\nBelow is a short list of what is possible.\n______________________________________________\n\n\"EVALUATE INTEGERS/FLOATS\" NODE EXPRESSION EXAMPLES:\n\nAddition: a + b + c\nSubtraction: a - b - c\nMultiplication: a * b * c\nDivision: a / b / c\nModulo: a % b % c\nExponentiation: a ** b ** c\nFloor Division: a // b // c\nAbsolute Value: abs(a) + abs(b) + abs(c)\nMaximum: max(a, b, c)\nMinimum: min(a, b, c)\nSum of Squares: a**2 + b**2 + c**2\nBitwise And: a & b & c\nBitwise Or: a | b | c\nBitwise Xor: a ^ b ^ c\nLeft Shift: a << 1 + b << 1 + c << 1\nRight Shift: a >> 1 + b >> 1 + c >> 1\nGreater Than Comparison: a > b > c\nLess Than Comparison: a < b < c\nEqual To Comparison: a == b == c\nNot Equal To Comparison: a != b != c\n______________________________________________\n\n\"EVALUATE STRINGS\" NODE EXPRESSION EXAMPLES:\n\nConcatenate: a + b + c\nFormat: f'{a} {b} {c}'\nLength: len(a) + len(b) + len(c)\nUppercase: a.upper() + b.upper() + c.upper()\nLowercase: a.lower() + b.lower() + c.lower()\nCapitalize: a.capitalize() + b.capitalize() + c.capitalize()\nTitle Case: a.title() + b.title() + c.title()\nStrip: a.strip() + b.strip() + c.strip()\nFind Substring: a.find('sub') + b.find('sub') + c.find('sub')\nReplace Substring: a.replace('old', 'new') + b.replace('old', 'new') + c.replace('old', 'new')\nCount Substring: a.count('sub') + b.count('sub') + c.count('sub')\nCheck Numeric: a.isnumeric() + b.isnumeric() + c.isnumeric()\nCheck Alphabetic: a.isalpha() + b.isalpha() + c.isalpha()\nCheck Alphanumeric: a.isalnum() + b.isalnum() + c.isalnum()\nCheck Start: a.startswith('prefix') + b.startswith('prefix') + c.startswith('prefix')\nCheck End: a.endswith('suffix') + b.endswith('suffix') + c.endswith('suffix')\nSplit: a.split(' ') + b.split(' ') + c.split(' ')\nZero Fill: a.zfill(5) + b.zfill(5) + c.zfill(5)\nSlice: a[:5] + b[:5] + c[:5]\nReverse: a[::-1] + b[::-1] + c[::-1]\n______________________________________________",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "models_text"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Simple Eval Examples",
    "display_name": "Simple Eval Examples",
    "description": "",
    "python_module": "custom_nodes.efficiency-nodes-comfyui",
    "category": "Efficiency Nodes/Simple Eval",
    "output_node": false
  },
  "IPAdapter": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "weight_type": [
          [
            "standard",
            "prompt is more important",
            "style transfer"
          ]
        ]
      },
      "optional": {
        "attn_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "start_at",
        "end_at",
        "weight_type"
      ],
      "optional": [
        "attn_mask"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapter",
    "display_name": "IPAdapter",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter",
    "output_node": false
  },
  "IPAdapterAdvanced": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer"
          ]
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_type",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterAdvanced",
    "display_name": "IPAdapter Advanced",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter",
    "output_node": false
  },
  "IPAdapterBatch": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ],
        "encode_batch_size": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096
          }
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_type",
        "start_at",
        "end_at",
        "embeds_scaling",
        "encode_batch_size"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterBatch",
    "display_name": "IPAdapter Batch (Adv.)",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter",
    "output_node": false
  },
  "IPAdapterFaceID": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_faceidv2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5.0,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer"
          ]
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "insightface": [
          "INSIGHTFACE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_faceidv2",
        "weight_type",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision",
        "insightface"
      ]
    },
    "output": [
      "MODEL",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "face_image"
    ],
    "name": "IPAdapterFaceID",
    "display_name": "IPAdapter FaceID",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/faceid",
    "output_node": false
  },
  "IPAAdapterFaceIDBatch": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_faceidv2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5.0,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer"
          ]
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "insightface": [
          "INSIGHTFACE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_faceidv2",
        "weight_type",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision",
        "insightface"
      ]
    },
    "output": [
      "MODEL",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "face_image"
    ],
    "name": "IPAAdapterFaceIDBatch",
    "display_name": "IPAdapter FaceID Batch",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/faceid",
    "output_node": false
  },
  "IPAdapterTiled": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer"
          ]
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "sharpening": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_type",
        "combine_embeds",
        "start_at",
        "end_at",
        "sharpening",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL",
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "tiles",
      "masks"
    ],
    "name": "IPAdapterTiled",
    "display_name": "IPAdapter Tiled",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/tiled",
    "output_node": false
  },
  "IPAdapterTiledBatch": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "sharpening": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ],
        "encode_batch_size": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096
          }
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_type",
        "start_at",
        "end_at",
        "sharpening",
        "embeds_scaling",
        "encode_batch_size"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL",
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "tiles",
      "masks"
    ],
    "name": "IPAdapterTiledBatch",
    "display_name": "IPAdapter Tiled Batch",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/tiled",
    "output_node": false
  },
  "IPAdapterEmbeds": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "pos_embed": [
          "EMBEDS"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "neg_embed": [
          "EMBEDS"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "pos_embed",
        "weight",
        "weight_type",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "neg_embed",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterEmbeds",
    "display_name": "IPAdapter Embeds",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/embeds",
    "output_node": false
  },
  "IPAdapterEmbedsBatch": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "pos_embed": [
          "EMBEDS"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "neg_embed": [
          "EMBEDS"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "pos_embed",
        "weight",
        "weight_type",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "neg_embed",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterEmbedsBatch",
    "display_name": "IPAdapter Embeds Batch",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/embeds",
    "output_node": false
  },
  "IPAdapterStyleComposition": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image_style": [
          "IMAGE"
        ],
        "image_composition": [
          "IMAGE"
        ],
        "weight_style": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "weight_composition": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "expand_style": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ],
          {
            "default": "average"
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image_style",
        "image_composition",
        "weight_style",
        "weight_composition",
        "expand_style",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterStyleComposition",
    "display_name": "IPAdapter Style & Composition SDXL",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/style_composition",
    "output_node": false
  },
  "IPAdapterStyleCompositionBatch": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image_style": [
          "IMAGE"
        ],
        "image_composition": [
          "IMAGE"
        ],
        "weight_style": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "weight_composition": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "expand_style": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image_style",
        "image_composition",
        "weight_style",
        "weight_composition",
        "expand_style",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterStyleCompositionBatch",
    "display_name": "IPAdapter Style & Composition Batch SDXL",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/style_composition",
    "output_node": false
  },
  "IPAdapterMS": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "weight_faceidv2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5.0,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer"
          ]
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ],
        "layer_weights": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "insightface": [
          "INSIGHTFACE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "image",
        "weight",
        "weight_faceidv2",
        "weight_type",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling",
        "layer_weights"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision",
        "insightface"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterMS",
    "display_name": "IPAdapter Mad Scientist",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/dev",
    "output_node": false
  },
  "IPAdapterFromParams": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "ipadapter_params": [
          "IPADAPTER_PARAMS"
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "ipadapter_params",
        "combine_embeds",
        "embeds_scaling"
      ],
      "optional": [
        "image_negative",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "IPAdapterFromParams",
    "display_name": "IPAdapter from Params",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/params",
    "output_node": false
  },
  "IPAdapterUnifiedLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "preset": [
          [
            "LIGHT - SD1.5 only (low strength)",
            "STANDARD (medium strength)",
            "VIT-G (medium strength)",
            "PLUS (high strength)",
            "PLUS FACE (portraits)",
            "FULL FACE - SD1.5 only (portraits stronger)"
          ]
        ]
      },
      "optional": {
        "ipadapter": [
          "IPADAPTER"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "preset"
      ],
      "optional": [
        "ipadapter"
      ]
    },
    "output": [
      "MODEL",
      "IPADAPTER"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "model",
      "ipadapter"
    ],
    "name": "IPAdapterUnifiedLoader",
    "display_name": "IPAdapter Unified Loader",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter",
    "output_node": false
  },
  "IPAdapterUnifiedLoaderFaceID": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "preset": [
          [
            "FACEID",
            "FACEID PLUS - SD1.5 only",
            "FACEID PLUS V2",
            "FACEID PORTRAIT (style transfer)",
            "FACEID PORTRAIT UNNORM - SDXL only (strong)"
          ]
        ],
        "lora_strength": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "provider": [
          [
            "CPU",
            "CUDA",
            "ROCM",
            "DirectML",
            "OpenVINO",
            "CoreML"
          ]
        ]
      },
      "optional": {
        "ipadapter": [
          "IPADAPTER"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "preset",
        "lora_strength",
        "provider"
      ],
      "optional": [
        "ipadapter"
      ]
    },
    "output": [
      "MODEL",
      "IPADAPTER"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "ipadapter"
    ],
    "name": "IPAdapterUnifiedLoaderFaceID",
    "display_name": "IPAdapter Unified Loader FaceID",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/faceid",
    "output_node": false
  },
  "IPAdapterModelLoader": {
    "input": {
      "required": {
        "ipadapter_file": [
          [
            "ip-adapter-plus_sdxl_vit-h.safetensors",
            "ip-adapter_sdxl.safetensors",
            "ip-adapter_sdxl_vit-h.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ipadapter_file"
      ]
    },
    "output": [
      "IPADAPTER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IPADAPTER"
    ],
    "name": "IPAdapterModelLoader",
    "display_name": "IPAdapter Model Loader",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/loaders",
    "output_node": false
  },
  "IPAdapterInsightFaceLoader": {
    "input": {
      "required": {
        "provider": [
          [
            "CPU",
            "CUDA",
            "ROCM"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "provider"
      ]
    },
    "output": [
      "INSIGHTFACE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INSIGHTFACE"
    ],
    "name": "IPAdapterInsightFaceLoader",
    "display_name": "IPAdapter InsightFace Loader",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/loaders",
    "output_node": false
  },
  "IPAdapterUnifiedLoaderCommunity": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "preset": [
          [
            "Composition"
          ]
        ]
      },
      "optional": {
        "ipadapter": [
          "IPADAPTER"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "preset"
      ],
      "optional": [
        "ipadapter"
      ]
    },
    "output": [
      "MODEL",
      "IPADAPTER"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "model",
      "ipadapter"
    ],
    "name": "IPAdapterUnifiedLoaderCommunity",
    "display_name": "IPAdapter Unified Loader Community",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/loaders",
    "output_node": false
  },
  "IPAdapterEncoder": {
    "input": {
      "required": {
        "ipadapter": [
          "IPADAPTER"
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1.0,
            "max": 3.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "ipadapter",
        "image",
        "weight"
      ],
      "optional": [
        "mask",
        "clip_vision"
      ]
    },
    "output": [
      "EMBEDS",
      "EMBEDS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "pos_embed",
      "neg_embed"
    ],
    "name": "IPAdapterEncoder",
    "display_name": "IPAdapter Encoder",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/embeds",
    "output_node": false
  },
  "IPAdapterCombineEmbeds": {
    "input": {
      "required": {
        "embed1": [
          "EMBEDS"
        ],
        "method": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average",
            "max",
            "min"
          ]
        ]
      },
      "optional": {
        "embed2": [
          "EMBEDS"
        ],
        "embed3": [
          "EMBEDS"
        ],
        "embed4": [
          "EMBEDS"
        ],
        "embed5": [
          "EMBEDS"
        ]
      }
    },
    "input_order": {
      "required": [
        "embed1",
        "method"
      ],
      "optional": [
        "embed2",
        "embed3",
        "embed4",
        "embed5"
      ]
    },
    "output": [
      "EMBEDS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "EMBEDS"
    ],
    "name": "IPAdapterCombineEmbeds",
    "display_name": "IPAdapter Combine Embeds",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/embeds",
    "output_node": false
  },
  "IPAdapterNoise": {
    "input": {
      "required": {
        "type": [
          [
            "fade",
            "dissolve",
            "gaussian",
            "shuffle"
          ]
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ],
        "blur": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 32,
            "step": 1
          }
        ]
      },
      "optional": {
        "image_optional": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "type",
        "strength",
        "blur"
      ],
      "optional": [
        "image_optional"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "IPAdapterNoise",
    "display_name": "IPAdapter Noise",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/utils",
    "output_node": false
  },
  "PrepImageForClipVision": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "interpolation": [
          [
            "LANCZOS",
            "BICUBIC",
            "HAMMING",
            "BILINEAR",
            "BOX",
            "NEAREST"
          ]
        ],
        "crop_position": [
          [
            "top",
            "bottom",
            "left",
            "right",
            "center",
            "pad"
          ]
        ],
        "sharpening": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "interpolation",
        "crop_position",
        "sharpening"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "PrepImageForClipVision",
    "display_name": "Prep Image For ClipVision",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/utils",
    "output_node": false
  },
  "IPAdapterSaveEmbeds": {
    "input": {
      "required": {
        "embeds": [
          "EMBEDS"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "IP_embeds"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "embeds",
        "filename_prefix"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "IPAdapterSaveEmbeds",
    "display_name": "IPAdapter Save Embeds",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/embeds",
    "output_node": true
  },
  "IPAdapterLoadEmbeds": {
    "input": {
      "required": {
        "embeds": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "embeds"
      ]
    },
    "output": [
      "EMBEDS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "EMBEDS"
    ],
    "name": "IPAdapterLoadEmbeds",
    "display_name": "IPAdapter Load Embeds",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/embeds",
    "output_node": false
  },
  "IPAdapterWeights": {
    "input": {
      "required": {
        "weights": [
          "STRING",
          {
            "default": "1.0, 0.0",
            "multiline": true
          }
        ],
        "timing": [
          [
            "custom",
            "linear",
            "ease_in_out",
            "ease_in",
            "ease_out",
            "random"
          ],
          {
            "default": "linear"
          }
        ],
        "frames": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999,
            "step": 1
          }
        ],
        "start_frame": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999,
            "step": 1
          }
        ],
        "end_frame": [
          "INT",
          {
            "default": 9999,
            "min": 0,
            "max": 9999,
            "step": 1
          }
        ],
        "add_starting_frames": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999,
            "step": 1
          }
        ],
        "add_ending_frames": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999,
            "step": 1
          }
        ],
        "method": [
          [
            "full batch",
            "shift batches",
            "alternate batches"
          ],
          {
            "default": "full batch"
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "weights",
        "timing",
        "frames",
        "start_frame",
        "end_frame",
        "add_starting_frames",
        "add_ending_frames",
        "method"
      ],
      "optional": [
        "image"
      ]
    },
    "output": [
      "FLOAT",
      "FLOAT",
      "INT",
      "IMAGE",
      "IMAGE",
      "WEIGHTS_STRATEGY"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "weights",
      "weights_invert",
      "total_frames",
      "image_1",
      "image_2",
      "weights_strategy"
    ],
    "name": "IPAdapterWeights",
    "display_name": "IPAdapter Weights",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/weights",
    "output_node": false
  },
  "IPAdapterCombineWeights": {
    "input": {
      "required": {
        "weights_1": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "weights_2": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "weights_1",
        "weights_2"
      ]
    },
    "output": [
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "weights",
      "count"
    ],
    "name": "IPAdapterCombineWeights",
    "display_name": "IPAdapter Combine Weights",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/utils",
    "output_node": false
  },
  "IPAdapterWeightsFromStrategy": {
    "input": {
      "required": {
        "weights_strategy": [
          "WEIGHTS_STRATEGY"
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "weights_strategy"
      ],
      "optional": [
        "image"
      ]
    },
    "output": [
      "FLOAT",
      "FLOAT",
      "INT",
      "IMAGE",
      "IMAGE",
      "WEIGHTS_STRATEGY"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "weights",
      "weights_invert",
      "total_frames",
      "image_1",
      "image_2",
      "weights_strategy"
    ],
    "name": "IPAdapterWeightsFromStrategy",
    "display_name": "IPAdapter Weights From Strategy",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/weights",
    "output_node": false
  },
  "IPAdapterPromptScheduleFromWeightsStrategy": {
    "input": {
      "required": {
        "weights_strategy": [
          "WEIGHTS_STRATEGY"
        ],
        "prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "weights_strategy",
        "prompt"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "prompt_schedule"
    ],
    "name": "IPAdapterPromptScheduleFromWeightsStrategy",
    "display_name": "Prompt Schedule From Weights Strategy",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/weights",
    "output_node": false
  },
  "IPAdapterRegionalConditioning": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "image_weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1.0,
            "max": 3.0,
            "step": 0.05
          }
        ],
        "prompt_weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "image_weight",
        "prompt_weight",
        "weight_type",
        "start_at",
        "end_at"
      ],
      "optional": [
        "mask",
        "positive",
        "negative"
      ]
    },
    "output": [
      "IPADAPTER_PARAMS",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IPADAPTER_PARAMS",
      "POSITIVE",
      "NEGATIVE"
    ],
    "name": "IPAdapterRegionalConditioning",
    "display_name": "IPAdapter Regional Conditioning",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/params",
    "output_node": false
  },
  "IPAdapterCombineParams": {
    "input": {
      "required": {
        "params_1": [
          "IPADAPTER_PARAMS"
        ],
        "params_2": [
          "IPADAPTER_PARAMS"
        ]
      },
      "optional": {
        "params_3": [
          "IPADAPTER_PARAMS"
        ],
        "params_4": [
          "IPADAPTER_PARAMS"
        ],
        "params_5": [
          "IPADAPTER_PARAMS"
        ]
      }
    },
    "input_order": {
      "required": [
        "params_1",
        "params_2"
      ],
      "optional": [
        "params_3",
        "params_4",
        "params_5"
      ]
    },
    "output": [
      "IPADAPTER_PARAMS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IPADAPTER_PARAMS"
    ],
    "name": "IPAdapterCombineParams",
    "display_name": "IPAdapter Combine Params",
    "description": "",
    "python_module": "custom_nodes.comfyui_ipadapter_plus",
    "category": "ipadapter/params",
    "output_node": false
  },
  "Primitive boolean [Crystools]": {
    "input": {
      "required": {
        "boolean": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "boolean"
    ],
    "name": "Primitive boolean [Crystools]",
    "display_name": "\ud83e\ude9b Primitive boolean",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Primitive",
    "output_node": false
  },
  "Primitive string [Crystools]": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "string"
    ],
    "name": "Primitive string [Crystools]",
    "display_name": "\ud83e\ude9b Primitive string",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Primitive",
    "output_node": false
  },
  "Primitive string multiline [Crystools]": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "string"
    ],
    "name": "Primitive string multiline [Crystools]",
    "display_name": "\ud83e\ude9b Primitive string multiline",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Primitive",
    "output_node": false
  },
  "Primitive integer [Crystools]": {
    "input": {
      "required": {
        "int": [
          "INT",
          {
            "default": 1,
            "min": -9223372036854775807,
            "max": 9223372036854775807,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "int"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "int"
    ],
    "name": "Primitive integer [Crystools]",
    "display_name": "\ud83e\ude9b Primitive integer",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Primitive",
    "output_node": false
  },
  "Primitive float [Crystools]": {
    "input": {
      "required": {
        "float": [
          "FLOAT",
          {
            "default": 1,
            "min": -1.7976931348623157e+308,
            "max": 1.7976931348623157e+308,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "float"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "float"
    ],
    "name": "Primitive float [Crystools]",
    "display_name": "\ud83e\ude9b Primitive float",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Primitive",
    "output_node": false
  },
  "Show any [Crystools]": {
    "input": {
      "required": {},
      "optional": {
        "any_value": [
          "*"
        ],
        "console": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "display": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "prefix": [
          "STRING",
          {
            "default": ""
          }
        ]
      },
      "hidden": {}
    },
    "input_order": {
      "required": [],
      "optional": [
        "any_value",
        "console",
        "display",
        "prefix"
      ],
      "hidden": []
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Show any [Crystools]",
    "display_name": "\ud83e\ude9b Show any value to console/display",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Debugger",
    "output_node": true
  },
  "Show any to JSON [Crystools]": {
    "input": {
      "required": {},
      "optional": {
        "any_value": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "any_value"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "string"
    ],
    "name": "Show any to JSON [Crystools]",
    "display_name": "\ud83e\ude9b Show any to JSON",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Debugger",
    "output_node": true
  },
  "List of any [Crystools]": {
    "input": {
      "required": {},
      "optional": {
        "any_1": [
          "*"
        ],
        "any_2": [
          "*"
        ],
        "any_3": [
          "*"
        ],
        "any_4": [
          "*"
        ],
        "any_5": [
          "*"
        ],
        "any_6": [
          "*"
        ],
        "any_7": [
          "*"
        ],
        "any_8": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "any_1",
        "any_2",
        "any_3",
        "any_4",
        "any_5",
        "any_6",
        "any_7",
        "any_8"
      ]
    },
    "output": [
      [
        "*"
      ]
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "any_list"
    ],
    "name": "List of any [Crystools]",
    "display_name": "\ud83e\ude9b List of any",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/List",
    "output_node": false
  },
  "List of strings [Crystools]": {
    "input": {
      "required": {},
      "optional": {
        "string_1": [
          "STRING",
          {
            "default": ""
          }
        ],
        "string_2": [
          "STRING",
          {
            "default": ""
          }
        ],
        "string_3": [
          "STRING",
          {
            "default": ""
          }
        ],
        "string_4": [
          "STRING",
          {
            "default": ""
          }
        ],
        "string_5": [
          "STRING",
          {
            "default": ""
          }
        ],
        "string_6": [
          "STRING",
          {
            "default": ""
          }
        ],
        "string_7": [
          "STRING",
          {
            "default": ""
          }
        ],
        "string_8": [
          "STRING",
          {
            "default": ""
          }
        ],
        "delimiter": [
          "STRING",
          {
            "default": " "
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "string_1",
        "string_2",
        "string_3",
        "string_4",
        "string_5",
        "string_6",
        "string_7",
        "string_8",
        "delimiter"
      ]
    },
    "output": [
      "STRING",
      "ListString"
    ],
    "output_is_list": [
      false,
      true
    ],
    "output_name": [
      "concatenated",
      "list_string"
    ],
    "name": "List of strings [Crystools]",
    "display_name": "\ud83e\ude9b List of strings",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/List",
    "output_node": false
  },
  "Switch any [Crystools]": {
    "input": {
      "required": {
        "on_true": [
          "*",
          {}
        ],
        "on_false": [
          "*",
          {}
        ],
        "boolean": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "on_true",
        "on_false",
        "boolean"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "Switch any [Crystools]",
    "display_name": "\ud83e\ude9b Switch any",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Switch",
    "output_node": false
  },
  "Switch latent [Crystools]": {
    "input": {
      "required": {
        "on_true": [
          "LATENT"
        ],
        "on_false": [
          "LATENT"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "on_true",
        "on_false",
        "boolean"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "latent"
    ],
    "name": "Switch latent [Crystools]",
    "display_name": "\ud83e\ude9b Switch latent",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Switch",
    "output_node": false
  },
  "Switch conditioning [Crystools]": {
    "input": {
      "required": {
        "on_true": [
          "CONDITIONING"
        ],
        "on_false": [
          "CONDITIONING"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "on_true",
        "on_false",
        "boolean"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "conditioning"
    ],
    "name": "Switch conditioning [Crystools]",
    "display_name": "\ud83e\ude9b Switch conditioning",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Switch",
    "output_node": false
  },
  "Switch image [Crystools]": {
    "input": {
      "required": {
        "on_true": [
          "IMAGE"
        ],
        "on_false": [
          "IMAGE"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "on_true",
        "on_false",
        "boolean"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Switch image [Crystools]",
    "display_name": "\ud83e\ude9b Switch image",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Switch",
    "output_node": false
  },
  "Switch mask [Crystools]": {
    "input": {
      "required": {
        "on_true": [
          "MASK"
        ],
        "on_false": [
          "MASK"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "on_true",
        "on_false",
        "boolean"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "mask"
    ],
    "name": "Switch mask [Crystools]",
    "display_name": "\ud83e\ude9b Switch mask",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Switch",
    "output_node": false
  },
  "Switch string [Crystools]": {
    "input": {
      "required": {
        "on_true": [
          "STRING",
          {
            "default": ""
          }
        ],
        "on_false": [
          "STRING",
          {
            "default": ""
          }
        ],
        "boolean": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "on_true",
        "on_false",
        "boolean"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "string"
    ],
    "name": "Switch string [Crystools]",
    "display_name": "\ud83e\ude9b Switch string",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Switch",
    "output_node": false
  },
  "Pipe to/edit any [Crystools]": {
    "input": {
      "required": {},
      "optional": {
        "CPipeAny": [
          "CPipeAny"
        ],
        "any_1": [
          "*"
        ],
        "any_2": [
          "*"
        ],
        "any_3": [
          "*"
        ],
        "any_4": [
          "*"
        ],
        "any_5": [
          "*"
        ],
        "any_6": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "CPipeAny",
        "any_1",
        "any_2",
        "any_3",
        "any_4",
        "any_5",
        "any_6"
      ]
    },
    "output": [
      "CPipeAny"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CPipeAny"
    ],
    "name": "Pipe to/edit any [Crystools]",
    "display_name": "\ud83e\ude9b Pipe to/edit any",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Pipe",
    "output_node": false
  },
  "Pipe from any [Crystools]": {
    "input": {
      "required": {
        "CPipeAny": [
          "CPipeAny"
        ]
      },
      "optional": {}
    },
    "input_order": {
      "required": [
        "CPipeAny"
      ],
      "optional": []
    },
    "output": [
      "CPipeAny",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CPipeAny",
      "any_1",
      "any_2",
      "any_3",
      "any_4",
      "any_5",
      "any_6"
    ],
    "name": "Pipe from any [Crystools]",
    "display_name": "\ud83e\ude9b Pipe from any",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Pipe",
    "output_node": false
  },
  "Load image with metadata [Crystools]": {
    "input": {
      "required": {
        "image": [
          [
            "1.mp4",
            "1743139954017_TDV72HWXg9.jpeg",
            "1743586696790_gZJJX9pmlv.jpeg",
            "2.jpeg",
            "2.mp4",
            "3.jpeg",
            "3.mp4",
            "4.jpeg",
            "4.mp4",
            "5.mp4",
            "5.png",
            "6.jpeg",
            "6.mp4",
            "WanI2V_Result_00016.mp4",
            "WanI2V_Result_00036.mp4",
            "WanI2V_Result_00056.mp4",
            "bird_input_1.png",
            "example.png",
            "finalVideo_v42_2025-04-03.mp4",
            "pass_2_upscaled_00001_ (1).png",
            "pass_2_upscaled_00001_.png"
          ],
          {
            "image_upload": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "JSON",
      "METADATA_RAW"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "prompt",
      "Metadata RAW"
    ],
    "name": "Load image with metadata [Crystools]",
    "display_name": "\ud83e\ude9b Load image with metadata",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Image",
    "output_node": true
  },
  "Get resolution [Crystools]": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "width",
      "height"
    ],
    "name": "Get resolution [Crystools]",
    "display_name": "\ud83e\ude9b Get resolution",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Image",
    "output_node": true
  },
  "Preview from image [Crystools]": {
    "input": {
      "required": {},
      "optional": {
        "image": [
          "IMAGE"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "image"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "METADATA_RAW"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "Metadata RAW"
    ],
    "name": "Preview from image [Crystools]",
    "display_name": "\ud83e\ude9b Preview from image",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Image",
    "output_node": true
  },
  "Preview from metadata [Crystools]": {
    "input": {
      "required": {},
      "optional": {
        "metadata_raw": [
          "METADATA_RAW",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "metadata_raw"
      ]
    },
    "output": [
      "METADATA_RAW"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "Metadata RAW"
    ],
    "name": "Preview from metadata [Crystools]",
    "display_name": "\ud83e\ude9b Preview from metadata",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Image",
    "output_node": true
  },
  "Save image with extra metadata [Crystools]": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "with_workflow": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "metadata_extra": [
          "STRING",
          {
            "multiline": true,
            "default": "{\n  \"Title\": \"Image generated by Crystian\",\n  \"Description\": \"More info: https:\\/\\/www.instagram.com\\/crystian.ia\",\n  \"Author\": \"crystian.ia\",\n  \"Software\": \"ComfyUI\",\n  \"Category\": \"StableDiffusion\",\n  \"Rating\": 5,\n  \"UserComment\": \"\",\n  \"Keywords\": [\n    \"\"\n  ],\n  \"Copyrights\": \"\"\n}"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "image",
        "filename_prefix",
        "with_workflow"
      ],
      "optional": [
        "metadata_extra"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "METADATA_RAW"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "Metadata RAW"
    ],
    "name": "Save image with extra metadata [Crystools]",
    "display_name": "\ud83e\ude9b Save image with extra metadata",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Image",
    "output_node": true
  },
  "Metadata extractor [Crystools]": {
    "input": {
      "required": {
        "metadata_raw": [
          "METADATA_RAW",
          {
            "forceInput": true
          }
        ]
      },
      "optional": {}
    },
    "input_order": {
      "required": [
        "metadata_raw"
      ],
      "optional": []
    },
    "output": [
      "JSON",
      "JSON",
      "JSON",
      "JSON",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "prompt",
      "workflow",
      "file info",
      "raw to JSON",
      "raw to property",
      "raw to csv"
    ],
    "name": "Metadata extractor [Crystools]",
    "display_name": "\ud83e\ude9b Metadata extractor",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Metadata",
    "output_node": false
  },
  "Metadata comparator [Crystools]": {
    "input": {
      "required": {
        "metadata_raw_old": [
          "METADATA_RAW",
          {
            "forceInput": true
          }
        ],
        "metadata_raw_new": [
          "METADATA_RAW",
          {
            "forceInput": true
          }
        ],
        "what": [
          [
            "Prompt",
            "Workflow",
            "Fileinfo"
          ]
        ]
      },
      "optional": {}
    },
    "input_order": {
      "required": [
        "metadata_raw_old",
        "metadata_raw_new",
        "what"
      ],
      "optional": []
    },
    "output": [
      "JSON"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "diff"
    ],
    "name": "Metadata comparator [Crystools]",
    "display_name": "\ud83e\ude9b Metadata comparator",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Metadata",
    "output_node": true
  },
  "JSON comparator [Crystools]": {
    "input": {
      "required": {
        "json_old": [
          "JSON",
          {
            "forceInput": true
          }
        ],
        "json_new": [
          "JSON",
          {
            "forceInput": true
          }
        ]
      },
      "optional": {}
    },
    "input_order": {
      "required": [
        "json_old",
        "json_new"
      ],
      "optional": []
    },
    "output": [
      "JSON"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "json_compared"
    ],
    "name": "JSON comparator [Crystools]",
    "display_name": "\ud83e\ude9b JSON comparator",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Utils",
    "output_node": true
  },
  "Stats system [Crystools]": {
    "input": {
      "required": {
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "latent"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "latent"
    ],
    "name": "Stats system [Crystools]",
    "display_name": "\ud83e\ude9b Stats system (powered by WAS)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Utils",
    "output_node": false
  },
  "Read JSON file [Crystools]": {
    "input": {
      "required": {},
      "optional": {
        "path_to_json": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "path_to_json"
      ]
    },
    "output": [
      "JSON"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "json"
    ],
    "name": "Read JSON file [Crystools]",
    "display_name": "\ud83e\ude9b Read JSON file (BETA)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Utils",
    "output_node": false
  },
  "JSON extractor [Crystools]": {
    "input": {
      "required": {
        "json": [
          "JSON",
          {
            "forceInput": true
          }
        ]
      },
      "optional": {
        "key": [
          "STRING",
          {
            "default": ""
          }
        ],
        "default": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "json"
      ],
      "optional": [
        "key",
        "default"
      ]
    },
    "output": [
      "*",
      "STRING",
      "INT",
      "FLOAT",
      "BOOLEAN"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "any",
      "string",
      "int",
      "float",
      "boolean"
    ],
    "name": "JSON extractor [Crystools]",
    "display_name": "\ud83e\ude9b JSON extractor (BETA)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Crystools",
    "category": "crystools \ud83e\ude9b/Utils",
    "output_node": false
  },
  "FinalFrameSelector": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FinalFrameSelector",
    "display_name": "Final Frame Selector",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-MediaMixer",
    "category": "\ud83c\udfac\ud83d\udd00MediaMixer",
    "output_node": false
  },
  "FirstFrameSelector": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FirstFrameSelector",
    "display_name": "First Frame Selector",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-MediaMixer",
    "category": "\ud83c\udfac\ud83d\udd00MediaMixer",
    "output_node": false
  },
  "VideoMerge": {
    "input": {
      "required": {
        "Video_A": [
          "IMAGE"
        ],
        "Video_B": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "Video_A",
        "Video_B"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "VideoMerge",
    "display_name": "Video Merge",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-MediaMixer",
    "category": "\ud83c\udfac\ud83d\udd00MediaMixer",
    "output_node": false
  },
  "YouTubeVideoDownloader": {
    "input": {
      "required": {
        "youtube_url": [
          "STRING",
          {
            "default": ""
          }
        ],
        "download_path": [
          "STRING",
          {
            "default": "D:\\ComfyUI_windows_portable\\ComfyUI\\downloads"
          }
        ],
        "resolution": [
          [
            "360p",
            "480p",
            "720p",
            "1080p"
          ],
          {
            "default": "720p"
          }
        ],
        "save_as_mp4": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "audio_only": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "youtube_url",
        "download_path",
        "resolution",
        "save_as_mp4",
        "audio_only"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "video_path",
      "audio_path"
    ],
    "name": "YouTubeVideoDownloader",
    "display_name": "YouTube Video Downloader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-MediaMixer",
    "category": "\ud83c\udfac\ud83d\udd00MediaMixer",
    "output_node": false
  },
  "ReverseFrameSequence": {
    "input": {
      "required": {
        "Images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "Images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ReverseFrameSequence",
    "display_name": "Reverse Frame Sequence",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-MediaMixer",
    "category": "\ud83c\udfac\ud83d\udd00MediaMixer",
    "output_node": false
  },
  "PromptJournal": {
    "input": {
      "required": {
        "prompts": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "prompt_number": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prompts",
        "prompt_number"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "STRING"
    ],
    "name": "PromptJournal",
    "display_name": "Prompt Journal",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-MediaMixer",
    "category": "Text",
    "output_node": false
  },
  "JWImageLoadRGB": {
    "input": {
      "required": {
        "path": [
          "STRING",
          {
            "default": "./image.png"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "path"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageLoadRGB",
    "display_name": "Image Load RGB",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageLoadRGBA": {
    "input": {
      "required": {
        "path": [
          "STRING",
          {
            "default": "./image.png"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "path"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "JWImageLoadRGBA",
    "display_name": "Image Load RGBA",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWLoadImagesFromString": {
    "input": {
      "required": {
        "paths": [
          "STRING",
          {
            "default": "./frame000001.png\n./frame000002.png\n./frame000003.png",
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "ignore_missing_images": [
          [
            "false",
            "true"
          ],
          {
            "default": "false"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "paths",
        "ignore_missing_images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWLoadImagesFromString",
    "display_name": "Load Images From String",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageSaveToPath": {
    "input": {
      "required": {
        "path": [
          "STRING",
          {
            "default": "./image.png"
          }
        ],
        "image": [
          "IMAGE"
        ],
        "overwrite": [
          [
            "false",
            "true"
          ],
          {
            "default": "true"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "path",
        "image",
        "overwrite"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "JWImageSaveToPath",
    "display_name": "Image Save To Path",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": true
  },
  "JWImageExtractFromBatch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "index"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageExtractFromBatch",
    "display_name": "Image Extract From Batch",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageBatchCount": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "JWImageBatchCount",
    "display_name": "Get Image Batch Count",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageResize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "step": 1,
            "max": 99999
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "step": 1,
            "max": 99999
          }
        ],
        "interpolation_mode": [
          [
            "bicubic",
            "bilinear",
            "nearest",
            "nearest exact"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "height",
        "width",
        "interpolation_mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageResize",
    "display_name": "Image Resize",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageFlip": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "direction": [
          [
            "horizontal",
            "vertical"
          ],
          {
            "default": "horizontal"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "direction"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageFlip",
    "display_name": "Image Flip",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWMaskResize": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "step": 1,
            "max": 99999
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "step": 1,
            "max": 99999
          }
        ],
        "interpolation_mode": [
          [
            "bicubic",
            "bilinear",
            "nearest",
            "nearest exact"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "height",
        "width",
        "interpolation_mode"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "JWMaskResize",
    "display_name": "Mask Resize",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWMaskLikeImageSize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "value"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "JWMaskLikeImageSize",
    "display_name": "Mask Like Image Size",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageResizeToSquare": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "size": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "step": 1,
            "max": 99999
          }
        ],
        "interpolation_mode": [
          [
            "bicubic",
            "bilinear",
            "nearest",
            "nearest exact"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "size",
        "interpolation_mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageResizeToSquare",
    "display_name": "Image Resize to Square",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageResizeByFactor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "factor": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "step": 0.01,
            "max": 99999
          }
        ],
        "interpolation_mode": [
          [
            "bicubic",
            "bilinear",
            "nearest",
            "nearest exact"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "factor",
        "interpolation_mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageResizeByFactor",
    "display_name": "Image Resize by Factor",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageResizeByShorterSide": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "size": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "step": 1,
            "max": 99999
          }
        ],
        "interpolation_mode": [
          [
            "bicubic",
            "bilinear",
            "nearest",
            "nearest exact"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "size",
        "interpolation_mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageResizeByShorterSide",
    "display_name": "Image Resize by Shorter Side",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageResizeByLongerSide": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "size": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "step": 1,
            "max": 99999
          }
        ],
        "interpolation_mode": [
          [
            "bicubic",
            "bilinear",
            "nearest",
            "nearest exact"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "size",
        "interpolation_mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageResizeByLongerSide",
    "display_name": "Image Resize by Longer Side",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageResizeToClosestSDXLResolution": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "interpolation_mode": [
          [
            "bicubic",
            "bilinear",
            "nearest",
            "nearest exact"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "interpolation_mode"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "WIDTH",
      "HEIGHT"
    ],
    "name": "JWImageResizeToClosestSDXLResolution",
    "display_name": "Image Resize to Closest SDXL Resolution",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageCropToClosestSDXLResolution": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "interpolation_mode": [
          [
            "bicubic",
            "bilinear",
            "nearest",
            "nearest exact"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "interpolation_mode"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "WIDTH",
      "HEIGHT"
    ],
    "name": "JWImageCropToClosestSDXLResolution",
    "display_name": "Image Crop to Closest SDXL Resolution",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageLoadRGBFromClipboard": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageLoadRGBFromClipboard",
    "display_name": "Image Load RGB From Clipboard",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageLoadRGBA From Clipboard": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "JWImageLoadRGBA From Clipboard",
    "display_name": "Image Load RGBA From Clipboard",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWInteger": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "JWInteger",
    "display_name": "Integer",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWIntegerToFloat": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "JWIntegerToFloat",
    "display_name": "Integer to Float",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWIntegerToString": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "format_string": [
          "STRING",
          {
            "default": "{:04d}",
            "multiline": false,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "format_string"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "JWIntegerToString",
    "display_name": "Integer to String",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWIntegerAdd": {
    "input": {
      "required": {
        "a": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "b": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "JWIntegerAdd",
    "display_name": "Integer Add",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWIntegerSub": {
    "input": {
      "required": {
        "a": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "b": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "JWIntegerSub",
    "display_name": "Integer Subtract",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWIntegerMul": {
    "input": {
      "required": {
        "a": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "b": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "JWIntegerMul",
    "display_name": "Integer Multiply",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWIntegerDiv": {
    "input": {
      "required": {
        "a": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "b": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "JWIntegerDiv",
    "display_name": "Integer Divide",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWIntegerAbsolute": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "JWIntegerAbsolute",
    "display_name": "Integer Absolute Value",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWIntegerMin": {
    "input": {
      "required": {
        "a": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "b": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "JWIntegerMin",
    "display_name": "Integer Minimum",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWIntegerMax": {
    "input": {
      "required": {
        "a": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ],
        "b": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "JWIntegerMax",
    "display_name": "Integer Maximum",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWFloat": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 0,
            "min": -1e+17,
            "max": 1e+17
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "JWFloat",
    "display_name": "Float",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWFloatToInteger": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 0,
            "min": -1e+17,
            "max": 1e+17
          }
        ],
        "mode": [
          [
            "round",
            "floor",
            "ceiling"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "mode"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "JWFloatToInteger",
    "display_name": "Float to Integer",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWFloatToString": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 0,
            "min": -1e+17,
            "max": 1e+17
          }
        ],
        "format_string": [
          "STRING",
          {
            "default": "{:.6g}",
            "multiline": false,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "format_string"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "JWFloatToString",
    "display_name": "Float to String",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWFloatAdd": {
    "input": {
      "required": {
        "a": [
          "FLOAT",
          {
            "default": 0,
            "min": -1e+17,
            "max": 1e+17
          }
        ],
        "b": [
          "FLOAT",
          {
            "default": 0,
            "min": -1e+17,
            "max": 1e+17
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "JWFloatAdd",
    "display_name": "Float Add",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWFloatSub": {
    "input": {
      "required": {
        "a": [
          "FLOAT",
          {
            "default": 0,
            "min": -1e+17,
            "max": 1e+17
          }
        ],
        "b": [
          "FLOAT",
          {
            "default": 0,
            "min": -1e+17,
            "max": 1e+17
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "JWFloatSub",
    "display_name": "Float Subtract",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWFloatMul": {
    "input": {
      "required": {
        "a": [
          "FLOAT",
          {
            "default": 0,
            "min": -1e+17,
            "max": 1e+17
          }
        ],
        "b": [
          "FLOAT",
          {
            "default": 0,
            "min": -1e+17,
            "max": 1e+17
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "JWFloatMul",
    "display_name": "Float Multiply",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWFloatDiv": {
    "input": {
      "required": {
        "a": [
          "FLOAT",
          {
            "default": 0,
            "min": -1e+17,
            "max": 1e+17
          }
        ],
        "b": [
          "FLOAT",
          {
            "default": 0,
            "min": -1e+17,
            "max": 1e+17
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "JWFloatDiv",
    "display_name": "Float Divide",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWFloatAbsolute": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 0,
            "min": -1e+17,
            "max": 1e+17
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "JWFloatAbsolute",
    "display_name": "Float Absolute Value",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWFloatMin": {
    "input": {
      "required": {
        "a": [
          "FLOAT",
          {
            "default": 0,
            "min": -1e+17,
            "max": 1e+17
          }
        ],
        "b": [
          "FLOAT",
          {
            "default": 0,
            "min": -1e+17,
            "max": 1e+17
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "JWFloatMin",
    "display_name": "Float Minimum",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWFloatMax": {
    "input": {
      "required": {
        "a": [
          "FLOAT",
          {
            "default": 0,
            "min": -1e+17,
            "max": 1e+17
          }
        ],
        "b": [
          "FLOAT",
          {
            "default": 0,
            "min": -1e+17,
            "max": 1e+17
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "JWFloatMax",
    "display_name": "Float Maximum",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWString": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "JWString",
    "display_name": "String",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWStringToInteger": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "0",
            "multiline": false,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "JWStringToInteger",
    "display_name": "String to Integer",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWStringToFloat": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "0.0",
            "multiline": false,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "JWStringToFloat",
    "display_name": "String to Float",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWStringMultiline": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "JWStringMultiline",
    "display_name": "String (Multiline)",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWStringConcat": {
    "input": {
      "required": {
        "a": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "dynamicPrompts": false
          }
        ],
        "b": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "JWStringConcat",
    "display_name": "String Concatenate",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWStringReplace": {
    "input": {
      "required": {
        "source": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "dynamicPrompts": false
          }
        ],
        "to_replace": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "dynamicPrompts": false
          }
        ],
        "replace_with": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "source",
        "to_replace",
        "replace_with"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "JWStringReplace",
    "display_name": "String Replace",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWStringSplit": {
    "input": {
      "required": {
        "source": [
          "STRING",
          {
            "default": "a,b",
            "multiline": false,
            "dynamicPrompts": false
          }
        ],
        "split_by": [
          "STRING",
          {
            "default": ",",
            "multiline": false,
            "dynamicPrompts": false
          }
        ],
        "from_right": [
          [
            "false",
            "true"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "source",
        "split_by",
        "from_right"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "STRING",
      "STRING"
    ],
    "name": "JWStringSplit",
    "display_name": "String Split",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWStringGetLine": {
    "input": {
      "required": {
        "source": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "dynamicPrompts": false
          }
        ],
        "line_index": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "source",
        "line_index"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "JWStringGetLine",
    "display_name": "String Get Line",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWStringUnescape": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "JWStringUnescape",
    "display_name": "String Unescape",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "RAFTEstimate": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b"
      ]
    },
    "output": [
      "RAFT_FLOW"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "RAFT_FLOW"
    ],
    "name": "RAFTEstimate",
    "display_name": "RAFT Estimate",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "RAFTFlowToImage": {
    "input": {
      "required": {
        "raft_flow": [
          "RAFT_FLOW"
        ]
      }
    },
    "input_order": {
      "required": [
        "raft_flow"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "RAFTFlowToImage",
    "display_name": "RAFT Flow to Image",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "RAFTLoadFlowFromEXRChannels": {
    "input": {
      "required": {
        "path": [
          "STRING",
          {
            "default": ""
          }
        ],
        "x_channel": [
          [
            "R",
            "G",
            "B",
            "A"
          ],
          {
            "default": "R"
          }
        ],
        "y_channel": [
          [
            "R",
            "G",
            "B",
            "A"
          ],
          {
            "default": "G"
          }
        ],
        "invert_x": [
          [
            "false",
            "true"
          ],
          {
            "default": "true"
          }
        ],
        "invert_y": [
          [
            "false",
            "true"
          ],
          {
            "default": "false"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "path",
        "x_channel",
        "y_channel",
        "invert_x",
        "invert_y"
      ]
    },
    "output": [
      "RAFT_FLOW"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "RAFT_FLOW"
    ],
    "name": "RAFTLoadFlowFromEXRChannels",
    "display_name": "RAFT Load Flow from EXR Channels",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageStackChannels": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageStackChannels",
    "display_name": "Image Stack Channels",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageMix": {
    "input": {
      "required": {
        "blend_type": [
          [
            "mix",
            "multiply"
          ],
          {
            "default": "mix"
          }
        ],
        "factor": [
          "FLOAT",
          {
            "min": 0,
            "max": 1,
            "step": 0.01,
            "default": 0.5
          }
        ],
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "blend_type",
        "factor",
        "image_a",
        "image_b"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageMix",
    "display_name": "Image Mix",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageContrast": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 2.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "factor"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageContrast",
    "display_name": "Image Contrast",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageSaturation": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 2.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "factor"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageSaturation",
    "display_name": "Image Saturation",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageLevels": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "min": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "max": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "min",
        "max"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageLevels",
    "display_name": "Image Levels",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWDatetimeString": {
    "input": {
      "required": {
        "format": [
          "STRING",
          {
            "default": "%Y-%m-%dT%H:%M:%S"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "format"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "JWDatetimeString",
    "display_name": "Datetime String",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWLoadImageSequence": {
    "input": {
      "required": {
        "path_pattern": [
          "STRING",
          {
            "default": "./frame{:06d}.png",
            "multiline": false
          }
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "frame_count": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "step": 1
          }
        ],
        "ignore_missing_images": [
          [
            "false",
            "true"
          ],
          {
            "default": "false"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "path_pattern",
        "start_index",
        "frame_count",
        "ignore_missing_images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWLoadImageSequence",
    "display_name": "Batch Load Image Sequence",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWLoadImageSequenceWithStopIndex": {
    "input": {
      "required": {
        "path_pattern": [
          "STRING",
          {
            "default": "./frame{:06d}.png",
            "multiline": false
          }
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1,
            "max": 999999
          }
        ],
        "stop_index": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "step": 1,
            "max": 999999
          }
        ],
        "inclusive": [
          [
            "false",
            "true"
          ],
          {
            "default": "false"
          }
        ],
        "ignore_missing_images": [
          [
            "false",
            "true"
          ],
          {
            "default": "false"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "path_pattern",
        "start_index",
        "stop_index",
        "inclusive",
        "ignore_missing_images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWLoadImageSequenceWithStopIndex",
    "display_name": "Batch Load Image Sequence With Stop Index",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageSequenceExtractFromBatch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "i_start": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "i_stop": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "inclusive": [
          [
            "false",
            "true"
          ],
          {
            "default": "false"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "i_start",
        "i_stop",
        "inclusive"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageSequenceExtractFromBatch",
    "display_name": "Extract Image Sequence From Batch",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWSaveImageSequence": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "path_pattern": [
          "STRING",
          {
            "default": "./frame{:06d}.png",
            "multiline": false
          }
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "overwrite": [
          [
            "false",
            "true"
          ],
          {
            "default": "true"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "path_pattern",
        "start_index",
        "overwrite"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "JWSaveImageSequence",
    "display_name": "Batch Save Image Sequence",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": true
  },
  "JWLoopImageSequence": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "target_frames": [
          "INT",
          {
            "default": 16,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "target_frames"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWLoopImageSequence",
    "display_name": "Loop Image Sequence",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWMaskSequenceFromMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "batch_size"
      ]
    },
    "output": [
      "MASK_SEQUENCE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK_SEQUENCE"
    ],
    "name": "JWMaskSequenceFromMask",
    "display_name": "Mask Sequence From Mask",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWMaskSequenceJoin": {
    "input": {
      "required": {
        "mask_sequence_1": [
          "MASK_SEQUENCE"
        ],
        "mask_sequence_2": [
          "MASK_SEQUENCE"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask_sequence_1",
        "mask_sequence_2"
      ]
    },
    "output": [
      "MASK_SEQUENCE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK_SEQUENCE"
    ],
    "name": "JWMaskSequenceJoin",
    "display_name": "Join Mask Sequence",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWMaskSequenceApplyToLatent": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "mask_sequence": [
          "MASK_SEQUENCE"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "mask_sequence"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "JWMaskSequenceApplyToLatent",
    "display_name": "Apply Mask Sequence to Latent",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWImageLoadRGBIfExists": {
    "input": {
      "required": {
        "default": [
          "IMAGE"
        ],
        "path": [
          "STRING",
          {
            "default": "./image.png"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "default",
        "path"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "JWImageLoadRGBIfExists",
    "display_name": "Image Load RGB If Exists",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWLoadAudio": {
    "input": {
      "required": {
        "path": [
          "STRING",
          {
            "default": "./audio.mp3"
          }
        ],
        "gain_db": [
          "FLOAT",
          {
            "default": 0,
            "min": -100,
            "max": 100
          }
        ],
        "offset_seconds": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1e+17
          }
        ],
        "duration_seconds": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1e+17
          }
        ],
        "resample_to_hz": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1e+17
          }
        ],
        "make_stereo": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "path",
        "gain_db",
        "offset_seconds",
        "duration_seconds",
        "resample_to_hz",
        "make_stereo"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "AUDIO"
    ],
    "name": "JWLoadAudio",
    "display_name": "Audio Load",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWAudioBlend": {
    "input": {
      "required": {
        "a": [
          "AUDIO"
        ],
        "b": [
          "AUDIO"
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0
          }
        ],
        "if_durations_differ": [
          [
            "use_longest",
            "use_shortest"
          ],
          {
            "default": "use_longest"
          }
        ],
        "if_samplerates_differ": [
          [
            "use_highest",
            "use_lowest"
          ],
          {
            "default": "use_highest"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b",
        "ratio",
        "if_durations_differ",
        "if_samplerates_differ"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "AUDIO"
    ],
    "name": "JWAudioBlend",
    "display_name": "Audio Blend",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": false
  },
  "JWAudioSaveToPath": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ],
        "path": [
          "STRING",
          {
            "default": "./audio.mp3"
          }
        ],
        "overwrite": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "audio",
        "path",
        "overwrite"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "JWAudioSaveToPath",
    "display_name": "Audio Save to Path",
    "description": "",
    "python_module": "custom_nodes.comfyui-various",
    "category": "jamesWalker55",
    "output_node": true
  },
  "Mask By Text": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "prompt": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "precision": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "normalize": [
          [
            "no",
            "yes"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "prompt",
        "negative_prompt",
        "precision",
        "normalize"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "thresholded_mask",
      "raw_mask"
    ],
    "name": "Mask By Text",
    "display_name": "Mask By Text",
    "description": "",
    "python_module": "custom_nodes.masquerade-nodes-comfyui",
    "category": "Masquerade Nodes",
    "output_node": false
  },
  "Mask Morphology": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "distance": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 128,
            "step": 1
          }
        ],
        "op": [
          [
            "dilate",
            "erode",
            "open",
            "close"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "distance",
        "op"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Mask Morphology",
    "display_name": "Mask Morphology",
    "description": "",
    "python_module": "custom_nodes.masquerade-nodes-comfyui",
    "category": "Masquerade Nodes",
    "output_node": false
  },
  "Combine Masks": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "op": [
          [
            "union (max)",
            "intersection (min)",
            "difference",
            "multiply",
            "multiply_alpha",
            "add",
            "greater_or_equal",
            "greater"
          ]
        ],
        "clamp_result": [
          [
            "yes",
            "no"
          ]
        ],
        "round_result": [
          [
            "no",
            "yes"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2",
        "op",
        "clamp_result",
        "round_result"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Combine Masks",
    "display_name": "Combine Masks",
    "description": "",
    "python_module": "custom_nodes.masquerade-nodes-comfyui",
    "category": "Masquerade Nodes",
    "output_node": false
  },
  "Unary Mask Op": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "op": [
          [
            "invert",
            "average",
            "round",
            "clamp",
            "abs"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "op"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Unary Mask Op",
    "display_name": "Unary Mask Op",
    "description": "",
    "python_module": "custom_nodes.masquerade-nodes-comfyui",
    "category": "Masquerade Nodes",
    "output_node": false
  },
  "Unary Image Op": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "op": [
          [
            "invert",
            "average",
            "round",
            "clamp",
            "abs"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "op"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Unary Image Op",
    "display_name": "Unary Image Op",
    "description": "",
    "python_module": "custom_nodes.masquerade-nodes-comfyui",
    "category": "Masquerade Nodes",
    "output_node": false
  },
  "Blur": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "radius": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 48,
            "step": 1
          }
        ],
        "sigma_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 3.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "radius",
        "sigma_factor"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Blur",
    "display_name": "Blur",
    "description": "",
    "python_module": "custom_nodes.masquerade-nodes-comfyui",
    "category": "Masquerade Nodes",
    "output_node": false
  },
  "Image To Mask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "method": [
          [
            "intensity",
            "alpha"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "method"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "Image To Mask",
    "display_name": "Image To Mask",
    "description": "",
    "python_module": "custom_nodes.masquerade-nodes-comfyui",
    "category": "Masquerade Nodes",
    "output_node": false
  },
  "Mix Images By Mask": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "mask": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2",
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Mix Images By Mask",
    "display_name": "Mix Images By Mask",
    "description": "",
    "python_module": "custom_nodes.masquerade-nodes-comfyui",
    "category": "Masquerade Nodes",
    "output_node": false
  },
  "Mix Color By Mask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "r": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "g": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "b": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "mask": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "r",
        "g",
        "b",
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Mix Color By Mask",
    "display_name": "Mix Color By Mask",
    "description": "",
    "python_module": "custom_nodes.masquerade-nodes-comfyui",
    "category": "Masquerade Nodes",
    "output_node": false
  },
  "Mask To Region": {
    "input": {
      "required": {
        "mask": [
          "IMAGE"
        ],
        "padding": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1048576,
            "step": 1
          }
        ],
        "constraints": [
          [
            "keep_ratio",
            "keep_ratio_divisible",
            "multiple_of",
            "ignore"
          ]
        ],
        "constraint_x": [
          "INT",
          {
            "default": 64,
            "min": 2,
            "max": 1048576,
            "step": 1
          }
        ],
        "constraint_y": [
          "INT",
          {
            "default": 64,
            "min": 2,
            "max": 1048576,
            "step": 1
          }
        ],
        "min_width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1048576,
            "step": 1
          }
        ],
        "min_height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1048576,
            "step": 1
          }
        ],
        "batch_behavior": [
          [
            "match_ratio",
            "match_size"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "padding",
        "constraints",
        "constraint_x",
        "constraint_y",
        "min_width",
        "min_height",
        "batch_behavior"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Mask To Region",
    "display_name": "Mask To Region",
    "description": "",
    "python_module": "custom_nodes.masquerade-nodes-comfyui",
    "category": "Masquerade Nodes",
    "output_node": false
  },
  "Cut By Mask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "IMAGE"
        ],
        "force_resize_width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1048576,
            "step": 1
          }
        ],
        "force_resize_height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1048576,
            "step": 1
          }
        ]
      },
      "optional": {
        "mask_mapping_optional": [
          "MASK_MAPPING"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask",
        "force_resize_width",
        "force_resize_height"
      ],
      "optional": [
        "mask_mapping_optional"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Cut By Mask",
    "display_name": "Cut By Mask",
    "description": "",
    "python_module": "custom_nodes.masquerade-nodes-comfyui",
    "category": "Masquerade Nodes",
    "output_node": false
  },
  "Paste By Mask": {
    "input": {
      "required": {
        "image_base": [
          "IMAGE"
        ],
        "image_to_paste": [
          "IMAGE"
        ],
        "mask": [
          "IMAGE"
        ],
        "resize_behavior": [
          [
            "resize",
            "keep_ratio_fill",
            "keep_ratio_fit",
            "source_size",
            "source_size_unmasked"
          ]
        ]
      },
      "optional": {
        "mask_mapping_optional": [
          "MASK_MAPPING"
        ]
      }
    },
    "input_order": {
      "required": [
        "image_base",
        "image_to_paste",
        "mask",
        "resize_behavior"
      ],
      "optional": [
        "mask_mapping_optional"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Paste By Mask",
    "display_name": "Paste By Mask",
    "description": "",
    "python_module": "custom_nodes.masquerade-nodes-comfyui",
    "category": "Masquerade Nodes",
    "output_node": false
  },
  "Get Image Size": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "width",
      "height"
    ],
    "name": "Get Image Size",
    "display_name": "Get Image Size",
    "description": "",
    "python_module": "custom_nodes.masquerade-nodes-comfyui",
    "category": "Masquerade Nodes",
    "output_node": false
  },
  "Change Channel Count": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "kind": [
          [
            "mask",
            "RGB",
            "RGBA"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "kind"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Change Channel Count",
    "display_name": "Change Channel Count",
    "description": "",
    "python_module": "custom_nodes.masquerade-nodes-comfyui",
    "category": "Masquerade Nodes",
    "output_node": false
  },
  "Constant Mask": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -8.0,
            "max": 8.0,
            "step": 0.01
          }
        ],
        "explicit_height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1048576,
            "step": 1
          }
        ],
        "explicit_width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1048576,
            "step": 1
          }
        ]
      },
      "optional": {
        "copy_image_size": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "explicit_height",
        "explicit_width"
      ],
      "optional": [
        "copy_image_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Constant Mask",
    "display_name": "Constant Mask",
    "description": "",
    "python_module": "custom_nodes.masquerade-nodes-comfyui",
    "category": "Masquerade Nodes",
    "output_node": false
  },
  "Prune By Mask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Prune By Mask",
    "display_name": "Prune By Mask",
    "description": "",
    "python_module": "custom_nodes.masquerade-nodes-comfyui",
    "category": "Masquerade Nodes",
    "output_node": false
  },
  "Separate Mask Components": {
    "input": {
      "required": {
        "mask": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask"
      ]
    },
    "output": [
      "IMAGE",
      "MASK_MAPPING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "mask",
      "mask_mappings"
    ],
    "name": "Separate Mask Components",
    "display_name": "Separate Mask Components",
    "description": "",
    "python_module": "custom_nodes.masquerade-nodes-comfyui",
    "category": "Masquerade Nodes",
    "output_node": false
  },
  "Create Rect Mask": {
    "input": {
      "required": {
        "mode": [
          [
            "percent",
            "pixels"
          ]
        ],
        "origin": [
          [
            "topleft",
            "bottomleft",
            "topright",
            "bottomright"
          ]
        ],
        "x": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1048576,
            "step": 1
          }
        ],
        "y": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1048576,
            "step": 1
          }
        ],
        "width": [
          "FLOAT",
          {
            "default": 50,
            "min": 0,
            "max": 1048576,
            "step": 1
          }
        ],
        "height": [
          "FLOAT",
          {
            "default": 50,
            "min": 0,
            "max": 1048576,
            "step": 1
          }
        ],
        "image_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 1048576,
            "step": 64
          }
        ],
        "image_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 1048576,
            "step": 64
          }
        ]
      },
      "optional": {
        "copy_image_size": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "origin",
        "x",
        "y",
        "width",
        "height",
        "image_width",
        "image_height"
      ],
      "optional": [
        "copy_image_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Create Rect Mask",
    "display_name": "Create Rect Mask",
    "description": "",
    "python_module": "custom_nodes.masquerade-nodes-comfyui",
    "category": "Masquerade Nodes",
    "output_node": false
  },
  "Make Image Batch": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ]
      },
      "optional": {
        "image2": [
          "IMAGE"
        ],
        "image3": [
          "IMAGE"
        ],
        "image4": [
          "IMAGE"
        ],
        "image5": [
          "IMAGE"
        ],
        "image6": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image1"
      ],
      "optional": [
        "image2",
        "image3",
        "image4",
        "image5",
        "image6"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Make Image Batch",
    "display_name": "Make Image Batch",
    "description": "",
    "python_module": "custom_nodes.masquerade-nodes-comfyui",
    "category": "Masquerade Nodes",
    "output_node": false
  },
  "Create QR Code": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "size": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 64
          }
        ],
        "qr_version": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 40,
            "step": 1
          }
        ],
        "error_correction": [
          [
            "L",
            "M",
            "Q",
            "H"
          ],
          {
            "default": "H"
          }
        ],
        "box_size": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ],
        "border": [
          "INT",
          {
            "default": 4,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "size",
        "qr_version",
        "error_correction",
        "box_size",
        "border"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Create QR Code",
    "display_name": "Create QR Code",
    "description": "",
    "python_module": "custom_nodes.masquerade-nodes-comfyui",
    "category": "Masquerade Nodes",
    "output_node": false
  },
  "Convert Color Space": {
    "input": {
      "required": {
        "in_space": [
          [
            "RGB",
            "HSV",
            "HSL"
          ]
        ],
        "out_space": [
          [
            "RGB",
            "HSV",
            "HSL"
          ]
        ],
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "in_space",
        "out_space",
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Convert Color Space",
    "display_name": "Convert Color Space",
    "description": "",
    "python_module": "custom_nodes.masquerade-nodes-comfyui",
    "category": "Masquerade Nodes",
    "output_node": false
  },
  "MasqueradeIncrementer": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": -1,
            "max": 18446744073709551615,
            "step": 1
          }
        ],
        "max_value": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 18446744073709551615,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed",
        "max_value"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "MasqueradeIncrementer",
    "display_name": "Incrementer",
    "description": "",
    "python_module": "custom_nodes.masquerade-nodes-comfyui",
    "category": "Masquerade Nodes",
    "output_node": false
  },
  "UltimateSDUpscale": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "upscale_by": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.05,
            "max": 4,
            "step": 0.05
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "step": 1
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "upscale_model": [
          "UPSCALE_MODEL"
        ],
        "mode_type": [
          [
            "Linear",
            "Chess",
            "None"
          ]
        ],
        "tile_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "tile_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "mask_blur": [
          "INT",
          {
            "default": 8,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ],
        "tile_padding": [
          "INT",
          {
            "default": 32,
            "min": 0,
            "max": 8192,
            "step": 8
          }
        ],
        "seam_fix_mode": [
          [
            "None",
            "Band Pass",
            "Half Tile",
            "Half Tile + Intersections"
          ]
        ],
        "seam_fix_denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "seam_fix_width": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 8192,
            "step": 8
          }
        ],
        "seam_fix_mask_blur": [
          "INT",
          {
            "default": 8,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ],
        "seam_fix_padding": [
          "INT",
          {
            "default": 16,
            "min": 0,
            "max": 8192,
            "step": 8
          }
        ],
        "force_uniform_tiles": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "tiled_decode": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "model",
        "positive",
        "negative",
        "vae",
        "upscale_by",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "upscale_model",
        "mode_type",
        "tile_width",
        "tile_height",
        "mask_blur",
        "tile_padding",
        "seam_fix_mode",
        "seam_fix_denoise",
        "seam_fix_width",
        "seam_fix_mask_blur",
        "seam_fix_padding",
        "force_uniform_tiles",
        "tiled_decode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "UltimateSDUpscale",
    "display_name": "Ultimate SD Upscale",
    "description": "",
    "python_module": "custom_nodes.comfyui_ultimatesdupscale",
    "category": "image/upscaling",
    "output_node": false
  },
  "UltimateSDUpscaleNoUpscale": {
    "input": {
      "required": {
        "upscaled_image": [
          "IMAGE"
        ],
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "step": 1
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "mode_type": [
          [
            "Linear",
            "Chess",
            "None"
          ]
        ],
        "tile_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "tile_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "mask_blur": [
          "INT",
          {
            "default": 8,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ],
        "tile_padding": [
          "INT",
          {
            "default": 32,
            "min": 0,
            "max": 8192,
            "step": 8
          }
        ],
        "seam_fix_mode": [
          [
            "None",
            "Band Pass",
            "Half Tile",
            "Half Tile + Intersections"
          ]
        ],
        "seam_fix_denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "seam_fix_width": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 8192,
            "step": 8
          }
        ],
        "seam_fix_mask_blur": [
          "INT",
          {
            "default": 8,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ],
        "seam_fix_padding": [
          "INT",
          {
            "default": 16,
            "min": 0,
            "max": 8192,
            "step": 8
          }
        ],
        "force_uniform_tiles": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "tiled_decode": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "upscaled_image",
        "model",
        "positive",
        "negative",
        "vae",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "mode_type",
        "tile_width",
        "tile_height",
        "mask_blur",
        "tile_padding",
        "seam_fix_mode",
        "seam_fix_denoise",
        "seam_fix_width",
        "seam_fix_mask_blur",
        "seam_fix_padding",
        "force_uniform_tiles",
        "tiled_decode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "UltimateSDUpscaleNoUpscale",
    "display_name": "Ultimate SD Upscale (No Upscale)",
    "description": "",
    "python_module": "custom_nodes.comfyui_ultimatesdupscale",
    "category": "image/upscaling",
    "output_node": false
  },
  "UltimateSDUpscaleCustomSample": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "upscale_by": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.05,
            "max": 4,
            "step": 0.05
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "step": 1
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "mode_type": [
          [
            "Linear",
            "Chess",
            "None"
          ]
        ],
        "tile_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "tile_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "mask_blur": [
          "INT",
          {
            "default": 8,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ],
        "tile_padding": [
          "INT",
          {
            "default": 32,
            "min": 0,
            "max": 8192,
            "step": 8
          }
        ],
        "seam_fix_mode": [
          [
            "None",
            "Band Pass",
            "Half Tile",
            "Half Tile + Intersections"
          ]
        ],
        "seam_fix_denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "seam_fix_width": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 8192,
            "step": 8
          }
        ],
        "seam_fix_mask_blur": [
          "INT",
          {
            "default": 8,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ],
        "seam_fix_padding": [
          "INT",
          {
            "default": 16,
            "min": 0,
            "max": 8192,
            "step": 8
          }
        ],
        "force_uniform_tiles": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "tiled_decode": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "upscale_model": [
          "UPSCALE_MODEL"
        ],
        "custom_sampler": [
          "SAMPLER"
        ],
        "custom_sigmas": [
          "SIGMAS"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "model",
        "positive",
        "negative",
        "vae",
        "upscale_by",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "mode_type",
        "tile_width",
        "tile_height",
        "mask_blur",
        "tile_padding",
        "seam_fix_mode",
        "seam_fix_denoise",
        "seam_fix_width",
        "seam_fix_mask_blur",
        "seam_fix_padding",
        "force_uniform_tiles",
        "tiled_decode"
      ],
      "optional": [
        "upscale_model",
        "custom_sampler",
        "custom_sigmas"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "UltimateSDUpscaleCustomSample",
    "display_name": "Ultimate SD Upscale (Custom Sample)",
    "description": "",
    "python_module": "custom_nodes.comfyui_ultimatesdupscale",
    "category": "image/upscaling",
    "output_node": false
  },
  "easy showLoaderSettingsNames": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "pipe"
      ],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "ckpt_name",
      "vae_name",
      "lora_name"
    ],
    "name": "easy showLoaderSettingsNames",
    "display_name": "Show Loader Settings Names",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Util",
    "output_node": true
  },
  "easy sliderControl": {
    "input": {
      "required": {
        "mode": [
          [
            "ipadapter layer weights"
          ]
        ],
        "model_type": [
          [
            "sdxl",
            "sd1"
          ]
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "mode",
        "model_type"
      ],
      "hidden": [
        "prompt",
        "my_unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "layer_weights"
    ],
    "name": "easy sliderControl",
    "display_name": "Easy Slider Control",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Util",
    "output_node": false
  },
  "easy ckptNames": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "ckpt_name"
    ],
    "name": "easy ckptNames",
    "display_name": "Ckpt Names",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Util",
    "output_node": false
  },
  "easy controlnetNames": {
    "input": {
      "required": {
        "controlnet_name": [
          [
            "SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "controlnet_name"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "controlnet_name"
    ],
    "name": "easy controlnetNames",
    "display_name": "ControlNet Names",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Util",
    "output_node": false
  },
  "easy seed": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "seed"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "seed"
    ],
    "name": "easy seed",
    "display_name": "EasySeed",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Seed",
    "output_node": false
  },
  "easy globalSeed": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ],
        "mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "control_before_generate",
            "label_off": "control_after_generate"
          }
        ],
        "action": [
          [
            "fixed",
            "increment",
            "decrement",
            "randomize",
            "increment for each node",
            "decrement for each node",
            "randomize for each node"
          ]
        ],
        "last_seed": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "mode",
        "action",
        "last_seed"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "easy globalSeed",
    "display_name": "EasyGlobalSeed",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Seed",
    "output_node": true
  },
  "easy positive": {
    "input": {
      "required": {
        "positive": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "placeholder": "Positive"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "positive"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "positive"
    ],
    "name": "easy positive",
    "display_name": "Positive",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Prompt",
    "output_node": false
  },
  "easy negative": {
    "input": {
      "required": {
        "negative": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "placeholder": "Negative"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "negative"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "negative"
    ],
    "name": "easy negative",
    "display_name": "Negative",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Prompt",
    "output_node": false
  },
  "easy wildcards": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "dynamicPrompts": false,
            "placeholder": "(Support Lora Block Weight and wildcard)"
          }
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text"
          ]
        ],
        "Select to add Wildcard": [
          [
            "Select the Wildcard to add to the text",
            "__example__"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ],
        "multiline_mode": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "text",
        "Select to add LoRA",
        "Select to add Wildcard",
        "seed",
        "multiline_mode"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      true,
      true
    ],
    "output_name": [
      "text",
      "populated_text"
    ],
    "name": "easy wildcards",
    "display_name": "Wildcards",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Prompt",
    "output_node": false
  },
  "easy prompt": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "placeholder": "Prompt"
          }
        ],
        "prefix": [
          [
            "Select the prefix add to the text",
            "Detailed photo of",
            "Amateur photo of",
            "Flicker 2008 photo of",
            "Fantastic artwork of",
            "Vintage photograph of",
            "Unreal 5 render of",
            "Surrealist painting of",
            "Professional advertising design of"
          ],
          {
            "default": "Select the prefix add to the text"
          }
        ],
        "subject": [
          [
            "\ud83d\udc64Select the subject add to the text",
            "a man",
            "a woman",
            "a young man",
            "a young woman",
            "a handsome man",
            "a beautiful woman",
            "a monster",
            "a toy",
            "a product",
            "a buddha",
            "a dog",
            "a cat"
          ],
          {
            "default": "\ud83d\udc64Select the subject add to the text"
          }
        ],
        "action": [
          [
            "\ud83c\udfacSelect the action add to the text",
            "looking at viewer",
            "looking away",
            "looking up",
            "looking down",
            "looking back",
            "open mouth",
            "half-closed mouth",
            "closed mouth",
            "open eyes",
            "half-closed eyes",
            "closed eyes",
            "wink",
            "standing",
            "sitting",
            "lying",
            "walking",
            "running",
            "adjusting hair",
            "waving",
            "hand on hip",
            "crossed arms",
            "smile",
            "sad",
            "angry",
            "sleepy",
            "tired",
            "expressionless"
          ],
          {
            "default": "\ud83c\udfacSelect the action add to the text"
          }
        ],
        "clothes": [
          [
            "\ud83d\udc5aSelect the clothes add to the text",
            "underwear",
            "clothed",
            "casual",
            "dress",
            "swimsuit",
            "uniform",
            "bikini",
            "one-piece swimsuit",
            "shirt",
            "blouse",
            "sweater",
            "hoodie",
            "jeans",
            "pants",
            "shorts",
            "skirt",
            "vest",
            "coat",
            "trenchoat",
            "jacket",
            "short dress",
            "long dress",
            "off-shoulder",
            "backless",
            "hairbow",
            "hair ribbon",
            "hair tie",
            "hairband",
            "cap",
            "beanie",
            "bucket hat",
            "sun hat",
            "straw hat",
            "rice hat",
            "witch hat",
            "crown",
            "chain necklace",
            "tooth necklace",
            "choker",
            "pendant",
            "bracelet",
            "watch",
            "ring",
            "earring",
            "anklet",
            "belt",
            "scarf",
            "gloves",
            "mittens",
            "socks",
            "stockings",
            "tights",
            "leggings",
            "boots",
            "sneakers",
            "heels",
            "sandals",
            "flip-flops",
            "slippers",
            "loafers",
            "mules",
            "oxfords",
            "brogues",
            "derbies",
            "monk shoes",
            "chelsea boots",
            "combat boots",
            "riding boots",
            "rain boots",
            "wedge heels",
            "platform heels",
            "stilettos",
            "block heels",
            "kitten heels",
            "moccasins",
            "espadrilles",
            "pumps",
            "flats",
            "ballet flats",
            "mary janes",
            "slingbacks",
            "peep-toe",
            "mule sandals",
            "gladiator sandals",
            "thong sandals",
            "slide sandals",
            "espadrille sandals",
            "wedge sandals",
            "platform sandals",
            "ankle boots",
            "knee-high boots",
            "over-the-knee boots",
            "thigh-high boots",
            "wellington boots",
            "chukka boots",
            "desert boots",
            "chelsea boots",
            "hiking boots",
            "work boots",
            "snow boots",
            "rain boots",
            "riding boots",
            "cowboy boots",
            "combat boots",
            "biker boots",
            "duck boots",
            "military boots",
            "western boots",
            "ankle strap heels",
            "block heels",
            "chunky heels",
            "cone heels",
            "kitten heels",
            "platform heels",
            "pumps",
            "slingback heels",
            "stiletto heels",
            "wedge heels",
            "mules",
            "slingbacks",
            "slides",
            "thong sandals",
            "gladiator sandals",
            "espadrilles",
            "wedge sandals",
            "platform sandals",
            "ankle boots",
            "knee-high boots",
            "over-the-knee boots",
            "thigh-high boots",
            "wellington boots",
            "chukka boots",
            "desert boots",
            "chelsea boots",
            "hiking boots",
            "work boots",
            "snow boots",
            "rain boots",
            "riding boots",
            "cowboy boots",
            "combat boots",
            "biker boots",
            "duck boots",
            "military boots",
            "western boots",
            "ankle strap heels",
            "block heels"
          ],
          {
            "default": "\ud83d\udc5aSelect the clothes add to the text"
          }
        ],
        "environment": [
          [
            "\u2600\ufe0fSelect the illumination environment add to the text",
            "sunshine from window",
            "neon night, city",
            "sunset over sea",
            "golden time",
            "sci-fi RGB glowing, cyberpunk",
            "natural lighting",
            "warm atmosphere, at home, bedroom",
            "magic lit",
            "evil, gothic, in a cave",
            "light and shadow",
            "shadow from window",
            "soft studio lighting",
            "home atmosphere, cozy bedroom illumination",
            "neon, Wong Kar-wai, warm",
            "moonlight through curtains",
            "stormy sky lighting",
            "underwater glow, deep sea",
            "foggy forest at dawn",
            "golden hour in a meadow",
            "rainbow reflections, neon",
            "cozy candlelight",
            "apocalyptic, smoky atmosphere",
            "red glow, emergency lights",
            "mystical glow, enchanted forest",
            "campfire light",
            "harsh, industrial lighting",
            "sunrise in the mountains",
            "evening glow in the desert",
            "moonlight in a dark alley",
            "golden glow at a fairground",
            "midnight in the forest",
            "purple and pink hues at twilight",
            "foggy morning, muted light",
            "candle-lit room, rustic vibe",
            "fluorescent office lighting",
            "lightning flash in storm",
            "night, cozy warm light from fireplace",
            "ethereal glow, magical forest",
            "dusky evening on a beach",
            "afternoon light filtering through trees",
            "blue neon light, urban street",
            "red and blue police lights in rain",
            "aurora borealis glow, arctic landscape",
            "sunrise through foggy mountains",
            "golden hour on a city skyline",
            "mysterious twilight, heavy mist",
            "early morning rays, forest clearing",
            "colorful lantern light at festival",
            "soft glow through stained glass",
            "harsh spotlight in dark room",
            "mellow evening glow on a lake",
            "crystal reflections in a cave",
            "vibrant autumn lighting in a forest",
            "gentle snowfall at dusk",
            "hazy light of a winter morning",
            "soft, diffused foggy glow",
            "underwater luminescence",
            "rain-soaked reflections in city lights",
            "golden sunlight streaming through trees",
            "fireflies lighting up a summer night",
            "glowing embers from a forge",
            "dim candlelight in a gothic castle",
            "midnight sky with bright starlight",
            "warm sunset in a rural village",
            "flickering light in a haunted house",
            "desert sunset with mirage-like glow",
            "golden beams piercing through storm clouds"
          ],
          {
            "default": "\u2600\ufe0fSelect the illumination environment add to the text"
          }
        ],
        "background": [
          [
            "\ud83c\udf9e\ufe0fSelect the background add to the text",
            "cars and people",
            "a cozy bed and a lamp",
            "a forest clearing with mist",
            "a bustling marketplace",
            "a quiet beach at dusk",
            "an old, cobblestone street",
            "a futuristic cityscape",
            "a tranquil lake with mountains",
            "a mysterious cave entrance",
            "bookshelves and plants in the background",
            "an ancient temple in ruins",
            "tall skyscrapers and neon signs",
            "a starry sky over a desert",
            "a bustling caf\u00e9",
            "rolling hills and farmland",
            "a modern living room with a fireplace",
            "an abandoned warehouse",
            "a picturesque mountain range",
            "a starry night sky",
            "the interior of a futuristic spaceship",
            "the cluttered workshop of an inventor",
            "the glowing embers of a bonfire",
            "a misty lake surrounded by trees",
            "an ornate palace hall",
            "a busy street market",
            "a vast desert landscape",
            "a peaceful library corner",
            "bustling train station",
            "a mystical, enchanted forest",
            "an underwater reef with colorful fish",
            "a quiet rural village",
            "a sandy beach with palm trees",
            "a vibrant coral reef, teeming with life",
            "snow-capped mountains in distance",
            "a stormy ocean, waves crashing",
            "a rustic barn in open fields",
            "a futuristic lab with glowing screens",
            "a dark, abandoned castle",
            "the ruins of an ancient civilization",
            "a bustling urban street in rain",
            "an elegant grand ballroom",
            "a sprawling field of wildflowers",
            "a dense jungle with sunlight filtering through",
            "a dimly lit, vintage bar",
            "an ice cave with sparkling crystals",
            "a serene riverbank at sunset",
            "a narrow alley with graffiti walls",
            "a peaceful zen garden with koi pond",
            "a high-tech control room",
            "a quiet mountain village at dawn",
            "a lighthouse on a rocky coast",
            "a rainy street with flickering lights",
            "a frozen lake with ice formations",
            "an abandoned theme park",
            "a small fishing village on a pier",
            "rolling sand dunes in a desert",
            "a dense forest with towering redwoods",
            "a snowy cabin in the mountains",
            "a mystical cave with bioluminescent plants",
            "a castle courtyard under moonlight",
            "a bustling open-air night market",
            "an old train station with steam",
            "a tranquil waterfall surrounded by trees",
            "a vineyard in the countryside",
            "a quaint medieval village",
            "a bustling harbor with boats",
            "a high-tech futuristic mall",
            "a lush tropical rainforest"
          ],
          {
            "default": "\ud83c\udf9e\ufe0fSelect the background add to the text"
          }
        ],
        "nsfw": [
          [
            "\ud83d\udd1eSelect the nsfw add to the text",
            "nude",
            "breast",
            "small breast",
            "middle breast",
            "large breast",
            "nipples",
            "clothes lift",
            "pussy juice trail",
            "pussy juice puddle",
            "small testicles",
            "medium testicles",
            "large testicles",
            "disembodied penis",
            "cum on body",
            "cum inside",
            "cum outside",
            "fingering",
            "handjob",
            "fellatio",
            "licking penis",
            "paizuri",
            "doggystyle",
            "cowgirl",
            "reversed cowgirl",
            "piledriver",
            "suspended congress",
            "full nelson"
          ],
          {
            "default": "\ud83d\udd1e\ufe0fSelect the nsfw add to the text"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "text",
        "prefix",
        "subject",
        "action",
        "clothes",
        "environment",
        "background",
        "nsfw"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "prompt"
    ],
    "name": "easy prompt",
    "display_name": "Prompt",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Prompt",
    "output_node": false
  },
  "easy promptList": {
    "input": {
      "required": {
        "prompt_1": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "prompt_2": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "prompt_3": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "prompt_4": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "prompt_5": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ]
      },
      "optional": {
        "optional_prompt_list": [
          "LIST"
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt_1",
        "prompt_2",
        "prompt_3",
        "prompt_4",
        "prompt_5"
      ],
      "optional": [
        "optional_prompt_list"
      ]
    },
    "output": [
      "LIST",
      "STRING"
    ],
    "output_is_list": [
      false,
      true
    ],
    "output_name": [
      "prompt_list",
      "prompt_strings"
    ],
    "name": "easy promptList",
    "display_name": "PromptList",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Prompt",
    "output_node": false
  },
  "easy promptLine": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "text"
          }
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9999
          }
        ],
        "max_rows": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 9999
          }
        ]
      },
      "hidden": {
        "workflow_prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "start_index",
        "max_rows"
      ],
      "hidden": [
        "workflow_prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "STRING",
      "*"
    ],
    "output_is_list": [
      true,
      true
    ],
    "output_name": [
      "STRING",
      "COMBO"
    ],
    "name": "easy promptLine",
    "display_name": "PromptLine",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Prompt",
    "output_node": false
  },
  "easy promptConcat": {
    "input": {
      "required": {},
      "optional": {
        "prompt1": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "forceInput": true
          }
        ],
        "prompt2": [
          "STRING",
          {
            "multiline": false,
            "default": "",
            "forceInput": true
          }
        ],
        "separator": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "prompt1",
        "prompt2",
        "separator"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "prompt"
    ],
    "name": "easy promptConcat",
    "display_name": "PromptConcat",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Prompt",
    "output_node": false
  },
  "easy promptReplace": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "default": "",
            "forceInput": true
          }
        ]
      },
      "optional": {
        "find1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "replace1": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "find2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "replace2": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "find3": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "replace3": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt"
      ],
      "optional": [
        "find1",
        "replace1",
        "find2",
        "replace2",
        "find3",
        "replace3"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "prompt"
    ],
    "name": "easy promptReplace",
    "display_name": "PromptReplace",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Prompt",
    "output_node": false
  },
  "easy stylesSelector": {
    "input": {
      "required": {
        "styles": [
          [
            "fooocus_styles"
          ],
          {
            "default": "fooocus_styles"
          }
        ]
      },
      "optional": {
        "positive": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "negative": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "styles"
      ],
      "optional": [
        "positive",
        "negative"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "easy stylesSelector",
    "display_name": "Styles Selector",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Prompt",
    "output_node": false
  },
  "easy portraitMaster": {
    "input": {
      "required": {
        "shot": [
          [
            "-",
            "Head portrait",
            "Head and shoulders portrait",
            "Half-length portrait",
            "Full-length portrait",
            "Face",
            "Portrait",
            "Full body",
            "Close-up"
          ],
          {
            "key": "shot_list"
          }
        ],
        "shot_weight": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "gender": [
          [
            "-",
            "Man",
            "Woman"
          ],
          {
            "default": "Woman",
            "key": "gender_list"
          }
        ],
        "age": [
          "INT",
          {
            "default": 30,
            "min": 18,
            "max": 90,
            "step": 1,
            "display": "slider"
          }
        ],
        "nationality_1": [
          [
            "-",
            "Afghan",
            "Albanian",
            "Algerian",
            "Andorran",
            "Angolan",
            "Antiguans Barbudans",
            "Argentine",
            "Armenian",
            "Australian",
            "Austrian",
            "Azerbaijani",
            "Bahamian",
            "Bahraini",
            "Bangladeshi",
            "Barbadian",
            "Belarusian",
            "Belgian",
            "Belizean",
            "Beninese",
            "Bhutanese",
            "Bolivian",
            "Bosnian Herzegovinian",
            "Brazilian",
            "British",
            "Bruneian",
            "Bulgarian",
            "Burkinabe",
            "Burundian",
            "Cambodian",
            "Cameroonian",
            "Canadian",
            "Cape Verdian",
            "Central African",
            "Chadian",
            "Chilean",
            "Chinese",
            "Colombian",
            "Comoran",
            "Congolese",
            "Costa Rican",
            "Croatian",
            "Cuban",
            "Cypriot",
            "Czech",
            "Danish",
            "Djibouti",
            "Dominican",
            "Dutch",
            "East Timorese",
            "Ecuadorean",
            "Egyptian",
            "Emirian",
            "Equatorial Guinean",
            "Eritrean",
            "Estonian",
            "Ethiopian",
            "Fijian",
            "Filipino",
            "Finnish",
            "French",
            "Gabonese",
            "Gambian",
            "Georgian",
            "German",
            "Ghanaian",
            "Greek",
            "Grenadian",
            "Guatemalan",
            "Guinean",
            "Guyanese",
            "Haitian",
            "Herzegovinian",
            "Honduran",
            "Hungarian",
            "Icelander",
            "Indian",
            "Indonesian",
            "Iranian",
            "Iraqi",
            "Irish",
            "Israeli",
            "Italian",
            "Ivorian",
            "Jamaican",
            "Japanese",
            "Jordanian",
            "Kazakhstani",
            "Kenyan",
            "Kiribati",
            "North Korean",
            "South Korean",
            "Kuwaiti",
            "Kyrgyz",
            "Laotian",
            "Latvian",
            "Lebanese",
            "Liberian",
            "Libyan",
            "Liechtensteiner",
            "Lithuanian",
            "Luxembourgish",
            "Macedonian",
            "Malagasy",
            "Malawian",
            "Malaysian",
            "Maldivan",
            "Malian",
            "Maltese",
            "Marshallese",
            "Mauritanian",
            "Mauritian",
            "Mexican",
            "Micronesian",
            "Moldovan",
            "Monegasque",
            "Mongolian",
            "Montenegrin",
            "Moroccan",
            "Mosotho",
            "Motswana",
            "Mozambican",
            "Namibian",
            "Nauruan",
            "Nepalese",
            "New Zealander",
            "Ni-Vanuatu",
            "Nicaraguan",
            "Nigerian",
            "Nigerien",
            "North Korean",
            "Northern Irish",
            "Norwegian",
            "Omani",
            "Pakistani",
            "Palauan",
            "Palestinian",
            "Panamanian",
            "Papua New Guinean",
            "Paraguayan",
            "Peruvian",
            "Polish",
            "Portuguese",
            "Qatari",
            "Romanian",
            "Russian",
            "Rwandan",
            "Saint Lucian",
            "Salvadoran",
            "Samoan",
            "San Marinese",
            "Sao Tomean",
            "Saudi",
            "Scottish",
            "Senegalese",
            "Serbian",
            "Seychellois",
            "Sierra Leonean",
            "Singaporean",
            "Slovakian",
            "Slovenian",
            "Solomon Islander",
            "Somali",
            "South African",
            "South Korean",
            "South Sudanese",
            "Spanish",
            "Sri Lankan",
            "Sudanese",
            "Surinamer",
            "Swazi",
            "Swedish",
            "Swiss",
            "Syrian",
            "Tajikistani",
            "Tanzanian",
            "Thai",
            "Togolese",
            "Tongan",
            "Trinidadian Tobagonian",
            "Tunisian",
            "Turkish",
            "Turkmen",
            "Tuvaluan",
            "Ugandan",
            "Ukrainian",
            "Uruguayan",
            "Uzbekistani",
            "Venezuelan",
            "Vietnamese",
            "Welsh",
            "Yemeni",
            "Zambian",
            "Zimbabwean"
          ],
          {
            "default": "Chinese",
            "key": "nationality_list"
          }
        ],
        "nationality_2": [
          [
            "-",
            "Afghan",
            "Albanian",
            "Algerian",
            "Andorran",
            "Angolan",
            "Antiguans Barbudans",
            "Argentine",
            "Armenian",
            "Australian",
            "Austrian",
            "Azerbaijani",
            "Bahamian",
            "Bahraini",
            "Bangladeshi",
            "Barbadian",
            "Belarusian",
            "Belgian",
            "Belizean",
            "Beninese",
            "Bhutanese",
            "Bolivian",
            "Bosnian Herzegovinian",
            "Brazilian",
            "British",
            "Bruneian",
            "Bulgarian",
            "Burkinabe",
            "Burundian",
            "Cambodian",
            "Cameroonian",
            "Canadian",
            "Cape Verdian",
            "Central African",
            "Chadian",
            "Chilean",
            "Chinese",
            "Colombian",
            "Comoran",
            "Congolese",
            "Costa Rican",
            "Croatian",
            "Cuban",
            "Cypriot",
            "Czech",
            "Danish",
            "Djibouti",
            "Dominican",
            "Dutch",
            "East Timorese",
            "Ecuadorean",
            "Egyptian",
            "Emirian",
            "Equatorial Guinean",
            "Eritrean",
            "Estonian",
            "Ethiopian",
            "Fijian",
            "Filipino",
            "Finnish",
            "French",
            "Gabonese",
            "Gambian",
            "Georgian",
            "German",
            "Ghanaian",
            "Greek",
            "Grenadian",
            "Guatemalan",
            "Guinean",
            "Guyanese",
            "Haitian",
            "Herzegovinian",
            "Honduran",
            "Hungarian",
            "Icelander",
            "Indian",
            "Indonesian",
            "Iranian",
            "Iraqi",
            "Irish",
            "Israeli",
            "Italian",
            "Ivorian",
            "Jamaican",
            "Japanese",
            "Jordanian",
            "Kazakhstani",
            "Kenyan",
            "Kiribati",
            "North Korean",
            "South Korean",
            "Kuwaiti",
            "Kyrgyz",
            "Laotian",
            "Latvian",
            "Lebanese",
            "Liberian",
            "Libyan",
            "Liechtensteiner",
            "Lithuanian",
            "Luxembourgish",
            "Macedonian",
            "Malagasy",
            "Malawian",
            "Malaysian",
            "Maldivan",
            "Malian",
            "Maltese",
            "Marshallese",
            "Mauritanian",
            "Mauritian",
            "Mexican",
            "Micronesian",
            "Moldovan",
            "Monegasque",
            "Mongolian",
            "Montenegrin",
            "Moroccan",
            "Mosotho",
            "Motswana",
            "Mozambican",
            "Namibian",
            "Nauruan",
            "Nepalese",
            "New Zealander",
            "Ni-Vanuatu",
            "Nicaraguan",
            "Nigerian",
            "Nigerien",
            "North Korean",
            "Northern Irish",
            "Norwegian",
            "Omani",
            "Pakistani",
            "Palauan",
            "Palestinian",
            "Panamanian",
            "Papua New Guinean",
            "Paraguayan",
            "Peruvian",
            "Polish",
            "Portuguese",
            "Qatari",
            "Romanian",
            "Russian",
            "Rwandan",
            "Saint Lucian",
            "Salvadoran",
            "Samoan",
            "San Marinese",
            "Sao Tomean",
            "Saudi",
            "Scottish",
            "Senegalese",
            "Serbian",
            "Seychellois",
            "Sierra Leonean",
            "Singaporean",
            "Slovakian",
            "Slovenian",
            "Solomon Islander",
            "Somali",
            "South African",
            "South Korean",
            "South Sudanese",
            "Spanish",
            "Sri Lankan",
            "Sudanese",
            "Surinamer",
            "Swazi",
            "Swedish",
            "Swiss",
            "Syrian",
            "Tajikistani",
            "Tanzanian",
            "Thai",
            "Togolese",
            "Tongan",
            "Trinidadian Tobagonian",
            "Tunisian",
            "Turkish",
            "Turkmen",
            "Tuvaluan",
            "Ugandan",
            "Ukrainian",
            "Uruguayan",
            "Uzbekistani",
            "Venezuelan",
            "Vietnamese",
            "Welsh",
            "Yemeni",
            "Zambian",
            "Zimbabwean"
          ],
          {
            "key": "nationality_list"
          }
        ],
        "nationality_mix": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "body_type": [
          [
            "-",
            "Underweight",
            "Normal weight",
            "Overweight",
            "Obese"
          ],
          {
            "key": "body_type_list"
          }
        ],
        "body_type_weight": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "model_pose": [
          [
            "-",
            "Power Pose",
            "Walking Pose",
            "The Over-the-Shoulder Look",
            "S-curve Pose",
            "Sitting Pose",
            "Close-Up Beauty Shot Pose",
            "Leaning Pose",
            "Arms Up Pose",
            "Casual Stroll Pose",
            "Headshot Pose",
            "Sitting Cross-Legged Pose",
            "Back Arch Pose",
            "Hand-on-Hip Pose",
            "Gazing into the Distance Pose",
            "Candid Laugh Pose",
            "Dynamic Action Pose",
            "Contrapposto Pose",
            "High Fashion Pose"
          ],
          {
            "key": "model_pose_list"
          }
        ],
        "eyes_color": [
          [
            "-",
            "Brown",
            "Blue",
            "Green",
            "Hazel",
            "Gray",
            "Amber",
            "Red",
            "Violet"
          ],
          {
            "key": "eyes_color_list"
          }
        ],
        "facial_expression": [
          [
            "-",
            "Happy",
            "Sad",
            "Angry",
            "Surprised",
            "Fearful",
            "Disgusted",
            "Contemptuous",
            "Excited",
            "Nervous",
            "Confused",
            "Amused",
            "Content",
            "Disappointed",
            "Bored",
            "Relieved",
            "In love",
            "Shy",
            "Envious",
            "Proud",
            "Cautious",
            "Serious",
            "Serene",
            "Peaceful",
            "Calm"
          ],
          {
            "key": "face_expression_list"
          }
        ],
        "facial_expression_weight": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "face_shape": [
          [
            "-",
            "Oval",
            "Round",
            "Square",
            "Heart-shaped",
            "Long",
            "Rectangle",
            "Triangle",
            "Inverted Triangle",
            "Pear-shaped",
            "Oblong",
            "Square Round",
            "Square Oval"
          ],
          {
            "key": "face_shape_list"
          }
        ],
        "face_shape_weight": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "facial_asymmetry": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "hair_style": [
          [
            "-",
            "Asymmetrical cut",
            "Blunt cut",
            "Bob cut",
            "Braided bob",
            "Buzz cut",
            "Choppy cut",
            "Curly bob",
            "Curtain bangs",
            "Faux hawk",
            "Feathered cut",
            "French bob",
            "Layered cut",
            "Long bob",
            "Mohawk",
            "Pixie cut",
            "Shag cut",
            "Side-swept bangs",
            "Textured cut",
            "Undercut",
            "Wavy bob",
            "Faux hawk short pixie",
            "Brave short haircut with shaved sides",
            "Tapered haricut wuth shaved side",
            "Stacked bob",
            "Lemonade braids",
            "Middle part ponytails",
            "Stitch braids",
            "Deep side part",
            "French braids",
            "Box braids",
            "Two dutch braids",
            "Wavy cut with curtains bangs",
            "Right side shaved",
            "Sweeping pixie",
            "Smooth lob",
            "Long pixie",
            "Sideswept pixie",
            "Italian bob",
            "Shullet"
          ],
          {
            "key": "hair_style_list"
          }
        ],
        "hair_color": [
          [
            "-",
            "Black",
            "Brown",
            "Blonde",
            "Red",
            "Auburn",
            "Chestnut",
            "Gray",
            "White",
            "Salt and pepper"
          ],
          {
            "key": "hair_color_list"
          }
        ],
        "disheveled": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "beard": [
          [
            "-",
            "Stubble Beard",
            "Goatee",
            "Full Beard",
            "Van Dyke Beard",
            "Soul Patch",
            "Garibaldi Beard",
            "Mutton Chops",
            "Circle Beard",
            "Corporate Beard",
            "Balbo Beard",
            "Ducktail Beard",
            "Chinstrap Beard",
            "Anchor Beard",
            "Chevron Mustache",
            "Horseshoe Mustache",
            "Handlebar Mustache",
            "Imperial Mustache",
            "Pencil Mustache",
            "Friendly Mutton Chops",
            "Zappa Mustache"
          ],
          {
            "key": "beard_list"
          }
        ],
        "skin_details": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "skin_pores": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "dimples": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "freckles": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "moles": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "skin_imperfections": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "skin_acne": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "tanned_skin": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "eyes_details": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "iris_details": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "circular_iris": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "circular_pupil": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "light_type": [
          [
            "-",
            "Natural sunlight",
            "Soft ambient light",
            "Harsh sunlight",
            "Overcast sky",
            "Sunset glow",
            "Sunrise warmth",
            "Twilight hues",
            "Candlelight",
            "Incandescent lighting",
            "Fluorescent lighting",
            "Moonlight",
            "Dappled sunlight",
            "Backlit silhouette",
            "Spotlight",
            "Rim lighting",
            "Firelight",
            "City streetlights",
            "Studio lighting",
            "Lantern light",
            "Tungsten lighting",
            "Cloudy day diffused light",
            "Skylight",
            "Golden hour light",
            "Blue hour light",
            "Flash photography",
            "Stage lighting",
            "Neon lights",
            "Torchlight",
            "Softbox lighting",
            "Rim light",
            "Lightning",
            "Abstract light patterns"
          ],
          {
            "key": "light_type_list"
          }
        ],
        "light_direction": [
          [
            "-",
            "top",
            "bottom",
            "right",
            "left",
            "front",
            "rear",
            "top-right",
            "top-left",
            "bottom-right",
            "bottom-left"
          ],
          {
            "key": "light_direction_list"
          }
        ],
        "light_weight": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.05,
            "min": 0,
            "max": 1.95,
            "display": "slider"
          }
        ],
        "photorealism_improvement": [
          [
            "enable",
            "disable"
          ]
        ],
        "prompt_start": [
          "STRING",
          {
            "multiline": true,
            "default": "raw photo, (realistic:1.5)"
          }
        ],
        "prompt_additional": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "prompt_end": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "shot",
        "shot_weight",
        "gender",
        "age",
        "nationality_1",
        "nationality_2",
        "nationality_mix",
        "body_type",
        "body_type_weight",
        "model_pose",
        "eyes_color",
        "facial_expression",
        "facial_expression_weight",
        "face_shape",
        "face_shape_weight",
        "facial_asymmetry",
        "hair_style",
        "hair_color",
        "disheveled",
        "beard",
        "skin_details",
        "skin_pores",
        "dimples",
        "freckles",
        "moles",
        "skin_imperfections",
        "skin_acne",
        "tanned_skin",
        "eyes_details",
        "iris_details",
        "circular_iris",
        "circular_pupil",
        "light_type",
        "light_direction",
        "light_weight",
        "photorealism_improvement",
        "prompt_start",
        "prompt_additional",
        "prompt_end",
        "negative_prompt"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "easy portraitMaster",
    "display_name": "Portrait Master",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Prompt",
    "output_node": false
  },
  "easy fullLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors",
            "None"
          ]
        ],
        "config_name": [
          [
            "Default",
            "anything_v3.yaml",
            "v1-inference.yaml",
            "v1-inference_clip_skip_2.yaml",
            "v1-inference_clip_skip_2_fp16.yaml",
            "v1-inference_fp16.yaml",
            "v1-inpainting-inference.yaml",
            "v2-inference-v.yaml",
            "v2-inference-v_fp32.yaml",
            "v2-inference.yaml",
            "v2-inference_fp32.yaml",
            "v2-inpainting-inference.yaml"
          ],
          {
            "default": "Default"
          }
        ],
        "vae_name": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "clip_skip": [
          "INT",
          {
            "default": -2,
            "min": -24,
            "max": 0,
            "step": 1
          }
        ],
        "lora_name": [
          [
            "None"
          ]
        ],
        "lora_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "resolution": [
          [
            "width x height (custom)",
            "512 x 512",
            "512 x 768",
            "576 x 1024",
            "768 x 512",
            "768 x 768",
            "768 x 1024",
            "768 x 1280",
            "768 x 1344",
            "768 x 1536",
            "816 x 1920",
            "832 x 1152",
            "832 x 1216",
            "896 x 1152",
            "896 x 1088",
            "1024 x 1024",
            "1024 x 576",
            "1024 x 768",
            "1080 x 1920",
            "1440 x 2560",
            "1088 x 896",
            "1216 x 832",
            "1152 x 832",
            "1152 x 896",
            "1280 x 768",
            "1344 x 768",
            "1536 x 640",
            "1536 x 768",
            "1920 x 816",
            "1920 x 1080",
            "2560 x 1440"
          ],
          {
            "default": "512 x 512"
          }
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "",
            "placeholder": "Positive",
            "multiline": true
          }
        ],
        "positive_token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "positive_weight_interpretation": [
          [
            "comfy",
            "A1111",
            "comfy++",
            "compel",
            "fixed attention"
          ]
        ],
        "negative": [
          "STRING",
          {
            "default": "",
            "placeholder": "Negative",
            "multiline": true
          }
        ],
        "negative_token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "negative_weight_interpretation": [
          [
            "comfy",
            "A1111",
            "comfy++",
            "compel",
            "fixed attention"
          ]
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      },
      "optional": {
        "model_override": [
          "MODEL"
        ],
        "clip_override": [
          "CLIP"
        ],
        "vae_override": [
          "VAE"
        ],
        "optional_lora_stack": [
          "LORA_STACK"
        ],
        "optional_controlnet_stack": [
          "CONTROL_NET_STACK"
        ],
        "a1111_prompt_style": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "video_length": "INT",
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "config_name",
        "vae_name",
        "clip_skip",
        "lora_name",
        "lora_model_strength",
        "lora_clip_strength",
        "resolution",
        "empty_latent_width",
        "empty_latent_height",
        "positive",
        "positive_token_normalization",
        "positive_weight_interpretation",
        "negative",
        "negative_token_normalization",
        "negative_weight_interpretation",
        "batch_size"
      ],
      "optional": [
        "model_override",
        "clip_override",
        "vae_override",
        "optional_lora_stack",
        "optional_controlnet_stack",
        "a1111_prompt_style"
      ],
      "hidden": [
        "video_length",
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "VAE",
      "CLIP",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model",
      "vae",
      "clip",
      "positive",
      "negative",
      "latent"
    ],
    "name": "easy fullLoader",
    "display_name": "EasyLoader (Full)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy a1111Loader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "vae_name": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "clip_skip": [
          "INT",
          {
            "default": -2,
            "min": -24,
            "max": 0,
            "step": 1
          }
        ],
        "lora_name": [
          [
            "None"
          ]
        ],
        "lora_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "resolution": [
          [
            "width x height (custom)",
            "512 x 512",
            "512 x 768",
            "576 x 1024",
            "768 x 512",
            "768 x 768",
            "768 x 1024",
            "768 x 1280",
            "768 x 1344",
            "768 x 1536",
            "816 x 1920",
            "832 x 1152",
            "832 x 1216",
            "896 x 1152",
            "896 x 1088",
            "1024 x 1024",
            "1024 x 576",
            "1024 x 768",
            "1080 x 1920",
            "1440 x 2560",
            "1088 x 896",
            "1216 x 832",
            "1152 x 832",
            "1152 x 896",
            "1280 x 768",
            "1344 x 768",
            "1536 x 640",
            "1536 x 768",
            "1920 x 816",
            "1920 x 1080",
            "2560 x 1440"
          ],
          {
            "default": "512 x 512"
          }
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "",
            "placeholder": "Positive",
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "",
            "placeholder": "Negative",
            "multiline": true
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      },
      "optional": {
        "optional_lora_stack": [
          "LORA_STACK"
        ],
        "optional_controlnet_stack": [
          "CONTROL_NET_STACK"
        ],
        "a1111_prompt_style": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "vae_name",
        "clip_skip",
        "lora_name",
        "lora_model_strength",
        "lora_clip_strength",
        "resolution",
        "empty_latent_width",
        "empty_latent_height",
        "positive",
        "negative",
        "batch_size"
      ],
      "optional": [
        "optional_lora_stack",
        "optional_controlnet_stack",
        "a1111_prompt_style"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model",
      "vae"
    ],
    "name": "easy a1111Loader",
    "display_name": "EasyLoader (A1111)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy comfyLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "vae_name": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "clip_skip": [
          "INT",
          {
            "default": -2,
            "min": -24,
            "max": 0,
            "step": 1
          }
        ],
        "lora_name": [
          [
            "None"
          ]
        ],
        "lora_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "resolution": [
          [
            "width x height (custom)",
            "512 x 512",
            "512 x 768",
            "576 x 1024",
            "768 x 512",
            "768 x 768",
            "768 x 1024",
            "768 x 1280",
            "768 x 1344",
            "768 x 1536",
            "816 x 1920",
            "832 x 1152",
            "832 x 1216",
            "896 x 1152",
            "896 x 1088",
            "1024 x 1024",
            "1024 x 576",
            "1024 x 768",
            "1080 x 1920",
            "1440 x 2560",
            "1088 x 896",
            "1216 x 832",
            "1152 x 832",
            "1152 x 896",
            "1280 x 768",
            "1344 x 768",
            "1536 x 640",
            "1536 x 768",
            "1920 x 816",
            "1920 x 1080",
            "2560 x 1440"
          ],
          {
            "default": "512 x 512"
          }
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "",
            "placeholder": "Positive",
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "",
            "placeholder": "Negative",
            "multiline": true
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      },
      "optional": {
        "optional_lora_stack": [
          "LORA_STACK"
        ],
        "optional_controlnet_stack": [
          "CONTROL_NET_STACK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "vae_name",
        "clip_skip",
        "lora_name",
        "lora_model_strength",
        "lora_clip_strength",
        "resolution",
        "empty_latent_width",
        "empty_latent_height",
        "positive",
        "negative",
        "batch_size"
      ],
      "optional": [
        "optional_lora_stack",
        "optional_controlnet_stack"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model",
      "vae"
    ],
    "name": "easy comfyLoader",
    "display_name": "EasyLoader (Comfy)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy svdLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          []
        ],
        "vae_name": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "clip_name": [
          [
            "None",
            "clip_l.safetensors",
            "open-clip-xlm-roberta-large-vit-huge-14_visual_fp32.safetensors",
            "t5xxl_fp16.safetensors",
            "umt5-xxl-enc-bf16.safetensors",
            "umt5_xxl_fp16.safetensors",
            "umt5_xxl_fp8_e4m3fn_scaled.safetensors"
          ]
        ],
        "init_image": [
          "IMAGE"
        ],
        "resolution": [
          [
            "width x height (custom)",
            "512 x 512",
            "512 x 768",
            "576 x 1024",
            "768 x 512",
            "768 x 768",
            "768 x 1024",
            "768 x 1280",
            "768 x 1344",
            "768 x 1536",
            "816 x 1920",
            "832 x 1152",
            "832 x 1216",
            "896 x 1152",
            "896 x 1088",
            "1024 x 1024",
            "1024 x 576",
            "1024 x 768",
            "1080 x 1920",
            "1440 x 2560",
            "1088 x 896",
            "1216 x 832",
            "1152 x 832",
            "1152 x 896",
            "1280 x 768",
            "1344 x 768",
            "1536 x 640",
            "1536 x 768",
            "1920 x 816",
            "1920 x 1080",
            "2560 x 1440"
          ],
          {
            "default": "1024 x 576"
          }
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "video_frames": [
          "INT",
          {
            "default": 14,
            "min": 1,
            "max": 4096
          }
        ],
        "motion_bucket_id": [
          "INT",
          {
            "default": 127,
            "min": 1,
            "max": 1023
          }
        ],
        "fps": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 1024
          }
        ],
        "augmentation_level": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "optional_positive": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "optional_negative": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "vae_name",
        "clip_name",
        "init_image",
        "resolution",
        "empty_latent_width",
        "empty_latent_height",
        "video_frames",
        "motion_bucket_id",
        "fps",
        "augmentation_level"
      ],
      "optional": [
        "optional_positive",
        "optional_negative"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model",
      "vae"
    ],
    "name": "easy svdLoader",
    "display_name": "EasyLoader (SVD)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy sv3dLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          []
        ],
        "vae_name": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "init_image": [
          "IMAGE"
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 21,
            "min": 1,
            "max": 4096
          }
        ],
        "interp_easing": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out"
          ],
          {
            "default": "linear"
          }
        ],
        "easing_mode": [
          [
            "azimuth",
            "elevation",
            "custom"
          ],
          {
            "default": "azimuth"
          }
        ]
      },
      "optional": {
        "scheduler": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "vae_name",
        "init_image",
        "empty_latent_width",
        "empty_latent_height",
        "batch_size",
        "interp_easing",
        "easing_mode"
      ],
      "optional": [
        "scheduler"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model",
      "interp_log"
    ],
    "name": "easy sv3dLoader",
    "display_name": "EasyLoader (SV3D)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy zero123Loader": {
    "input": {
      "required": {
        "ckpt_name": [
          []
        ],
        "vae_name": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "init_image": [
          "IMAGE"
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ],
        "elevation": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0
          }
        ],
        "azimuth": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -180.0,
            "max": 180.0
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "vae_name",
        "init_image",
        "empty_latent_width",
        "empty_latent_height",
        "batch_size",
        "elevation",
        "azimuth"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model",
      "vae"
    ],
    "name": "easy zero123Loader",
    "display_name": "EasyLoader (Zero123)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy cascadeLoader": {
    "input": {
      "required": {
        "stage_c": [
          [
            "Wan2.1-Fun-1.3B-Control.safetensors",
            "Wan2_1-I2V-14B-480P_fp8_e4m3fn.safetensors",
            "Wan2_1_VACE_1_3B_preview_bf16.safetensors",
            "clip_l.safetensors",
            "flux1-dev.safetensors",
            "wan2.1_fun_inp_1.3B_bf16.safetensors",
            "wan2.1_i2v_480p_14B_bf16.safetensors",
            "wan2.1_i2v_720p_14B_bf16.safetensors",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "stage_b": [
          [
            "Wan2.1-Fun-1.3B-Control.safetensors",
            "Wan2_1-I2V-14B-480P_fp8_e4m3fn.safetensors",
            "Wan2_1_VACE_1_3B_preview_bf16.safetensors",
            "clip_l.safetensors",
            "flux1-dev.safetensors",
            "wan2.1_fun_inp_1.3B_bf16.safetensors",
            "wan2.1_i2v_480p_14B_bf16.safetensors",
            "wan2.1_i2v_720p_14B_bf16.safetensors",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "stage_a": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "clip_name": [
          [
            "None",
            "clip_l.safetensors",
            "open-clip-xlm-roberta-large-vit-huge-14_visual_fp32.safetensors",
            "t5xxl_fp16.safetensors",
            "umt5-xxl-enc-bf16.safetensors",
            "umt5_xxl_fp16.safetensors",
            "umt5_xxl_fp8_e4m3fn_scaled.safetensors"
          ]
        ],
        "lora_name": [
          [
            "None"
          ]
        ],
        "lora_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "resolution": [
          [
            "width x height (custom)",
            "512 x 512",
            "512 x 768",
            "576 x 1024",
            "768 x 512",
            "768 x 768",
            "768 x 1024",
            "768 x 1280",
            "768 x 1344",
            "768 x 1536",
            "816 x 1920",
            "832 x 1152",
            "832 x 1216",
            "896 x 1152",
            "896 x 1088",
            "1024 x 1024",
            "1024 x 576",
            "1024 x 768",
            "1080 x 1920",
            "1440 x 2560",
            "1088 x 896",
            "1216 x 832",
            "1152 x 832",
            "1152 x 896",
            "1280 x 768",
            "1344 x 768",
            "1536 x 640",
            "1536 x 768",
            "1920 x 816",
            "1920 x 1080",
            "2560 x 1440"
          ],
          {
            "default": "1024 x 1024"
          }
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 1024,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "compression": [
          "INT",
          {
            "default": 42,
            "min": 32,
            "max": 64,
            "step": 1
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "",
            "placeholder": "Positive",
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "",
            "placeholder": "Negative",
            "multiline": true
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      },
      "optional": {
        "optional_lora_stack": [
          "LORA_STACK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "stage_c",
        "stage_b",
        "stage_a",
        "clip_name",
        "lora_name",
        "lora_model_strength",
        "lora_clip_strength",
        "resolution",
        "empty_latent_width",
        "empty_latent_height",
        "compression",
        "positive",
        "negative",
        "batch_size"
      ],
      "optional": [
        "optional_lora_stack"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "LATENT",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model_c",
      "latent_c",
      "vae"
    ],
    "name": "easy cascadeLoader",
    "display_name": "EasyCascadeLoader",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy kolorsLoader": {
    "input": {
      "required": {
        "unet_name": [
          [
            "Wan2.1-Fun-1.3B-Control.safetensors",
            "Wan2_1-I2V-14B-480P_fp8_e4m3fn.safetensors",
            "Wan2_1_VACE_1_3B_preview_bf16.safetensors",
            "clip_l.safetensors",
            "flux1-dev.safetensors",
            "wan2.1_fun_inp_1.3B_bf16.safetensors",
            "wan2.1_i2v_480p_14B_bf16.safetensors",
            "wan2.1_i2v_720p_14B_bf16.safetensors"
          ]
        ],
        "vae_name": [
          [
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "chatglm3_name": [
          [
            "Florence-2-large-PromptGen-v2.0/model.safetensors"
          ]
        ],
        "lora_name": [
          [
            "None"
          ]
        ],
        "lora_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "resolution": [
          [
            "width x height (custom)",
            "512 x 512",
            "512 x 768",
            "576 x 1024",
            "768 x 512",
            "768 x 768",
            "768 x 1024",
            "768 x 1280",
            "768 x 1344",
            "768 x 1536",
            "816 x 1920",
            "832 x 1152",
            "832 x 1216",
            "896 x 1152",
            "896 x 1088",
            "1024 x 1024",
            "1024 x 576",
            "1024 x 768",
            "1080 x 1920",
            "1440 x 2560",
            "1088 x 896",
            "1216 x 832",
            "1152 x 832",
            "1152 x 896",
            "1280 x 768",
            "1344 x 768",
            "1536 x 640",
            "1536 x 768",
            "1920 x 816",
            "1920 x 1080",
            "2560 x 1440"
          ],
          {
            "default": "1024 x 576"
          }
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "",
            "placeholder": "Positive",
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "",
            "placeholder": "Negative",
            "multiline": true
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      },
      "optional": {
        "model_override": [
          "MODEL"
        ],
        "vae_override": [
          "VAE"
        ],
        "optional_lora_stack": [
          "LORA_STACK"
        ],
        "auto_clean_gpu": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "unet_name",
        "vae_name",
        "chatglm3_name",
        "lora_name",
        "lora_model_strength",
        "lora_clip_strength",
        "resolution",
        "empty_latent_width",
        "empty_latent_height",
        "positive",
        "negative",
        "batch_size"
      ],
      "optional": [
        "model_override",
        "vae_override",
        "optional_lora_stack",
        "auto_clean_gpu"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model",
      "vae"
    ],
    "name": "easy kolorsLoader",
    "display_name": "EasyLoader (Kolors)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy fluxLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors",
            "None"
          ]
        ],
        "vae_name": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "lora_name": [
          [
            "None"
          ]
        ],
        "lora_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "resolution": [
          [
            "width x height (custom)",
            "512 x 512",
            "512 x 768",
            "576 x 1024",
            "768 x 512",
            "768 x 768",
            "768 x 1024",
            "768 x 1280",
            "768 x 1344",
            "768 x 1536",
            "816 x 1920",
            "832 x 1152",
            "832 x 1216",
            "896 x 1152",
            "896 x 1088",
            "1024 x 1024",
            "1024 x 576",
            "1024 x 768",
            "1080 x 1920",
            "1440 x 2560",
            "1088 x 896",
            "1216 x 832",
            "1152 x 832",
            "1152 x 896",
            "1280 x 768",
            "1344 x 768",
            "1536 x 640",
            "1536 x 768",
            "1920 x 816",
            "1920 x 1080",
            "2560 x 1440"
          ],
          {
            "default": "1024 x 1024"
          }
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "",
            "placeholder": "Positive",
            "multiline": true
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      },
      "optional": {
        "model_override": [
          "MODEL"
        ],
        "clip_override": [
          "CLIP"
        ],
        "vae_override": [
          "VAE"
        ],
        "optional_lora_stack": [
          "LORA_STACK"
        ],
        "optional_controlnet_stack": [
          "CONTROL_NET_STACK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "vae_name",
        "lora_name",
        "lora_model_strength",
        "lora_clip_strength",
        "resolution",
        "empty_latent_width",
        "empty_latent_height",
        "positive",
        "batch_size"
      ],
      "optional": [
        "model_override",
        "clip_override",
        "vae_override",
        "optional_lora_stack",
        "optional_controlnet_stack"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model",
      "vae"
    ],
    "name": "easy fluxLoader",
    "display_name": "EasyLoader (Flux)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy hunyuanDiTLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "vae_name": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "lora_name": [
          [
            "None"
          ]
        ],
        "lora_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "resolution": [
          [
            "width x height (custom)",
            "512 x 512",
            "512 x 768",
            "576 x 1024",
            "768 x 512",
            "768 x 768",
            "768 x 1024",
            "768 x 1280",
            "768 x 1344",
            "768 x 1536",
            "816 x 1920",
            "832 x 1152",
            "832 x 1216",
            "896 x 1152",
            "896 x 1088",
            "1024 x 1024",
            "1024 x 576",
            "1024 x 768",
            "1080 x 1920",
            "1440 x 2560",
            "1088 x 896",
            "1216 x 832",
            "1152 x 832",
            "1152 x 896",
            "1280 x 768",
            "1344 x 768",
            "1536 x 640",
            "1536 x 768",
            "1920 x 816",
            "1920 x 1080",
            "2560 x 1440"
          ],
          {
            "default": "1024 x 1024"
          }
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "",
            "placeholder": "Positive",
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "",
            "placeholder": "Negative",
            "multiline": true
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      },
      "optional": {
        "optional_lora_stack": [
          "LORA_STACK"
        ],
        "optional_controlnet_stack": [
          "CONTROL_NET_STACK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "vae_name",
        "lora_name",
        "lora_model_strength",
        "lora_clip_strength",
        "resolution",
        "empty_latent_width",
        "empty_latent_height",
        "positive",
        "negative",
        "batch_size"
      ],
      "optional": [
        "optional_lora_stack",
        "optional_controlnet_stack"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model",
      "vae"
    ],
    "name": "easy hunyuanDiTLoader",
    "display_name": "EasyLoader (HunyuanDiT)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy pixArtLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "model_name": [
          [
            "PixArtMS_XL_2",
            "PixArtMS_Sigma_XL_2",
            "PixArtMS_Sigma_XL_2_900M",
            "PixArtMS_Sigma_XL_2_2K",
            "PixArt_XL_2",
            "ControlPixArtHalf",
            "ControlPixArtMSHalf"
          ]
        ],
        "vae_name": [
          [
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "t5_type": [
          [
            "sd3"
          ]
        ],
        "clip_name": [
          [
            "clip_l.safetensors",
            "open-clip-xlm-roberta-large-vit-huge-14_visual_fp32.safetensors",
            "t5xxl_fp16.safetensors",
            "umt5-xxl-enc-bf16.safetensors",
            "umt5_xxl_fp16.safetensors",
            "umt5_xxl_fp8_e4m3fn_scaled.safetensors"
          ]
        ],
        "padding": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 300
          }
        ],
        "t5_name": [
          []
        ],
        "device": [
          [
            "auto",
            "cpu",
            "gpu"
          ],
          {
            "default": "cpu"
          }
        ],
        "dtype": [
          [
            "default",
            "auto (comfy)",
            "FP32",
            "FP16",
            "BF16"
          ]
        ],
        "lora_name": [
          [
            "None"
          ]
        ],
        "lora_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "ratio": [
          [
            "custom",
            "0.25",
            "0.26",
            "0.27",
            "0.28",
            "0.32",
            "0.33",
            "0.35",
            "0.40",
            "0.42",
            "0.48",
            "0.50",
            "0.52",
            "0.57",
            "0.60",
            "0.68",
            "0.72",
            "0.78",
            "0.82",
            "0.88",
            "0.94",
            "1.00",
            "1.07",
            "1.13",
            "1.21",
            "1.29",
            "1.38",
            "1.46",
            "1.67",
            "1.75",
            "2.00",
            "2.09",
            "2.40",
            "2.50",
            "2.89",
            "3.00",
            "3.11",
            "3.62",
            "3.75",
            "3.88",
            "4.00"
          ],
          {
            "default": "1.00"
          }
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "",
            "placeholder": "Positive",
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "",
            "placeholder": "Negative",
            "multiline": true
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      },
      "optional": {
        "optional_lora_stack": [
          "LORA_STACK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "model_name",
        "vae_name",
        "t5_type",
        "clip_name",
        "padding",
        "t5_name",
        "device",
        "dtype",
        "lora_name",
        "lora_model_strength",
        "ratio",
        "empty_latent_width",
        "empty_latent_height",
        "positive",
        "negative",
        "batch_size"
      ],
      "optional": [
        "optional_lora_stack"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model",
      "vae"
    ],
    "name": "easy pixArtLoader",
    "display_name": "EasyLoader (PixArt)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy mochiLoader": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "vae_name": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ],
          {
            "default": "mochi_vae.safetensors"
          }
        ],
        "positive": [
          "STRING",
          {
            "default": "",
            "placeholder": "Positive",
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "",
            "placeholder": "Negative",
            "multiline": true
          }
        ],
        "resolution": [
          [
            "width x height (custom)",
            "512 x 512",
            "512 x 768",
            "576 x 1024",
            "768 x 512",
            "768 x 768",
            "768 x 1024",
            "768 x 1280",
            "768 x 1344",
            "768 x 1536",
            "816 x 1920",
            "832 x 1152",
            "832 x 1216",
            "896 x 1152",
            "896 x 1088",
            "1024 x 1024",
            "1024 x 576",
            "1024 x 768",
            "1080 x 1920",
            "1440 x 2560",
            "1088 x 896",
            "1216 x 832",
            "1152 x 832",
            "1152 x 896",
            "1280 x 768",
            "1344 x 768",
            "1536 x 640",
            "1536 x 768",
            "1920 x 816",
            "1920 x 1080",
            "2560 x 1440"
          ],
          {
            "default": "width x height (custom)"
          }
        ],
        "empty_latent_width": [
          "INT",
          {
            "default": 848,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "empty_latent_height": [
          "INT",
          {
            "default": 480,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "length": [
          "INT",
          {
            "default": 25,
            "min": 7,
            "max": 16384,
            "step": 6
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "tooltip": "The number of latent images in the batch."
          }
        ]
      },
      "optional": {
        "model_override": [
          "MODEL"
        ],
        "clip_override": [
          "CLIP"
        ],
        "vae_override": [
          "VAE"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "vae_name",
        "positive",
        "negative",
        "resolution",
        "empty_latent_width",
        "empty_latent_height",
        "length",
        "batch_size"
      ],
      "optional": [
        "model_override",
        "clip_override",
        "vae_override"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model",
      "vae"
    ],
    "name": "easy mochiLoader",
    "display_name": "EasyLoader (Mochi)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy loraStack": {
    "input": {
      "required": {
        "toggle": [
          "BOOLEAN",
          {
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "mode": [
          [
            "simple",
            "advanced"
          ]
        ],
        "num_loras": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10
          }
        ]
      },
      "optional": {
        "optional_lora_stack": [
          "LORA_STACK"
        ],
        "lora_1_name": [
          [
            "None"
          ],
          {
            "default": "None"
          }
        ],
        "lora_1_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_1_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_1_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_2_name": [
          [
            "None"
          ],
          {
            "default": "None"
          }
        ],
        "lora_2_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_2_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_2_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_3_name": [
          [
            "None"
          ],
          {
            "default": "None"
          }
        ],
        "lora_3_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_3_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_3_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_4_name": [
          [
            "None"
          ],
          {
            "default": "None"
          }
        ],
        "lora_4_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_4_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_4_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_5_name": [
          [
            "None"
          ],
          {
            "default": "None"
          }
        ],
        "lora_5_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_5_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_5_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_6_name": [
          [
            "None"
          ],
          {
            "default": "None"
          }
        ],
        "lora_6_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_6_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_6_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_7_name": [
          [
            "None"
          ],
          {
            "default": "None"
          }
        ],
        "lora_7_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_7_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_7_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_8_name": [
          [
            "None"
          ],
          {
            "default": "None"
          }
        ],
        "lora_8_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_8_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_8_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_9_name": [
          [
            "None"
          ],
          {
            "default": "None"
          }
        ],
        "lora_9_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_9_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_9_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_10_name": [
          [
            "None"
          ],
          {
            "default": "None"
          }
        ],
        "lora_10_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_10_model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_10_clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "toggle",
        "mode",
        "num_loras"
      ],
      "optional": [
        "optional_lora_stack",
        "lora_1_name",
        "lora_1_strength",
        "lora_1_model_strength",
        "lora_1_clip_strength",
        "lora_2_name",
        "lora_2_strength",
        "lora_2_model_strength",
        "lora_2_clip_strength",
        "lora_3_name",
        "lora_3_strength",
        "lora_3_model_strength",
        "lora_3_clip_strength",
        "lora_4_name",
        "lora_4_strength",
        "lora_4_model_strength",
        "lora_4_clip_strength",
        "lora_5_name",
        "lora_5_strength",
        "lora_5_model_strength",
        "lora_5_clip_strength",
        "lora_6_name",
        "lora_6_strength",
        "lora_6_model_strength",
        "lora_6_clip_strength",
        "lora_7_name",
        "lora_7_strength",
        "lora_7_model_strength",
        "lora_7_clip_strength",
        "lora_8_name",
        "lora_8_strength",
        "lora_8_model_strength",
        "lora_8_clip_strength",
        "lora_9_name",
        "lora_9_strength",
        "lora_9_model_strength",
        "lora_9_clip_strength",
        "lora_10_name",
        "lora_10_strength",
        "lora_10_model_strength",
        "lora_10_clip_strength"
      ]
    },
    "output": [
      "LORA_STACK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "lora_stack"
    ],
    "name": "easy loraStack",
    "display_name": "EasyLoraStack",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy controlnetStack": {
    "input": {
      "required": {
        "toggle": [
          "BOOLEAN",
          {
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "mode": [
          [
            "simple",
            "advanced"
          ]
        ],
        "num_controlnet": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 3
          }
        ]
      },
      "optional": {
        "optional_controlnet_stack": [
          "CONTROL_NET_STACK"
        ],
        "controlnet_1": [
          [
            "None",
            "SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "controlnet_1_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent_1": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "scale_soft_weight_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "image_1": [
          "IMAGE"
        ],
        "controlnet_2": [
          [
            "None",
            "SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "controlnet_2_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent_2": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "scale_soft_weight_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "image_2": [
          "IMAGE"
        ],
        "controlnet_3": [
          [
            "None",
            "SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors"
          ],
          {
            "default": "None"
          }
        ],
        "controlnet_3_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent_3": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "scale_soft_weight_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "image_3": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "toggle",
        "mode",
        "num_controlnet"
      ],
      "optional": [
        "optional_controlnet_stack",
        "controlnet_1",
        "controlnet_1_strength",
        "start_percent_1",
        "end_percent_1",
        "scale_soft_weight_1",
        "image_1",
        "controlnet_2",
        "controlnet_2_strength",
        "start_percent_2",
        "end_percent_2",
        "scale_soft_weight_2",
        "image_2",
        "controlnet_3",
        "controlnet_3_strength",
        "start_percent_3",
        "end_percent_3",
        "scale_soft_weight_3",
        "image_3"
      ]
    },
    "output": [
      "CONTROL_NET_STACK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "controlnet_stack"
    ],
    "name": "easy controlnetStack",
    "display_name": "EasyControlnetStack",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy controlnetLoader": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image": [
          "IMAGE"
        ],
        "control_net_name": [
          [
            "SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors"
          ]
        ]
      },
      "optional": {
        "control_net": [
          "CONTROL_NET"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "scale_soft_weights": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image",
        "control_net_name"
      ],
      "optional": [
        "control_net",
        "strength",
        "scale_soft_weights"
      ]
    },
    "output": [
      "PIPE_LINE",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "positive",
      "negative"
    ],
    "name": "easy controlnetLoader",
    "display_name": "EasyControlnet",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy controlnetLoaderADV": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image": [
          "IMAGE"
        ],
        "control_net_name": [
          [
            "SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors"
          ]
        ]
      },
      "optional": {
        "control_net": [
          "CONTROL_NET"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "scale_soft_weights": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image",
        "control_net_name"
      ],
      "optional": [
        "control_net",
        "strength",
        "start_percent",
        "end_percent",
        "scale_soft_weights"
      ]
    },
    "output": [
      "PIPE_LINE",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "positive",
      "negative"
    ],
    "name": "easy controlnetLoaderADV",
    "display_name": "EasyControlnet (Advanced)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy controlnetLoader++": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image": [
          "IMAGE"
        ],
        "control_net_name": [
          [
            "SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors"
          ]
        ]
      },
      "optional": {
        "control_net": [
          "CONTROL_NET"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "scale_soft_weights": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "union_type": [
          [
            "auto",
            "openpose",
            "depth",
            "hed/pidi/scribble/ted",
            "canny/lineart/anime_lineart/mlsd",
            "normal",
            "segment",
            "tile",
            "repaint"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image",
        "control_net_name"
      ],
      "optional": [
        "control_net",
        "strength",
        "start_percent",
        "end_percent",
        "scale_soft_weights",
        "union_type"
      ]
    },
    "output": [
      "PIPE_LINE",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "positive",
      "negative"
    ],
    "name": "easy controlnetLoader++",
    "display_name": "EasyControlnet++",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy LLLiteLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "model_name": [
          []
        ],
        "cond_image": [
          "IMAGE"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "steps": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 200,
            "step": 1
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "model_name",
        "cond_image",
        "strength",
        "steps",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "easy LLLiteLoader",
    "display_name": "EasyLLLite",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Loaders",
    "output_node": false
  },
  "easy loraStackApply": {
    "input": {
      "required": {
        "lora_stack": [
          "LORA_STACK"
        ],
        "model": [
          "MODEL"
        ]
      },
      "optional": {
        "optional_clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "lora_stack",
        "model"
      ],
      "optional": [
        "optional_clip"
      ]
    },
    "output": [
      "MODEL",
      "CLIP"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "model",
      "clip"
    ],
    "name": "easy loraStackApply",
    "display_name": "Easy Apply LoraStack",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy controlnetStackApply": {
    "input": {
      "required": {
        "controlnet_stack": [
          "CONTROL_NET_STACK"
        ],
        "pipe": [
          "PIPE_LINE"
        ]
      },
      "optional": {}
    },
    "input_order": {
      "required": [
        "controlnet_stack",
        "pipe"
      ],
      "optional": []
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "pipe"
    ],
    "name": "easy controlnetStackApply",
    "display_name": "Easy Apply CnetStack",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy ipadapterApply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "image": [
          "IMAGE"
        ],
        "preset": [
          [
            "LIGHT - SD1.5 only (low strength)",
            "STANDARD (medium strength)",
            "VIT-G (medium strength)",
            "PLUS (high strength)",
            "PLUS (kolors genernal)",
            "REGULAR - FLUX and SD3.5 only (high strength)",
            "PLUS FACE (portraits)",
            "FULL FACE - SD1.5 only (portraits stronger)",
            "COMPOSITION",
            "FACEID",
            "FACEID PLUS - SD1.5 only",
            "FACEID PLUS KOLORS",
            "FACEID PLUS V2",
            "FACEID PORTRAIT (style transfer)",
            "FACEID PORTRAIT UNNORM - SDXL only (strong)"
          ]
        ],
        "lora_strength": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "provider": [
          [
            "CPU",
            "CUDA",
            "ROCM",
            "DirectML",
            "OpenVINO",
            "CoreML"
          ],
          {
            "default": "CUDA"
          }
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_faceidv2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5.0,
            "step": 0.05
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "cache_mode": [
          [
            "insightface only",
            "clip_vision only",
            "ipadapter only",
            "all",
            "none"
          ],
          {
            "default": "all"
          }
        ],
        "use_tiled": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "attn_mask": [
          "MASK"
        ],
        "optional_ipadapter": [
          "IPADAPTER"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "image",
        "preset",
        "lora_strength",
        "provider",
        "weight",
        "weight_faceidv2",
        "start_at",
        "end_at",
        "cache_mode",
        "use_tiled"
      ],
      "optional": [
        "attn_mask",
        "optional_ipadapter"
      ]
    },
    "output": [
      "MODEL",
      "IMAGE",
      "MASK",
      "IPADAPTER"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "images",
      "masks",
      "ipadapter"
    ],
    "name": "easy ipadapterApply",
    "display_name": "Easy Apply IPAdapter",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy ipadapterApplyADV": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "image": [
          "IMAGE"
        ],
        "preset": [
          [
            "LIGHT - SD1.5 only (low strength)",
            "STANDARD (medium strength)",
            "VIT-G (medium strength)",
            "PLUS (high strength)",
            "PLUS (kolors genernal)",
            "REGULAR - FLUX and SD3.5 only (high strength)",
            "PLUS FACE (portraits)",
            "FULL FACE - SD1.5 only (portraits stronger)",
            "COMPOSITION",
            "FACEID",
            "FACEID PLUS - SD1.5 only",
            "FACEID PLUS KOLORS",
            "FACEID PLUS V2",
            "FACEID PORTRAIT (style transfer)",
            "FACEID PORTRAIT UNNORM - SDXL only (strong)"
          ]
        ],
        "lora_strength": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "provider": [
          [
            "CPU",
            "CUDA",
            "ROCM",
            "DirectML",
            "OpenVINO",
            "CoreML"
          ],
          {
            "default": "CUDA"
          }
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_faceidv2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5.0,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise"
          ]
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ],
        "cache_mode": [
          [
            "insightface only",
            "clip_vision only",
            "ipadapter only",
            "all",
            "none"
          ],
          {
            "default": "all"
          }
        ],
        "use_tiled": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "use_batch": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "sharpening": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "optional_ipadapter": [
          "IPADAPTER"
        ],
        "layer_weights": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "placeholder": "Mad Scientist Layer Weights"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "image",
        "preset",
        "lora_strength",
        "provider",
        "weight",
        "weight_faceidv2",
        "weight_type",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling",
        "cache_mode",
        "use_tiled",
        "use_batch",
        "sharpening"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision",
        "optional_ipadapter",
        "layer_weights"
      ]
    },
    "output": [
      "MODEL",
      "IMAGE",
      "MASK",
      "IPADAPTER"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "images",
      "masks",
      "ipadapter"
    ],
    "name": "easy ipadapterApplyADV",
    "display_name": "Easy Apply IPAdapter (Advanced)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy ipadapterApplyFaceIDKolors": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "image": [
          "IMAGE"
        ],
        "preset": [
          [
            "FACEID PLUS KOLORS"
          ],
          {
            "default": "FACEID PLUS KOLORS"
          }
        ],
        "lora_strength": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "provider": [
          [
            "CPU",
            "CUDA",
            "ROCM",
            "DirectML",
            "OpenVINO",
            "CoreML"
          ],
          {
            "default": "CUDA"
          }
        ],
        "weight": [
          "FLOAT",
          {
            "default": 0.8,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_faceidv2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5.0,
            "step": 0.05
          }
        ],
        "weight_kolors": [
          "FLOAT",
          {
            "default": 0.8,
            "min": -1,
            "max": 5.0,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise"
          ]
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ],
        "cache_mode": [
          [
            "insightface only",
            "clip_vision only",
            "ipadapter only",
            "all",
            "none"
          ],
          {
            "default": "all"
          }
        ],
        "use_tiled": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "use_batch": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "sharpening": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ]
      },
      "optional": {
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "optional_ipadapter": [
          "IPADAPTER"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "image",
        "preset",
        "lora_strength",
        "provider",
        "weight",
        "weight_faceidv2",
        "weight_kolors",
        "weight_type",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling",
        "cache_mode",
        "use_tiled",
        "use_batch",
        "sharpening"
      ],
      "optional": [
        "image_negative",
        "attn_mask",
        "clip_vision",
        "optional_ipadapter"
      ]
    },
    "output": [
      "MODEL",
      "IMAGE",
      "MASK",
      "IPADAPTER"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "images",
      "masks",
      "ipadapter"
    ],
    "name": "easy ipadapterApplyFaceIDKolors",
    "display_name": "Easy Apply IPAdapter (FaceID Kolors)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy ipadapterApplyEncoder": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "image1": [
          "IMAGE"
        ],
        "preset": [
          [
            "LIGHT - SD1.5 only (low strength)",
            "STANDARD (medium strength)",
            "VIT-G (medium strength)",
            "PLUS (high strength)",
            "PLUS (kolors genernal)",
            "REGULAR - FLUX and SD3.5 only (high strength)",
            "PLUS FACE (portraits)",
            "FULL FACE - SD1.5 only (portraits stronger)",
            "COMPOSITION"
          ]
        ],
        "num_embeds": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 4
          }
        ]
      },
      "optional": {
        "image2": [
          "IMAGE"
        ],
        "image3": [
          "IMAGE"
        ],
        "image4": [
          "IMAGE"
        ],
        "mask1": [
          "MASK"
        ],
        "weight1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "mask2": [
          "MASK"
        ],
        "weight2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "mask3": [
          "MASK"
        ],
        "weight3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "mask4": [
          "MASK"
        ],
        "weight4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "combine_method": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average",
            "max",
            "min"
          ]
        ],
        "optional_ipadapter": [
          "IPADAPTER"
        ],
        "pos_embeds": [
          "EMBEDS"
        ],
        "neg_embeds": [
          "EMBEDS"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip_vision",
        "image1",
        "preset",
        "num_embeds"
      ],
      "optional": [
        "image2",
        "image3",
        "image4",
        "mask1",
        "weight1",
        "mask2",
        "weight2",
        "mask3",
        "weight3",
        "mask4",
        "weight4",
        "combine_method",
        "optional_ipadapter",
        "pos_embeds",
        "neg_embeds"
      ]
    },
    "output": [
      "MODEL",
      "CLIP_VISION",
      "IPADAPTER",
      "EMBEDS",
      "EMBEDS"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "clip_vision",
      "ipadapter",
      "pos_embed",
      "neg_embed"
    ],
    "name": "easy ipadapterApplyEncoder",
    "display_name": "Easy Apply IPAdapter (Encoder)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy ipadapterApplyEmbeds": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "pos_embed": [
          "EMBEDS"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "neg_embed": [
          "EMBEDS"
        ],
        "attn_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip_vision",
        "ipadapter",
        "pos_embed",
        "weight",
        "weight_type",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "neg_embed",
        "attn_mask"
      ]
    },
    "output": [
      "MODEL",
      "IPADAPTER"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "model",
      "ipadapter"
    ],
    "name": "easy ipadapterApplyEmbeds",
    "display_name": "Easy Apply IPAdapter (Embeds)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy ipadapterApplyRegional": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image": [
          "IMAGE"
        ],
        "positive": [
          "STRING",
          {
            "default": "",
            "placeholder": "positive",
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "",
            "placeholder": "negative",
            "multiline": true
          }
        ],
        "image_weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1.0,
            "max": 3.0,
            "step": 0.05
          }
        ],
        "prompt_weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer",
            "style and composition",
            "style transfer precise"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "optional_ipadapter_params": [
          "IPADAPTER_PARAMS"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image",
        "positive",
        "negative",
        "image_weight",
        "prompt_weight",
        "weight_type",
        "start_at",
        "end_at"
      ],
      "optional": [
        "mask",
        "optional_ipadapter_params"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "IPADAPTER_PARAMS",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "ipadapter_params",
      "positive",
      "negative"
    ],
    "name": "easy ipadapterApplyRegional",
    "display_name": "Easy Apply IPAdapter (Regional)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy ipadapterApplyFromParams": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "preset": [
          [
            "LIGHT - SD1.5 only (low strength)",
            "STANDARD (medium strength)",
            "VIT-G (medium strength)",
            "PLUS (high strength)",
            "PLUS (kolors genernal)",
            "REGULAR - FLUX and SD3.5 only (high strength)",
            "PLUS FACE (portraits)",
            "FULL FACE - SD1.5 only (portraits stronger)",
            "COMPOSITION"
          ]
        ],
        "ipadapter_params": [
          "IPADAPTER_PARAMS"
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average",
            "max",
            "min"
          ]
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ],
        "cache_mode": [
          [
            "insightface only",
            "clip_vision only",
            "ipadapter only",
            "all",
            "none"
          ],
          {
            "default": "insightface only"
          }
        ]
      },
      "optional": {
        "optional_ipadapter": [
          "IPADAPTER"
        ],
        "image_negative": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "preset",
        "ipadapter_params",
        "combine_embeds",
        "embeds_scaling",
        "cache_mode"
      ],
      "optional": [
        "optional_ipadapter",
        "image_negative"
      ]
    },
    "output": [
      "MODEL",
      "IPADAPTER"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "model",
      "ipadapter"
    ],
    "name": "easy ipadapterApplyFromParams",
    "display_name": "Easy Apply IPAdapter (From Params)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy ipadapterStyleComposition": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "image_style": [
          "IMAGE"
        ],
        "preset": [
          [
            "LIGHT - SD1.5 only (low strength)",
            "STANDARD (medium strength)",
            "VIT-G (medium strength)",
            "PLUS (high strength)",
            "PLUS (kolors genernal)",
            "REGULAR - FLUX and SD3.5 only (high strength)",
            "PLUS FACE (portraits)",
            "FULL FACE - SD1.5 only (portraits stronger)",
            "COMPOSITION"
          ]
        ],
        "weight_style": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "weight_composition": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "expand_style": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ],
          {
            "default": "average"
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ],
        "cache_mode": [
          [
            "insightface only",
            "clip_vision only",
            "ipadapter only",
            "all",
            "none"
          ],
          {
            "default": "all"
          }
        ]
      },
      "optional": {
        "image_composition": [
          "IMAGE"
        ],
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "optional_ipadapter": [
          "IPADAPTER"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "image_style",
        "preset",
        "weight_style",
        "weight_composition",
        "expand_style",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling",
        "cache_mode"
      ],
      "optional": [
        "image_composition",
        "image_negative",
        "attn_mask",
        "clip_vision",
        "optional_ipadapter"
      ]
    },
    "output": [
      "MODEL",
      "IPADAPTER"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "model",
      "ipadapter"
    ],
    "name": "easy ipadapterStyleComposition",
    "display_name": "Easy Apply IPAdapter (StyleComposition)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy instantIDApply": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image": [
          "IMAGE"
        ],
        "instantid_file": [
          []
        ],
        "insightface": [
          [
            "CPU",
            "CUDA",
            "ROCM"
          ]
        ],
        "control_net_name": [
          [
            "SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors"
          ]
        ],
        "cn_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "cn_soft_weights": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "weight": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "noise": [
          "FLOAT",
          {
            "default": 0.35,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ]
      },
      "optional": {
        "image_kps": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "control_net": [
          "CONTROL_NET"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image",
        "instantid_file",
        "insightface",
        "control_net_name",
        "cn_strength",
        "cn_soft_weights",
        "weight",
        "start_at",
        "end_at",
        "noise"
      ],
      "optional": [
        "image_kps",
        "mask",
        "control_net"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model",
      "positive",
      "negative"
    ],
    "name": "easy instantIDApply",
    "display_name": "Easy Apply InstantID",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy instantIDApplyADV": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image": [
          "IMAGE"
        ],
        "instantid_file": [
          []
        ],
        "insightface": [
          [
            "CPU",
            "CUDA",
            "ROCM"
          ]
        ],
        "control_net_name": [
          [
            "SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors"
          ]
        ],
        "cn_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "cn_soft_weights": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "weight": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0.0,
            "max": 5.0,
            "step": 0.01
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "noise": [
          "FLOAT",
          {
            "default": 0.35,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ]
      },
      "optional": {
        "image_kps": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image",
        "instantid_file",
        "insightface",
        "control_net_name",
        "cn_strength",
        "cn_soft_weights",
        "weight",
        "start_at",
        "end_at",
        "noise"
      ],
      "optional": [
        "image_kps",
        "mask",
        "control_net",
        "positive",
        "negative"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model",
      "positive",
      "negative"
    ],
    "name": "easy instantIDApplyADV",
    "display_name": "Easy Apply InstantID (Advanced)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy pulIDApply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "pulid_file": [
          []
        ],
        "insightface": [
          [
            "CPU",
            "CUDA",
            "ROCM"
          ]
        ],
        "image": [
          "IMAGE"
        ],
        "method": [
          [
            "fidelity",
            "style",
            "neutral"
          ]
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1.0,
            "max": 5.0,
            "step": 0.05
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "attn_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "pulid_file",
        "insightface",
        "image",
        "method",
        "weight",
        "start_at",
        "end_at"
      ],
      "optional": [
        "attn_mask"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "model"
    ],
    "name": "easy pulIDApply",
    "display_name": "Easy Apply PuLID",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy pulIDApplyADV": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "pulid_file": [
          []
        ],
        "insightface": [
          [
            "CPU",
            "CUDA",
            "ROCM"
          ]
        ],
        "image": [
          "IMAGE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1.0,
            "max": 5.0,
            "step": 0.05
          }
        ],
        "projection": [
          [
            "ortho_v2",
            "ortho",
            "none"
          ],
          {
            "default": "ortho_v2"
          }
        ],
        "fidelity": [
          "INT",
          {
            "default": 8,
            "min": 0,
            "max": 32,
            "step": 1
          }
        ],
        "noise": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -1.0,
            "max": 1.0,
            "step": 0.1
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "attn_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "pulid_file",
        "insightface",
        "image",
        "weight",
        "projection",
        "fidelity",
        "noise",
        "start_at",
        "end_at"
      ],
      "optional": [
        "attn_mask"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "model"
    ],
    "name": "easy pulIDApplyADV",
    "display_name": "Easy Apply PuLID (Advanced)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy styleAlignedBatchAlign": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "share_norm": [
          [
            "both",
            "group",
            "layer",
            "disabled"
          ]
        ],
        "share_attn": [
          [
            "q+k",
            "q+k+v",
            "disabled"
          ]
        ],
        "scale": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "share_norm",
        "share_attn",
        "scale"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "easy styleAlignedBatchAlign",
    "display_name": "Easy Apply StyleAlign",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy icLightApply": {
    "input": {
      "required": {
        "mode": [
          [
            "Foreground",
            "Foreground&Background"
          ]
        ],
        "model": [
          "MODEL"
        ],
        "image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "lighting": [
          [
            "None",
            "Left Light",
            "Right Light",
            "Top Light",
            "Bottom Light",
            "Circle Light"
          ],
          {
            "default": "None"
          }
        ],
        "source": [
          [
            "Use Background Image",
            "Use Flipped Background Image",
            "Left Light",
            "Right Light",
            "Top Light",
            "Bottom Light",
            "Ambient"
          ],
          {
            "default": "Use Background Image"
          }
        ],
        "remove_bg": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "model",
        "image",
        "vae",
        "lighting",
        "source",
        "remove_bg"
      ]
    },
    "output": [
      "MODEL",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "model",
      "lighting_image"
    ],
    "name": "easy icLightApply",
    "display_name": "Easy Apply ICLight",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Adapter",
    "output_node": false
  },
  "easy applyFooocusInpaint": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "latent": [
          "LATENT"
        ],
        "head": [
          [
            "fooocus_inpaint_head"
          ]
        ],
        "patch": [
          [
            "inpaint_v26 (1.32GB)",
            "inpaint_v25 (2.58GB)",
            "inpaint (1.32GB)"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "latent",
        "head",
        "patch"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "model"
    ],
    "name": "easy applyFooocusInpaint",
    "display_name": "Easy Apply Fooocus Inpaint",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Inpaint",
    "output_node": false
  },
  "easy applyBrushNet": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "brushnet": [
          []
        ],
        "dtype": [
          [
            "float16",
            "bfloat16",
            "float32",
            "float64"
          ]
        ],
        "scale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0
          }
        ],
        "start_at": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "end_at": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image",
        "mask",
        "brushnet",
        "dtype",
        "scale",
        "start_at",
        "end_at"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "pipe"
    ],
    "name": "easy applyBrushNet",
    "display_name": "Easy Apply BrushNet",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Inpaint",
    "output_node": false
  },
  "easy applyPowerPaint": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "powerpaint_model": [
          []
        ],
        "powerpaint_clip": [
          []
        ],
        "dtype": [
          [
            "float16",
            "bfloat16",
            "float32",
            "float64"
          ]
        ],
        "fitting": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.3,
            "max": 1.0
          }
        ],
        "function": [
          [
            "text guided",
            "shape guided",
            "object removal",
            "context aware",
            "image outpainting"
          ]
        ],
        "scale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0
          }
        ],
        "start_at": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "end_at": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000
          }
        ],
        "save_memory": [
          [
            "none",
            "auto",
            "max"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image",
        "mask",
        "powerpaint_model",
        "powerpaint_clip",
        "dtype",
        "fitting",
        "function",
        "scale",
        "start_at",
        "end_at",
        "save_memory"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "pipe"
    ],
    "name": "easy applyPowerPaint",
    "display_name": "Easy Apply PowerPaint",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Inpaint",
    "output_node": false
  },
  "easy applyInpaint": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "inpaint_mode": [
          [
            "normal",
            "fooocus_inpaint",
            "brushnet_random",
            "brushnet_segmentation",
            "powerpaint"
          ]
        ],
        "encode": [
          [
            "none",
            "vae_encode_inpaint",
            "inpaint_model_conditioning",
            "different_diffusion"
          ],
          {
            "default": "none"
          }
        ],
        "grow_mask_by": [
          "INT",
          {
            "default": 6,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ],
        "dtype": [
          [
            "float16",
            "bfloat16",
            "float32",
            "float64"
          ]
        ],
        "fitting": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.3,
            "max": 1.0
          }
        ],
        "function": [
          [
            "text guided",
            "shape guided",
            "object removal",
            "context aware",
            "image outpainting"
          ]
        ],
        "scale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0
          }
        ],
        "start_at": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "end_at": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000
          }
        ]
      },
      "optional": {
        "noise_mask": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image",
        "mask",
        "inpaint_mode",
        "encode",
        "grow_mask_by",
        "dtype",
        "fitting",
        "function",
        "scale",
        "start_at",
        "end_at"
      ],
      "optional": [
        "noise_mask"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "pipe"
    ],
    "name": "easy applyInpaint",
    "display_name": "Easy Apply Inpaint",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Inpaint",
    "output_node": false
  },
  "easy preSampling": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "align_your_steps",
            "gits"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ]
      },
      "optional": {
        "image_to_latent": [
          "IMAGE"
        ],
        "latent": [
          "LATENT"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "seed"
      ],
      "optional": [
        "image_to_latent",
        "latent"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "pipe"
    ],
    "name": "easy preSampling",
    "display_name": "PreSampling",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/PreSampling",
    "output_node": false
  },
  "easy preSamplingAdvanced": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "align_your_steps",
            "gits"
          ]
        ],
        "start_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "end_at_step": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000
          }
        ],
        "add_noise": [
          [
            "enable (CPU)",
            "enable (GPU=A1111)",
            "disable"
          ],
          {
            "default": "enable (CPU)"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ],
        "return_with_leftover_noise": [
          [
            "disable",
            "enable"
          ]
        ]
      },
      "optional": {
        "image_to_latent": [
          "IMAGE"
        ],
        "latent": [
          "LATENT"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "start_at_step",
        "end_at_step",
        "add_noise",
        "seed",
        "return_with_leftover_noise"
      ],
      "optional": [
        "image_to_latent",
        "latent"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "pipe"
    ],
    "name": "easy preSamplingAdvanced",
    "display_name": "PreSampling (Advanced)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/PreSampling",
    "output_node": false
  },
  "easy preSamplingNoiseIn": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "factor": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "round": 0.01
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "align_your_steps",
            "gits"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ]
      },
      "optional": {
        "optional_noise_seed": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "optional_latent": [
          "LATENT"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "factor",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "seed"
      ],
      "optional": [
        "optional_noise_seed",
        "optional_latent"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "pipe"
    ],
    "name": "easy preSamplingNoiseIn",
    "display_name": "PreSampling (NoiseIn)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/PreSampling",
    "output_node": false
  },
  "easy preSamplingCustom": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "guider": [
          [
            "CFG",
            "DualCFG",
            "Basic",
            "IP2P+CFG",
            "IP2P+DualCFG",
            "IP2P+Basic"
          ],
          {
            "default": "Basic"
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 3.5,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "cfg_negative": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2",
            "inversed_euler"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "karrasADV",
            "exponentialADV",
            "polyExponential",
            "sdturbo",
            "vp",
            "alignYourSteps",
            "gits"
          ]
        ],
        "coeff": [
          "FLOAT",
          {
            "default": 1.2,
            "min": 0.8,
            "max": 1.5,
            "step": 0.05
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "sigma_max": [
          "FLOAT",
          {
            "default": 14.614642,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "sigma_min": [
          "FLOAT",
          {
            "default": 0.0291675,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "rho": [
          "FLOAT",
          {
            "default": 7.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01,
            "round": false
          }
        ],
        "beta_d": [
          "FLOAT",
          {
            "default": 19.9,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "beta_min": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01,
            "round": false
          }
        ],
        "eps_s": [
          "FLOAT",
          {
            "default": 0.001,
            "min": 0.0,
            "max": 1.0,
            "step": 0.0001,
            "round": false
          }
        ],
        "flip_sigmas": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "add_noise": [
          [
            "enable (CPU)",
            "enable (GPU=A1111)",
            "disable"
          ],
          {
            "default": "enable (CPU)"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ]
      },
      "optional": {
        "image_to_latent": [
          "IMAGE"
        ],
        "latent": [
          "LATENT"
        ],
        "optional_sampler": [
          "SAMPLER"
        ],
        "optional_sigmas": [
          "SIGMAS"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "guider",
        "cfg",
        "cfg_negative",
        "sampler_name",
        "scheduler",
        "coeff",
        "steps",
        "sigma_max",
        "sigma_min",
        "rho",
        "beta_d",
        "beta_min",
        "eps_s",
        "flip_sigmas",
        "denoise",
        "add_noise",
        "seed"
      ],
      "optional": [
        "image_to_latent",
        "latent",
        "optional_sampler",
        "optional_sigmas"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "pipe"
    ],
    "name": "easy preSamplingCustom",
    "display_name": "PreSampling (Custom)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/PreSampling",
    "output_node": false
  },
  "easy preSamplingSdTurbo": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "steps": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "eta": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01,
            "round": false
          }
        ],
        "s_noise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01,
            "round": false
          }
        ],
        "upscale_ratio": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.0,
            "max": 16.0,
            "step": 0.01,
            "round": false
          }
        ],
        "start_step": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "end_step": [
          "INT",
          {
            "default": 15,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "upscale_n_step": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "unsharp_kernel_size": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 21,
            "step": 1
          }
        ],
        "unsharp_sigma": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01,
            "round": false
          }
        ],
        "unsharp_strength": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01,
            "round": false
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "steps",
        "cfg",
        "sampler_name",
        "eta",
        "s_noise",
        "upscale_ratio",
        "start_step",
        "end_step",
        "upscale_n_step",
        "unsharp_kernel_size",
        "unsharp_sigma",
        "unsharp_strength",
        "seed"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "pipe"
    ],
    "name": "easy preSamplingSdTurbo",
    "display_name": "PreSampling (SDTurbo)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/PreSampling",
    "output_node": false
  },
  "easy preSamplingDynamicCFG": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "cfg_mode": [
          [
            "Constant",
            "Linear Down",
            "Cosine Down",
            "Half Cosine Down",
            "Linear Up",
            "Cosine Up",
            "Half Cosine Up",
            "Power Up",
            "Power Down",
            "Linear Repeating",
            "Cosine Repeating",
            "Sawtooth"
          ]
        ],
        "cfg_scale_min": [
          "FLOAT",
          {
            "default": 3.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.5
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "align_your_steps",
            "gits"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ]
      },
      "optional": {
        "image_to_latent": [
          "IMAGE"
        ],
        "latent": [
          "LATENT"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "steps",
        "cfg",
        "cfg_mode",
        "cfg_scale_min",
        "sampler_name",
        "scheduler",
        "denoise",
        "seed"
      ],
      "optional": [
        "image_to_latent",
        "latent"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "pipe"
    ],
    "name": "easy preSamplingDynamicCFG",
    "display_name": "PreSampling (DynamicCFG)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/PreSampling",
    "output_node": false
  },
  "easy preSamplingCascade": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "encode_vae_name": [
          [
            "None",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "decode_vae_name": [
          [
            "None",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 4.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "default": "euler_ancestral"
          }
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ],
          {
            "default": "simple"
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ]
      },
      "optional": {
        "image_to_latent_c": [
          "IMAGE"
        ],
        "latent_c": [
          "LATENT"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "encode_vae_name",
        "decode_vae_name",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "seed"
      ],
      "optional": [
        "image_to_latent_c",
        "latent_c"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "pipe"
    ],
    "name": "easy preSamplingCascade",
    "display_name": "PreSampling (Cascade)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/PreSampling",
    "output_node": false
  },
  "easy preSamplingLayerDiffusion": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "method": [
          [
            "Attention Injection",
            "Conv Injection",
            "Everything",
            "Foreground",
            "Background"
          ]
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "default": "euler"
          }
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "align_your_steps",
            "gits"
          ],
          {
            "default": "normal"
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "blended_image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "method",
        "weight",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "seed"
      ],
      "optional": [
        "image",
        "blended_image",
        "mask"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "pipe"
    ],
    "name": "easy preSamplingLayerDiffusion",
    "display_name": "PreSampling (LayerDiffuse)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/PreSampling",
    "output_node": false
  },
  "easy preSamplingLayerDiffusionADDTL": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "foreground_prompt": [
          "STRING",
          {
            "default": "",
            "placeholder": "Foreground Additional Prompt",
            "multiline": true
          }
        ],
        "background_prompt": [
          "STRING",
          {
            "default": "",
            "placeholder": "Background Additional Prompt",
            "multiline": true
          }
        ],
        "blended_prompt": [
          "STRING",
          {
            "default": "",
            "placeholder": "Blended Additional Prompt",
            "multiline": true
          }
        ]
      },
      "optional": {
        "optional_fg_cond": [
          "CONDITIONING"
        ],
        "optional_bg_cond": [
          "CONDITIONING"
        ],
        "optional_blended_cond": [
          "CONDITIONING"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "foreground_prompt",
        "background_prompt",
        "blended_prompt"
      ],
      "optional": [
        "optional_fg_cond",
        "optional_bg_cond",
        "optional_blended_cond"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "pipe"
    ],
    "name": "easy preSamplingLayerDiffusionADDTL",
    "display_name": "PreSampling (LayerDiffuse ADDTL)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/PreSampling",
    "output_node": false
  },
  "dynamicThresholdingFull": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "mimic_scale": [
          "FLOAT",
          {
            "default": 7.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.5
          }
        ],
        "threshold_percentile": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "mimic_mode": [
          [
            "Constant",
            "Linear Down",
            "Cosine Down",
            "Half Cosine Down",
            "Linear Up",
            "Cosine Up",
            "Half Cosine Up",
            "Power Up",
            "Power Down",
            "Linear Repeating",
            "Cosine Repeating",
            "Sawtooth"
          ]
        ],
        "mimic_scale_min": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.5
          }
        ],
        "cfg_mode": [
          [
            "Constant",
            "Linear Down",
            "Cosine Down",
            "Half Cosine Down",
            "Linear Up",
            "Cosine Up",
            "Half Cosine Up",
            "Power Up",
            "Power Down",
            "Linear Repeating",
            "Cosine Repeating",
            "Sawtooth"
          ]
        ],
        "cfg_scale_min": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.5
          }
        ],
        "sched_val": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "separate_feature_channels": [
          [
            "enable",
            "disable"
          ]
        ],
        "scaling_startpoint": [
          [
            "MEAN",
            "ZERO"
          ]
        ],
        "variability_measure": [
          [
            "AD",
            "STD"
          ]
        ],
        "interpolate_phi": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "mimic_scale",
        "threshold_percentile",
        "mimic_mode",
        "mimic_scale_min",
        "cfg_mode",
        "cfg_scale_min",
        "sched_val",
        "separate_feature_channels",
        "scaling_startpoint",
        "variability_measure",
        "interpolate_phi"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "dynamicThresholdingFull",
    "display_name": "DynamicThresholdingFull",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/PreSampling",
    "output_node": false
  },
  "easy fullkSampler": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "align_your_steps",
            "gits"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Preview&Choose",
            "Save",
            "Hide&Save",
            "Sender",
            "Sender&Save",
            "None"
          ]
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ],
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "clip": [
          "CLIP"
        ],
        "xyPlot": [
          "XYPLOT"
        ],
        "image": [
          "IMAGE"
        ]
      },
      "hidden": {
        "tile_size": "INT",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "embeddingsList": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "image_output",
        "link_id",
        "save_prefix"
      ],
      "optional": [
        "seed",
        "model",
        "positive",
        "negative",
        "latent",
        "vae",
        "clip",
        "xyPlot",
        "image"
      ],
      "hidden": [
        "tile_size",
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "embeddingsList"
      ]
    },
    "output": [
      "PIPE_LINE",
      "IMAGE",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "CLIP",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "image",
      "model",
      "positive",
      "negative",
      "latent",
      "vae",
      "clip",
      "seed"
    ],
    "name": "easy fullkSampler",
    "display_name": "EasyKSampler (Full)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Sampler",
    "output_node": true
  },
  "easy kSampler": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Preview&Choose",
            "Save",
            "Hide&Save",
            "Sender",
            "Sender&Save",
            "None"
          ],
          {
            "default": "Preview"
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ]
      },
      "hidden": {
        "tile_size": "INT",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "embeddingsList": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image_output",
        "link_id",
        "save_prefix"
      ],
      "optional": [
        "model"
      ],
      "hidden": [
        "tile_size",
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "embeddingsList"
      ]
    },
    "output": [
      "PIPE_LINE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "pipe",
      "image"
    ],
    "name": "easy kSampler",
    "display_name": "EasyKSampler",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Sampler",
    "output_node": true
  },
  "easy kSamplerCustom": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Preview&Choose",
            "Save",
            "Hide&Save",
            "Sender",
            "Sender&Save",
            "None"
          ],
          {
            "default": "None"
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ]
      },
      "hidden": {
        "tile_size": "INT",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "embeddingsList": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image_output",
        "link_id",
        "save_prefix"
      ],
      "optional": [
        "model"
      ],
      "hidden": [
        "tile_size",
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "embeddingsList"
      ]
    },
    "output": [
      "PIPE_LINE",
      "LATENT",
      "LATENT",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "output",
      "denoised_output",
      "image"
    ],
    "name": "easy kSamplerCustom",
    "display_name": "EasyKSampler (Custom)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Sampler",
    "output_node": true
  },
  "easy kSamplerTiled": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 4096,
            "step": 64
          }
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide&Save",
            "Sender",
            "Sender&Save",
            "None"
          ],
          {
            "default": "Preview"
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "embeddingsList": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "tile_size",
        "image_output",
        "link_id",
        "save_prefix"
      ],
      "optional": [
        "model"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "embeddingsList"
      ]
    },
    "output": [
      "PIPE_LINE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "pipe",
      "image"
    ],
    "name": "easy kSamplerTiled",
    "display_name": "EasyKSampler (Tiled Decode)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Sampler",
    "output_node": true
  },
  "easy kSamplerLayerDiffusion": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide&Save",
            "Sender",
            "Sender&Save"
          ],
          {
            "default": "Preview"
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "embeddingsList": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image_output",
        "link_id",
        "save_prefix"
      ],
      "optional": [
        "model"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "embeddingsList"
      ]
    },
    "output": [
      "PIPE_LINE",
      "IMAGE",
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false,
      false,
      true
    ],
    "output_name": [
      "pipe",
      "final_image",
      "original_image",
      "alpha"
    ],
    "name": "easy kSamplerLayerDiffusion",
    "display_name": "EasyKSampler (LayerDiffuse)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Sampler",
    "output_node": true
  },
  "easy kSamplerInpainting": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "grow_mask_by": [
          "INT",
          {
            "default": 6,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide&Save",
            "Sender",
            "Sender&Save"
          ],
          {
            "default": "Preview"
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "additional": [
          [
            "None",
            "InpaintModelCond",
            "Differential Diffusion",
            "Fooocus Inpaint",
            "Fooocus Inpaint + DD",
            "Brushnet Random",
            "Brushnet Random + DD",
            "Brushnet Segmentation",
            "Brushnet Segmentation + DD"
          ],
          {
            "default": "None"
          }
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ],
        "mask": [
          "MASK"
        ]
      },
      "hidden": {
        "tile_size": "INT",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "embeddingsList": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "grow_mask_by",
        "image_output",
        "link_id",
        "save_prefix",
        "additional"
      ],
      "optional": [
        "model",
        "mask"
      ],
      "hidden": [
        "tile_size",
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "embeddingsList"
      ]
    },
    "output": [
      "PIPE_LINE",
      "IMAGE",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "image",
      "vae"
    ],
    "name": "easy kSamplerInpainting",
    "display_name": "EasyKSampler (Inpainting)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Sampler",
    "output_node": true
  },
  "easy kSamplerDownscaleUnet": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "downscale_mode": [
          [
            "None",
            "Auto",
            "Custom"
          ],
          {
            "default": "Auto"
          }
        ],
        "block_number": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 32,
            "step": 1
          }
        ],
        "downscale_factor": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.1,
            "max": 9.0,
            "step": 0.001
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 0.35,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "downscale_after_skip": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "downscale_method": [
          [
            "bicubic",
            "nearest-exact",
            "bilinear",
            "area",
            "bislerp"
          ]
        ],
        "upscale_method": [
          [
            "bicubic",
            "nearest-exact",
            "bilinear",
            "area",
            "bislerp"
          ]
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide&Save",
            "Sender",
            "Sender&Save"
          ],
          {
            "default": "Preview"
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ]
      },
      "hidden": {
        "tile_size": "INT",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "embeddingsList": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "downscale_mode",
        "block_number",
        "downscale_factor",
        "start_percent",
        "end_percent",
        "downscale_after_skip",
        "downscale_method",
        "upscale_method",
        "image_output",
        "link_id",
        "save_prefix"
      ],
      "optional": [
        "model"
      ],
      "hidden": [
        "tile_size",
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "embeddingsList"
      ]
    },
    "output": [
      "PIPE_LINE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "pipe",
      "image"
    ],
    "name": "easy kSamplerDownscaleUnet",
    "display_name": "EasyKsampler (Downscale Unet)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Sampler",
    "output_node": true
  },
  "easy kSamplerSDTurbo": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide&Save",
            "Sender",
            "Sender&Save"
          ],
          {
            "default": "Preview"
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ]
      },
      "hidden": {
        "tile_size": "INT",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "embeddingsList": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image_output",
        "link_id",
        "save_prefix"
      ],
      "optional": [
        "model"
      ],
      "hidden": [
        "tile_size",
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "embeddingsList"
      ]
    },
    "output": [
      "PIPE_LINE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "pipe",
      "image"
    ],
    "name": "easy kSamplerSDTurbo",
    "display_name": "EasyKSampler (SDTurbo)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Sampler",
    "output_node": true
  },
  "easy fullCascadeKSampler": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "encode_vae_name": [
          [
            "None",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "decode_vae_name": [
          [
            "None",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 4.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "default": "euler_ancestral"
          }
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ],
          {
            "default": "simple"
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide&Save",
            "Sender",
            "Sender&Save"
          ]
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1125899906842624
          }
        ]
      },
      "optional": {
        "image_to_latent_c": [
          "IMAGE"
        ],
        "latent_c": [
          "LATENT"
        ],
        "model_c": [
          "MODEL"
        ]
      },
      "hidden": {
        "tile_size": "INT",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "embeddingsList": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "encode_vae_name",
        "decode_vae_name",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "image_output",
        "link_id",
        "save_prefix",
        "seed"
      ],
      "optional": [
        "image_to_latent_c",
        "latent_c",
        "model_c"
      ],
      "hidden": [
        "tile_size",
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "embeddingsList"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model_b",
      "latent_b"
    ],
    "name": "easy fullCascadeKSampler",
    "display_name": "EasyCascadeKsampler (Full)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Sampler",
    "output_node": true
  },
  "easy cascadeKSampler": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide&Save",
            "Sender",
            "Sender&Save"
          ],
          {
            "default": "Preview"
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "model_c": [
          "MODEL"
        ]
      },
      "hidden": {
        "tile_size": "INT",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID",
        "embeddingsList": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image_output",
        "link_id",
        "save_prefix"
      ],
      "optional": [
        "model_c"
      ],
      "hidden": [
        "tile_size",
        "prompt",
        "extra_pnginfo",
        "my_unique_id",
        "embeddingsList"
      ]
    },
    "output": [
      "PIPE_LINE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "pipe",
      "image"
    ],
    "name": "easy cascadeKSampler",
    "display_name": "EasyCascadeKsampler",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Sampler",
    "output_node": true
  },
  "easy unSampler": {
    "input": {
      "required": {
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "end_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "normalize": [
          [
            "disable",
            "enable"
          ]
        ]
      },
      "optional": {
        "pipe": [
          "PIPE_LINE"
        ],
        "optional_model": [
          "MODEL"
        ],
        "optional_positive": [
          "CONDITIONING"
        ],
        "optional_negative": [
          "CONDITIONING"
        ],
        "optional_latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "steps",
        "end_at_step",
        "cfg",
        "sampler_name",
        "scheduler",
        "normalize"
      ],
      "optional": [
        "pipe",
        "optional_model",
        "optional_positive",
        "optional_negative",
        "optional_latent"
      ]
    },
    "output": [
      "PIPE_LINE",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "pipe",
      "latent"
    ],
    "name": "easy unSampler",
    "display_name": "EasyUnSampler",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Sampler",
    "output_node": false
  },
  "easy hiresFix": {
    "input": {
      "required": {
        "model_name": [
          [
            "4x-UltraSharp.pth",
            "RealESRGAN_x2.pth"
          ]
        ],
        "rescale_after_model": [
          [
            false,
            true
          ],
          {
            "default": true
          }
        ],
        "rescale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos",
            "bislerp"
          ]
        ],
        "rescale": [
          [
            "by percentage",
            "to Width/Height",
            "to longer side - maintain aspect"
          ]
        ],
        "percent": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "longer_side": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide&Save",
            "Sender",
            "Sender&Save"
          ],
          {
            "default": "Preview"
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "model_name",
        "rescale_after_model",
        "rescale_method",
        "rescale",
        "percent",
        "width",
        "height",
        "longer_side",
        "crop",
        "image_output",
        "link_id",
        "save_prefix"
      ],
      "optional": [
        "pipe",
        "image",
        "vae"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "IMAGE",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "image",
      "latent"
    ],
    "name": "easy hiresFix",
    "display_name": "HiresFix",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Fix",
    "output_node": true
  },
  "easy preDetailerFix": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "guide_size": [
          "FLOAT",
          {
            "default": 256,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "guide_size_for": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "bbox",
            "label_off": "crop_region"
          }
        ],
        "max_size": [
          "FLOAT",
          {
            "default": 768,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "align_your_steps"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "noise_mask": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "force_inpaint": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "wildcard": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "cycle": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      },
      "optional": {
        "bbox_segm_pipe": [
          "PIPE_LINE"
        ],
        "sam_pipe": [
          "PIPE_LINE"
        ],
        "optional_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "guide_size",
        "guide_size_for",
        "max_size",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "feather",
        "noise_mask",
        "force_inpaint",
        "drop_size",
        "wildcard",
        "cycle"
      ],
      "optional": [
        "bbox_segm_pipe",
        "sam_pipe",
        "optional_image"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "pipe"
    ],
    "name": "easy preDetailerFix",
    "display_name": "PreDetailerFix",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Fix",
    "output_node": false
  },
  "easy preMaskDetailerFix": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "mask": [
          "MASK"
        ],
        "guide_size": [
          "FLOAT",
          {
            "default": 384,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "guide_size_for": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "bbox",
            "label_off": "crop_region"
          }
        ],
        "max_size": [
          "FLOAT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "mask_mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "masked only",
            "label_off": "whole"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 10,
            "step": 0.1
          }
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "refiner_ratio": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 100
          }
        ],
        "cycle": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      },
      "optional": {
        "optional_image": [
          "IMAGE"
        ],
        "inpaint_model": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "mask",
        "guide_size",
        "guide_size_for",
        "max_size",
        "mask_mode",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "feather",
        "crop_factor",
        "drop_size",
        "refiner_ratio",
        "batch_size",
        "cycle"
      ],
      "optional": [
        "optional_image",
        "inpaint_model",
        "noise_mask_feather"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "pipe"
    ],
    "name": "easy preMaskDetailerFix",
    "display_name": "preMaskDetailerFix",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Fix",
    "output_node": false
  },
  "easy ultralyticsDetectorPipe": {
    "input": {
      "required": {
        "model_name": [
          [
            "bbox/face_yolov8m.pt",
            "bbox/hand_yolov8s.pt",
            "segm/person_yolov8m-seg.pt"
          ]
        ],
        "bbox_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "bbox_dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "bbox_crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 10,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name",
        "bbox_threshold",
        "bbox_dilation",
        "bbox_crop_factor"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "bbox_segm_pipe"
    ],
    "name": "easy ultralyticsDetectorPipe",
    "display_name": "UltralyticsDetector (Pipe)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Fix",
    "output_node": false
  },
  "easy samLoaderPipe": {
    "input": {
      "required": {
        "model_name": [
          [
            "sam_vit_b_01ec64.pth"
          ]
        ],
        "device_mode": [
          [
            "AUTO",
            "Prefer GPU",
            "CPU"
          ],
          {
            "default": "AUTO"
          }
        ],
        "sam_detection_hint": [
          [
            "center-1",
            "horizontal-2",
            "vertical-2",
            "rect-4",
            "diamond-4",
            "mask-area",
            "mask-points",
            "mask-point-bbox",
            "none"
          ]
        ],
        "sam_dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "sam_threshold": [
          "FLOAT",
          {
            "default": 0.93,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "sam_bbox_expansion": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "sam_mask_hint_threshold": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "sam_mask_hint_use_negative": [
          [
            "False",
            "Small",
            "Outter"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name",
        "device_mode",
        "sam_detection_hint",
        "sam_dilation",
        "sam_threshold",
        "sam_bbox_expansion",
        "sam_mask_hint_threshold",
        "sam_mask_hint_use_negative"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "sam_pipe"
    ],
    "name": "easy samLoaderPipe",
    "display_name": "SAMLoader (Pipe)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Fix",
    "output_node": false
  },
  "easy detailerFix": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide&Save",
            "Sender",
            "Sender&Save"
          ],
          {
            "default": "Preview"
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "image_output",
        "link_id",
        "save_prefix"
      ],
      "optional": [
        "model"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      true,
      true
    ],
    "output_name": [
      "pipe",
      "image",
      "cropped_refined",
      "cropped_enhanced_alpha"
    ],
    "name": "easy detailerFix",
    "display_name": "DetailerFix",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Fix",
    "output_node": true
  },
  "easy pipeIn": {
    "input": {
      "required": {},
      "optional": {
        "pipe": [
          "PIPE_LINE"
        ],
        "model": [
          "MODEL"
        ],
        "pos": [
          "CONDITIONING"
        ],
        "neg": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "clip": [
          "CLIP"
        ],
        "image": [
          "IMAGE"
        ],
        "xyPlot": [
          "XYPLOT"
        ]
      },
      "hidden": {
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "pipe",
        "model",
        "pos",
        "neg",
        "latent",
        "vae",
        "clip",
        "image",
        "xyPlot"
      ],
      "hidden": [
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "pipe"
    ],
    "name": "easy pipeIn",
    "display_name": "Pipe In",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Pipe",
    "output_node": false
  },
  "easy pipeOut": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ]
      },
      "hidden": {
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe"
      ],
      "hidden": [
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "CLIP",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model",
      "pos",
      "neg",
      "latent",
      "vae",
      "clip",
      "image",
      "seed"
    ],
    "name": "easy pipeOut",
    "display_name": "Pipe Out",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Pipe",
    "output_node": false
  },
  "easy pipeEdit": {
    "input": {
      "required": {
        "clip_skip": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": 0,
            "step": 1
          }
        ],
        "optional_positive": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "positive_token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "positive_weight_interpretation": [
          [
            "comfy",
            "A1111",
            "comfy++",
            "compel",
            "fixed attention"
          ]
        ],
        "optional_negative": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "negative_token_normalization": [
          [
            "none",
            "mean",
            "length",
            "length+mean"
          ]
        ],
        "negative_weight_interpretation": [
          [
            "comfy",
            "A1111",
            "comfy++",
            "compel",
            "fixed attention"
          ]
        ],
        "a1111_prompt_style": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "conditioning_mode": [
          [
            "replace",
            "concat",
            "combine",
            "average",
            "timestep"
          ],
          {
            "default": "replace"
          }
        ],
        "average_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "old_cond_start": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "old_cond_end": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "new_cond_start": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "new_cond_end": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "pipe": [
          "PIPE_LINE"
        ],
        "model": [
          "MODEL"
        ],
        "pos": [
          "CONDITIONING"
        ],
        "neg": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "clip": [
          "CLIP"
        ],
        "image": [
          "IMAGE"
        ]
      },
      "hidden": {
        "my_unique_id": "UNIQUE_ID",
        "prompt": "PROMPT"
      }
    },
    "input_order": {
      "required": [
        "clip_skip",
        "optional_positive",
        "positive_token_normalization",
        "positive_weight_interpretation",
        "optional_negative",
        "negative_token_normalization",
        "negative_weight_interpretation",
        "a1111_prompt_style",
        "conditioning_mode",
        "average_strength",
        "old_cond_start",
        "old_cond_end",
        "new_cond_start",
        "new_cond_end"
      ],
      "optional": [
        "pipe",
        "model",
        "pos",
        "neg",
        "latent",
        "vae",
        "clip",
        "image"
      ],
      "hidden": [
        "my_unique_id",
        "prompt"
      ]
    },
    "output": [
      "PIPE_LINE",
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE",
      "CLIP",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "model",
      "pos",
      "neg",
      "latent",
      "vae",
      "clip",
      "image"
    ],
    "name": "easy pipeEdit",
    "display_name": "Pipe Edit",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Pipe",
    "output_node": false
  },
  "easy pipeEditPrompt": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "positive": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      },
      "hidden": {
        "my_unique_id": "UNIQUE_ID",
        "prompt": "PROMPT"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "positive",
        "negative"
      ],
      "hidden": [
        "my_unique_id",
        "prompt"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "pipe"
    ],
    "name": "easy pipeEditPrompt",
    "display_name": "Pipe Edit Prompt",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Pipe",
    "output_node": false
  },
  "easy pipeToBasicPipe": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ]
      },
      "hidden": {
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe"
      ],
      "hidden": [
        "my_unique_id"
      ]
    },
    "output": [
      "BASIC_PIPE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "basic_pipe"
    ],
    "name": "easy pipeToBasicPipe",
    "display_name": "Pipe -> BasicPipe",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Pipe",
    "output_node": false
  },
  "easy pipeBatchIndex": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "batch_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 63
          }
        ],
        "length": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      },
      "hidden": {
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "batch_index",
        "length"
      ],
      "hidden": [
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "pipe"
    ],
    "name": "easy pipeBatchIndex",
    "display_name": "Pipe Batch Index",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Pipe",
    "output_node": false
  },
  "easy XYPlot": {
    "input": {
      "required": {
        "grid_spacing": [
          "INT",
          {
            "min": 0,
            "max": 500,
            "step": 5,
            "default": 0
          }
        ],
        "output_individuals": [
          [
            "False",
            "True"
          ],
          {
            "default": "False"
          }
        ],
        "flip_xy": [
          [
            "False",
            "True"
          ],
          {
            "default": "False"
          }
        ],
        "x_axis": [
          [
            "None",
            "---------------------",
            "preSampling: steps",
            "preSampling: cfg",
            "preSampling: sampler_name",
            "preSampling: scheduler",
            "preSampling: denoise",
            "preSampling: seed",
            "---------------------",
            "loader: ckpt_name",
            "loader: vae_name",
            "loader: clip_skip",
            "loader: lora_name",
            "loader: lora_model_strength",
            "loader: lora_clip_strength",
            "loader: positive",
            "loader: negative"
          ],
          {
            "default": "None"
          }
        ],
        "x_values": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "placeholder": "insert values seperated by \"; \""
          }
        ],
        "y_axis": [
          [
            "None",
            "---------------------",
            "preSampling: steps",
            "preSampling: cfg",
            "preSampling: sampler_name",
            "preSampling: scheduler",
            "preSampling: denoise",
            "preSampling: seed",
            "---------------------",
            "loader: ckpt_name",
            "loader: vae_name",
            "loader: clip_skip",
            "loader: lora_name",
            "loader: lora_model_strength",
            "loader: lora_clip_strength",
            "loader: positive",
            "loader: negative"
          ],
          {
            "default": "None"
          }
        ],
        "y_values": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "placeholder": "insert values seperated by \"; \""
          }
        ]
      },
      "optional": {
        "pipe": [
          "PIPE_LINE"
        ]
      },
      "hidden": {
        "plot_dict": [
          {
            "steps": {
              "min": 1,
              "max": 100,
              "step": 1
            },
            "cfg": {
              "min": 0.0,
              "max": 100.0,
              "step": 1.0
            },
            "sampler_name": [
              "euler",
              "euler_cfg_pp",
              "euler_ancestral",
              "euler_ancestral_cfg_pp",
              "heun",
              "heunpp2",
              "dpm_2",
              "dpm_2_ancestral",
              "lms",
              "dpm_fast",
              "dpm_adaptive",
              "dpmpp_2s_ancestral",
              "dpmpp_2s_ancestral_cfg_pp",
              "dpmpp_sde",
              "dpmpp_sde_gpu",
              "dpmpp_2m",
              "dpmpp_2m_cfg_pp",
              "dpmpp_2m_sde",
              "dpmpp_2m_sde_gpu",
              "dpmpp_3m_sde",
              "dpmpp_3m_sde_gpu",
              "ddpm",
              "lcm",
              "ipndm",
              "ipndm_v",
              "deis",
              "res_multistep",
              "res_multistep_cfg_pp",
              "res_multistep_ancestral",
              "res_multistep_ancestral_cfg_pp",
              "gradient_estimation",
              "er_sde",
              "seeds_2",
              "seeds_3",
              "ddim",
              "uni_pc",
              "uni_pc_bh2"
            ],
            "scheduler": [
              "normal",
              "karras",
              "exponential",
              "sgm_uniform",
              "simple",
              "ddim_uniform",
              "beta",
              "linear_quadratic",
              "kl_optimal"
            ],
            "denoise": {
              "min": 0.0,
              "max": 1.0,
              "step": 0.01
            },
            "seed": {
              "min": 0,
              "max": 1125899906842624
            },
            "ckpt_name": [
              "disneyrealcartoonmix_v10.safetensors",
              "katayamaMixXLV2_katayamaMixXLV2.safetensors",
              "realvisxlV50_v50LightningBakedvae.safetensors",
              "zavychromaxl_v100.safetensors"
            ],
            "vae_name": [
              "Baked-VAE",
              "SDXL/sdxl_vae.safetensors",
              "Wan2_1_VAE_bf16.safetensors",
              "Wan2_1_VAE_fp32.safetensors",
              "wan_2.1_vae.safetensors"
            ],
            "clip_skip": {
              "min": -24,
              "max": -1,
              "step": 1
            },
            "lora_name": [
              "None"
            ],
            "lora_model_strength": {
              "min": -4.0,
              "max": 4.0,
              "step": 0.01
            },
            "lora_clip_strength": {
              "min": -4.0,
              "max": 4.0,
              "step": 0.01
            },
            "positive": [],
            "negative": []
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "grid_spacing",
        "output_individuals",
        "flip_xy",
        "x_axis",
        "x_values",
        "y_axis",
        "y_values"
      ],
      "optional": [
        "pipe"
      ],
      "hidden": [
        "plot_dict"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "pipe"
    ],
    "name": "easy XYPlot",
    "display_name": "XY Plot",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Pipe",
    "output_node": false
  },
  "easy XYPlotAdvanced": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "grid_spacing": [
          "INT",
          {
            "min": 0,
            "max": 500,
            "step": 5,
            "default": 0
          }
        ],
        "output_individuals": [
          [
            "False",
            "True"
          ],
          {
            "default": "False"
          }
        ],
        "flip_xy": [
          [
            "False",
            "True"
          ],
          {
            "default": "False"
          }
        ]
      },
      "optional": {
        "X": [
          "X_Y"
        ],
        "Y": [
          "X_Y"
        ],
        "font": [
          [
            "None"
          ]
        ]
      },
      "hidden": {
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "grid_spacing",
        "output_individuals",
        "flip_xy"
      ],
      "optional": [
        "X",
        "Y",
        "font"
      ],
      "hidden": [
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "pipe"
    ],
    "name": "easy XYPlotAdvanced",
    "display_name": "XY Plot Advanced",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Pipe",
    "output_node": false
  },
  "easy XYInputs: Seeds++ Batch": {
    "input": {
      "required": {
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 50
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "batch_count"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: Seeds++ Batch",
    "display_name": "XY Inputs: Seeds++ Batch //EasyUse",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: Steps": {
    "input": {
      "required": {
        "target_parameter": [
          [
            "steps",
            "start_at_step",
            "end_at_step"
          ]
        ],
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "first_step": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 10000
          }
        ],
        "last_step": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "first_start_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "last_start_step": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 10000
          }
        ],
        "first_end_step": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 10000
          }
        ],
        "last_end_step": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "target_parameter",
        "batch_count",
        "first_step",
        "last_step",
        "first_start_step",
        "last_start_step",
        "first_end_step",
        "last_end_step"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: Steps",
    "display_name": "XY Inputs: Steps //EasyUse",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: CFG Scale": {
    "input": {
      "required": {
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "first_cfg": [
          "FLOAT",
          {
            "default": 7.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "last_cfg": [
          "FLOAT",
          {
            "default": 9.0,
            "min": 0.0,
            "max": 100.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "batch_count",
        "first_cfg",
        "last_cfg"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: CFG Scale",
    "display_name": "XY Inputs: CFG Scale //EasyUse",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: FluxGuidance": {
    "input": {
      "required": {
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "first_guidance": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "last_guidance": [
          "FLOAT",
          {
            "default": 3.5,
            "min": 0.0,
            "max": 100.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "batch_count",
        "first_guidance",
        "last_guidance"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: FluxGuidance",
    "display_name": "XY Inputs: Flux Guidance //EasyUse",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: Sampler/Scheduler": {
    "input": {
      "required": {
        "target_parameter": [
          [
            "sampler",
            "scheduler",
            "sampler & scheduler"
          ]
        ],
        "input_count": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 30,
            "step": 1
          }
        ],
        "sampler_1": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_1": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_2": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_2": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_3": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_3": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_4": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_4": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_5": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_5": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_6": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_6": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_7": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_7": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_8": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_8": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_9": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_9": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_10": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_10": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_11": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_11": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_12": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_12": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_13": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_13": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_14": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_14": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_15": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_15": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_16": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_16": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_17": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_17": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_18": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_18": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_19": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_19": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_20": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_20": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_21": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_21": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_22": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_22": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_23": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_23": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_24": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_24": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_25": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_25": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_26": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_26": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_27": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_27": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_28": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_28": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_29": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_29": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "sampler_30": [
          [
            "None",
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler_30": [
          [
            "None",
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "target_parameter",
        "input_count",
        "sampler_1",
        "scheduler_1",
        "sampler_2",
        "scheduler_2",
        "sampler_3",
        "scheduler_3",
        "sampler_4",
        "scheduler_4",
        "sampler_5",
        "scheduler_5",
        "sampler_6",
        "scheduler_6",
        "sampler_7",
        "scheduler_7",
        "sampler_8",
        "scheduler_8",
        "sampler_9",
        "scheduler_9",
        "sampler_10",
        "scheduler_10",
        "sampler_11",
        "scheduler_11",
        "sampler_12",
        "scheduler_12",
        "sampler_13",
        "scheduler_13",
        "sampler_14",
        "scheduler_14",
        "sampler_15",
        "scheduler_15",
        "sampler_16",
        "scheduler_16",
        "sampler_17",
        "scheduler_17",
        "sampler_18",
        "scheduler_18",
        "sampler_19",
        "scheduler_19",
        "sampler_20",
        "scheduler_20",
        "sampler_21",
        "scheduler_21",
        "sampler_22",
        "scheduler_22",
        "sampler_23",
        "scheduler_23",
        "sampler_24",
        "scheduler_24",
        "sampler_25",
        "scheduler_25",
        "sampler_26",
        "scheduler_26",
        "sampler_27",
        "scheduler_27",
        "sampler_28",
        "scheduler_28",
        "sampler_29",
        "scheduler_29",
        "sampler_30",
        "scheduler_30"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: Sampler/Scheduler",
    "display_name": "XY Inputs: Sampler/Scheduler //EasyUse",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: Denoise": {
    "input": {
      "required": {
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 50
          }
        ],
        "first_denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.1
          }
        ],
        "last_denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "batch_count",
        "first_denoise",
        "last_denoise"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: Denoise",
    "display_name": "XY Inputs: Denoise //EasyUse",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: Checkpoint": {
    "input": {
      "required": {
        "input_mode": [
          [
            "Ckpt Names",
            "Ckpt Names+ClipSkip",
            "Ckpt Names+ClipSkip+VAE"
          ]
        ],
        "ckpt_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 10,
            "step": 1
          }
        ],
        "ckpt_name_1": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_1": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_1": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_2": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_2": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_2": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_3": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_3": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_3": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_4": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_4": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_4": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_5": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_5": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_5": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_6": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_6": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_6": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_7": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_7": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_7": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_8": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_8": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_8": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_9": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_9": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_9": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "ckpt_name_10": [
          [
            "None",
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "clip_skip_10": [
          "INT",
          {
            "default": -1,
            "min": -24,
            "max": -1,
            "step": 1
          }
        ],
        "vae_name_10": [
          [
            "Baked VAE",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ]
      },
      "optional": {
        "optional_lora_stack": [
          "LORA_STACK"
        ]
      }
    },
    "input_order": {
      "required": [
        "input_mode",
        "ckpt_count",
        "ckpt_name_1",
        "clip_skip_1",
        "vae_name_1",
        "ckpt_name_2",
        "clip_skip_2",
        "vae_name_2",
        "ckpt_name_3",
        "clip_skip_3",
        "vae_name_3",
        "ckpt_name_4",
        "clip_skip_4",
        "vae_name_4",
        "ckpt_name_5",
        "clip_skip_5",
        "vae_name_5",
        "ckpt_name_6",
        "clip_skip_6",
        "vae_name_6",
        "ckpt_name_7",
        "clip_skip_7",
        "vae_name_7",
        "ckpt_name_8",
        "clip_skip_8",
        "vae_name_8",
        "ckpt_name_9",
        "clip_skip_9",
        "vae_name_9",
        "ckpt_name_10",
        "clip_skip_10",
        "vae_name_10"
      ],
      "optional": [
        "optional_lora_stack"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: Checkpoint",
    "display_name": "XY Inputs: Checkpoint //EasyUse",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: Lora": {
    "input": {
      "required": {
        "input_mode": [
          [
            "Lora Names",
            "Lora Names+Weights"
          ]
        ],
        "lora_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 10,
            "step": 1
          }
        ],
        "model_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_1": [
          [
            "None"
          ]
        ],
        "model_str_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_2": [
          [
            "None"
          ]
        ],
        "model_str_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_3": [
          [
            "None"
          ]
        ],
        "model_str_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_4": [
          [
            "None"
          ]
        ],
        "model_str_4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_5": [
          [
            "None"
          ]
        ],
        "model_str_5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_6": [
          [
            "None"
          ]
        ],
        "model_str_6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_7": [
          [
            "None"
          ]
        ],
        "model_str_7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_8": [
          [
            "None"
          ]
        ],
        "model_str_8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_9": [
          [
            "None"
          ]
        ],
        "model_str_9": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_9": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_name_10": [
          [
            "None"
          ]
        ],
        "model_str_10": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clip_str_10": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "optional_lora_stack": [
          "LORA_STACK"
        ],
        "display_trigger_word": [
          "BOOLEAN",
          {
            "display_trigger_word": true,
            "tooltip": "Trigger words showing lora model pass through the model's metadata, but not necessarily accurately."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_mode",
        "lora_count",
        "model_strength",
        "clip_strength",
        "lora_name_1",
        "model_str_1",
        "clip_str_1",
        "lora_name_2",
        "model_str_2",
        "clip_str_2",
        "lora_name_3",
        "model_str_3",
        "clip_str_3",
        "lora_name_4",
        "model_str_4",
        "clip_str_4",
        "lora_name_5",
        "model_str_5",
        "clip_str_5",
        "lora_name_6",
        "model_str_6",
        "clip_str_6",
        "lora_name_7",
        "model_str_7",
        "clip_str_7",
        "lora_name_8",
        "model_str_8",
        "clip_str_8",
        "lora_name_9",
        "model_str_9",
        "clip_str_9",
        "lora_name_10",
        "model_str_10",
        "clip_str_10"
      ],
      "optional": [
        "optional_lora_stack",
        "display_trigger_word"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: Lora",
    "display_name": "XY Inputs: Lora //EasyUse",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: ModelMergeBlocks": {
    "input": {
      "required": {
        "ckpt_name_1": [
          [
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "ckpt_name_2": [
          [
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ],
        "vae_use": [
          [
            "Use Model 1",
            "Use Model 2",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ],
          {
            "default": "Use Model 1"
          }
        ],
        "preset": [
          [
            "Preset",
            "MMB-ALL:1,1,1",
            "MMB-IN:1,0,0",
            "MMB-MID:0,1,0",
            "MMB-OUT:0,0,1",
            "MMB-INMID:1,1,0",
            "MMB-INOUT:1,0,1",
            "MMB-MIDOUT:0,1,1",
            "MMB-NONE:0,0,0",
            "@MMBN-FULL-TEST:27"
          ],
          {
            "default": "preset"
          }
        ],
        "values": [
          "STRING",
          {
            "default": "1,0,0; \n0,1,0; \n0,0,1; \n1,1,0; \n1,0,1; \n0,1,1; ",
            "multiline": true,
            "placeholder": "Support 2 methods:\n\n1.input, middle, out in same line and insert values seperated by \"; \"\n\n2.model merge block number seperated by \", \" in same line and insert values seperated by \"; \""
          }
        ]
      },
      "hidden": {
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "ckpt_name_1",
        "ckpt_name_2",
        "vae_use",
        "preset",
        "values"
      ],
      "hidden": [
        "my_unique_id"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: ModelMergeBlocks",
    "display_name": "XY Inputs: ModelMergeBlocks //EasyUse",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: PromptSR": {
    "input": {
      "required": {
        "target_prompt": [
          [
            "positive",
            "negative"
          ]
        ],
        "search_txt": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "replace_all_text": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "replace_count": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 29
          }
        ],
        "replace_1": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_1"
          }
        ],
        "replace_2": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_2"
          }
        ],
        "replace_3": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_3"
          }
        ],
        "replace_4": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_4"
          }
        ],
        "replace_5": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_5"
          }
        ],
        "replace_6": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_6"
          }
        ],
        "replace_7": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_7"
          }
        ],
        "replace_8": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_8"
          }
        ],
        "replace_9": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_9"
          }
        ],
        "replace_10": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_10"
          }
        ],
        "replace_11": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_11"
          }
        ],
        "replace_12": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_12"
          }
        ],
        "replace_13": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_13"
          }
        ],
        "replace_14": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_14"
          }
        ],
        "replace_15": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_15"
          }
        ],
        "replace_16": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_16"
          }
        ],
        "replace_17": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_17"
          }
        ],
        "replace_18": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_18"
          }
        ],
        "replace_19": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_19"
          }
        ],
        "replace_20": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_20"
          }
        ],
        "replace_21": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_21"
          }
        ],
        "replace_22": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_22"
          }
        ],
        "replace_23": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_23"
          }
        ],
        "replace_24": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_24"
          }
        ],
        "replace_25": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_25"
          }
        ],
        "replace_26": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_26"
          }
        ],
        "replace_27": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_27"
          }
        ],
        "replace_28": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_28"
          }
        ],
        "replace_29": [
          "STRING",
          {
            "default": "",
            "multiline": false,
            "placeholder": "replace_29"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "target_prompt",
        "search_txt",
        "replace_all_text",
        "replace_count",
        "replace_1",
        "replace_2",
        "replace_3",
        "replace_4",
        "replace_5",
        "replace_6",
        "replace_7",
        "replace_8",
        "replace_9",
        "replace_10",
        "replace_11",
        "replace_12",
        "replace_13",
        "replace_14",
        "replace_15",
        "replace_16",
        "replace_17",
        "replace_18",
        "replace_19",
        "replace_20",
        "replace_21",
        "replace_22",
        "replace_23",
        "replace_24",
        "replace_25",
        "replace_26",
        "replace_27",
        "replace_28",
        "replace_29"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: PromptSR",
    "display_name": "XY Inputs: PromptSR //EasyUse",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: ControlNet": {
    "input": {
      "required": {
        "control_net_name": [
          [
            "SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors"
          ]
        ],
        "image": [
          "IMAGE"
        ],
        "target_parameter": [
          [
            "strength",
            "start_percent",
            "end_percent"
          ]
        ],
        "batch_count": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 30
          }
        ],
        "first_strength": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "last_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "first_start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "last_start_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "first_end_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "last_end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net_name",
        "image",
        "target_parameter",
        "batch_count",
        "first_strength",
        "last_strength",
        "first_start_percent",
        "last_start_percent",
        "first_end_percent",
        "last_end_percent",
        "strength",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: ControlNet",
    "display_name": "XY Inputs: Controlnet //EasyUse",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: PositiveCond": {
    "input": {
      "optional": {
        "positive_1": [
          "CONDITIONING"
        ],
        "positive_2": [
          "CONDITIONING"
        ],
        "positive_3": [
          "CONDITIONING"
        ],
        "positive_4": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "optional": [
        "positive_1",
        "positive_2",
        "positive_3",
        "positive_4"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: PositiveCond",
    "display_name": "XY Inputs: PosCond //EasyUse",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: PositiveCondList": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: PositiveCondList",
    "display_name": "XY Inputs: PosCondList //EasyUse",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: NegativeCond": {
    "input": {
      "optional": {
        "negative_1": [
          "CONDITIONING"
        ],
        "negative_2": [
          "CONDITIONING"
        ],
        "negative_3": [
          "CONDITIONING"
        ],
        "negative_4": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "optional": [
        "negative_1",
        "negative_2",
        "negative_3",
        "negative_4"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: NegativeCond",
    "display_name": "XY Inputs: NegCond //EasyUse",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy XYInputs: NegativeCondList": {
    "input": {
      "required": {
        "negative": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "negative"
      ]
    },
    "output": [
      "X_Y"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "X or Y"
    ],
    "name": "easy XYInputs: NegativeCondList",
    "display_name": "XY Inputs: NegCondList //EasyUse",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/XY Inputs",
    "output_node": false
  },
  "easy imageInsetCrop": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "measurement": [
          [
            "Pixels",
            "Percentage"
          ]
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "measurement",
        "left",
        "right",
        "top",
        "bottom"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "easy imageInsetCrop",
    "display_name": "ImageInsetCrop",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageCount": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "count"
    ],
    "name": "easy imageCount",
    "display_name": "ImageCount",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imagesCountInDirectory": {
    "input": {
      "required": {
        "directory": [
          "STRING"
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "limit": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "directory",
        "start_index",
        "limit"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "count"
    ],
    "name": "easy imagesCountInDirectory",
    "display_name": "imagesCountInDirectory",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageSize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "width_int",
      "height_int"
    ],
    "name": "easy imageSize",
    "display_name": "ImageSize",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": true
  },
  "easy imageSizeBySide": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "side": [
          [
            "Longest",
            "Shortest"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "side"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "resolution"
    ],
    "name": "easy imageSizeBySide",
    "display_name": "ImageSize (Side)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": true
  },
  "easy imageSizeByLongerSide": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "resolution"
    ],
    "name": "easy imageSizeByLongerSide",
    "display_name": "ImageSize (LongerSide)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": true
  },
  "easy imagePixelPerfect": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "resize_mode": [
          [
            "Just Resize",
            "Crop and Resize",
            "Resize and Fill"
          ],
          {
            "default": "Just Resize"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "resize_mode"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "resolution"
    ],
    "name": "easy imagePixelPerfect",
    "display_name": "ImagePixelPerfect",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": true
  },
  "easy imageScaleDown": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "width",
        "height",
        "crop"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "easy imageScaleDown",
    "display_name": "Image Scale Down",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageScaleDownBy": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "scale_by": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.01,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "scale_by"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "easy imageScaleDownBy",
    "display_name": "Image Scale Down By",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageScaleDownToSize": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "size": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "max",
            "label_off": "min"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "size",
        "mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "easy imageScaleDownToSize",
    "display_name": "Image Scale Down To Size",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageScaleToNormPixels": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "scale_by": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 8.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "upscale_method",
        "scale_by"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "easy imageScaleToNormPixels",
    "display_name": "ImageScaleToNormPixels",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageRatio": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "INT",
      "INT",
      "FLOAT",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "width_ratio_int",
      "height_ratio_int",
      "width_ratio_float",
      "height_ratio_float"
    ],
    "name": "easy imageRatio",
    "display_name": "ImageRatio",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": true
  },
  "easy imageConcat": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "direction": [
          [
            "right",
            "down",
            "left",
            "up"
          ],
          {
            "default": "right"
          }
        ],
        "match_image_size": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2",
        "direction",
        "match_image_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "easy imageConcat",
    "display_name": "imageConcat",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageListToImageBatch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "easy imageListToImageBatch",
    "display_name": "Image List To Image Batch",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageBatchToImageList": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "easy imageBatchToImageList",
    "display_name": "Image Batch To Image List",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageSplitList": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "images",
      "images",
      "images"
    ],
    "name": "easy imageSplitList",
    "display_name": "imageSplitList",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageSplitGrid": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "row": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ],
        "column": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "row",
        "column"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "easy imageSplitGrid",
    "display_name": "imageSplitGrid",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imagesSplitImage": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image1",
      "image2",
      "image3",
      "image4",
      "image5"
    ],
    "name": "easy imagesSplitImage",
    "display_name": "imagesSplitImage",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageSplitTiles": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "overlap_ratio": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 0.5,
            "step": 0.01
          }
        ],
        "overlap_offset": [
          "INT",
          {
            "default": 0,
            "min": -8192,
            "max": 8192,
            "step": 1
          }
        ],
        "tiles_rows": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 50,
            "step": 1
          }
        ],
        "tiles_cols": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 50,
            "step": 1
          }
        ]
      },
      "optional": {
        "norm": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "overlap_ratio",
        "overlap_offset",
        "tiles_rows",
        "tiles_cols"
      ],
      "optional": [
        "norm"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "OVERLAP",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "tiles",
      "masks",
      "overlap",
      "total"
    ],
    "name": "easy imageSplitTiles",
    "display_name": "imageSplitTiles",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageTilesFromBatch": {
    "input": {
      "required": {
        "tiles": [
          "IMAGE"
        ],
        "masks": [
          "MASK"
        ],
        "overlap": [
          "OVERLAP"
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "tiles",
        "masks",
        "overlap",
        "index"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "x",
      "y"
    ],
    "name": "easy imageTilesFromBatch",
    "display_name": "imageTilesFromBatch",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageCropFromMask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "image_crop_multi": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "mask_crop_multi": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "bbox_smooth_alpha": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask",
        "image_crop_multi",
        "mask_crop_multi",
        "bbox_smooth_alpha"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "BBOX"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "crop_image",
      "crop_mask",
      "bbox"
    ],
    "name": "easy imageCropFromMask",
    "display_name": "imageCropFromMask",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageUncropFromBBOX": {
    "input": {
      "required": {
        "original_image": [
          "IMAGE"
        ],
        "crop_image": [
          "IMAGE"
        ],
        "bbox": [
          "BBOX"
        ],
        "border_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "use_square_mask": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "optional_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "original_image",
        "crop_image",
        "bbox",
        "border_blending",
        "use_square_mask"
      ],
      "optional": [
        "optional_mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "easy imageUncropFromBBOX",
    "display_name": "imageUncropFromBBOX",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy imageSave": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "only_preview": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "only_preview"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "easy imageSave",
    "display_name": "Save Image (Simple)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": true
  },
  "easy imageRemBg": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "rem_mode": [
          [
            "RMBG-2.0",
            "RMBG-1.4",
            "Inspyrenet",
            "BEN2"
          ],
          {
            "default": "RMBG-1.4"
          }
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide/Save"
          ],
          {
            "default": "Preview"
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "torchscript_jit": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "add_background": [
          [
            "none",
            "white",
            "black"
          ],
          {
            "default": "none"
          }
        ],
        "refine_foreground": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "rem_mode",
        "image_output",
        "save_prefix"
      ],
      "optional": [
        "torchscript_jit",
        "add_background",
        "refine_foreground"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "mask"
    ],
    "name": "easy imageRemBg",
    "display_name": "Image Remove Bg",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": true
  },
  "easy imageChooser": {
    "input": {
      "required": {
        "mode": [
          [
            "Always Pause",
            "Keep Last Selection"
          ],
          {
            "default": "Always Pause"
          }
        ]
      },
      "optional": {
        "images": [
          "IMAGE"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "mode"
      ],
      "optional": [
        "images"
      ],
      "hidden": [
        "prompt",
        "my_unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "easy imageChooser",
    "display_name": "Image Chooser",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": true
  },
  "easy imageColorMatch": {
    "input": {
      "required": {
        "image_ref": [
          "IMAGE"
        ],
        "image_target": [
          "IMAGE"
        ],
        "method": [
          [
            "wavelet",
            "adain",
            "mkl",
            "hm",
            "reinhard",
            "mvgd",
            "hm-mvgd-hm",
            "hm-mkl-hm"
          ]
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide/Save"
          ],
          {
            "default": "Preview"
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "image_ref",
        "image_target",
        "method",
        "image_output",
        "save_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "easy imageColorMatch",
    "display_name": "Image Color Match",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": true
  },
  "easy imageDetailTransfer": {
    "input": {
      "required": {
        "target": [
          "IMAGE"
        ],
        "source": [
          "IMAGE"
        ],
        "mode": [
          [
            "add",
            "multiply",
            "screen",
            "overlay",
            "soft_light",
            "hard_light",
            "color_dodge",
            "color_burn",
            "difference",
            "exclusion",
            "divide"
          ],
          {
            "default": "add"
          }
        ],
        "blur_sigma": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "blend_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.001,
            "round": 0.001
          }
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide/Save"
          ],
          {
            "default": "Preview"
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "target",
        "source",
        "mode",
        "blur_sigma",
        "blend_factor",
        "image_output",
        "save_prefix"
      ],
      "optional": [
        "mask"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "easy imageDetailTransfer",
    "display_name": "Image Detail Transfer",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": true
  },
  "easy imageInterrogator": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mode": [
          [
            "fast",
            "classic",
            "best",
            "negative"
          ]
        ],
        "use_lowvram": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mode",
        "use_lowvram"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "prompt"
    ],
    "name": "easy imageInterrogator",
    "display_name": "Image To Prompt",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy loadImagesForLoop": {
    "input": {
      "required": {
        "directory": [
          "STRING",
          {
            "default": ""
          }
        ]
      },
      "optional": {
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "limit": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 10000
          }
        ],
        "initial_value1": [
          "*"
        ],
        "initial_value2": [
          "*"
        ]
      },
      "hidden": {
        "initial_value0": [
          "*"
        ],
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "directory"
      ],
      "optional": [
        "start_index",
        "limit",
        "initial_value1",
        "initial_value2"
      ],
      "hidden": [
        "initial_value0",
        "prompt",
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [
      "FLOW_CONTROL",
      "INT",
      "IMAGE",
      "MASK",
      "STRING",
      "*",
      "*"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "flow",
      "index",
      "image",
      "mask",
      "name",
      "value1",
      "value2"
    ],
    "name": "easy loadImagesForLoop",
    "display_name": "Load Images For Loop",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "image",
    "output_node": false
  },
  "easy loadImageBase64": {
    "input": {
      "required": {
        "base64_data": [
          "STRING",
          {
            "default": ""
          }
        ],
        "image_output": [
          [
            "Hide",
            "Preview",
            "Save",
            "Hide/Save"
          ],
          {
            "default": "Preview"
          }
        ],
        "save_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "optional": {},
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "base64_data",
        "image_output",
        "save_prefix"
      ],
      "optional": [],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "easy loadImageBase64",
    "display_name": "Load Image (Base64)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image/LoadImage",
    "output_node": true
  },
  "easy imageToBase64": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "easy imageToBase64",
    "display_name": "Image To Base64",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": true
  },
  "easy joinImageBatch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "mode": [
          [
            "horizontal",
            "vertical"
          ],
          {
            "default": "horizontal"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "easy joinImageBatch",
    "display_name": "JoinImageBatch",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy humanSegmentation": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "method": [
          [
            "selfie_multiclass_256x256",
            "human_parsing_lip",
            "human_parts (deeplabv3p)"
          ]
        ],
        "confidence": [
          "FLOAT",
          {
            "default": 0.4,
            "min": 0.05,
            "max": 0.95,
            "step": 0.01
          }
        ],
        "crop_multi": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "image",
        "method",
        "confidence",
        "crop_multi"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "BBOX"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "bbox"
    ],
    "name": "easy humanSegmentation",
    "display_name": "Human Segmentation",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Segmentation",
    "output_node": false
  },
  "easy removeLocalImage": {
    "input": {
      "required": {
        "any": [
          "*"
        ],
        "file_name": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "any",
        "file_name"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "easy removeLocalImage",
    "display_name": "Remove Local Image",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": true
  },
  "easy makeImageForICLora": {
    "input": {
      "required": {
        "image_1": [
          "IMAGE"
        ],
        "direction": [
          [
            "top-bottom",
            "left-right"
          ],
          {
            "default": "left-right"
          }
        ],
        "pixels": [
          "INT",
          {
            "default": 0,
            "max": 16384,
            "min": 0,
            "step": 8,
            "tooltip": "The pixel of the output image is not set when it is 0"
          }
        ]
      },
      "optional": {
        "image_2": [
          "IMAGE"
        ],
        "mask_1": [
          "MASK"
        ],
        "mask_2": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image_1",
        "direction",
        "pixels"
      ],
      "optional": [
        "image_2",
        "mask_1",
        "mask_2"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "MASK",
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "context_mask",
      "width",
      "height",
      "x",
      "y"
    ],
    "name": "easy makeImageForICLora",
    "display_name": "Make Image For ICLora",
    "description": "make Image for ICLora to Re-paint",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Image",
    "output_node": false
  },
  "easy string": {
    "input": {
      "required": {
        "value": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "string"
    ],
    "name": "easy string",
    "display_name": "String",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic/Type",
    "output_node": false
  },
  "easy int": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "default": 0,
            "min": -999999,
            "max": 999999
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "int"
    ],
    "name": "easy int",
    "display_name": "Int",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic/Type",
    "output_node": false
  },
  "easy rangeInt": {
    "input": {
      "required": {
        "range_mode": [
          [
            "step",
            "num_steps"
          ],
          {
            "default": "step"
          }
        ],
        "start": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096,
            "step": 1
          }
        ],
        "stop": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096,
            "step": 1
          }
        ],
        "step": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096,
            "step": 1
          }
        ],
        "num_steps": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096,
            "step": 1
          }
        ],
        "end_mode": [
          [
            "Inclusive",
            "Exclusive"
          ],
          {
            "default": "Inclusive"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "range_mode",
        "start",
        "stop",
        "step",
        "num_steps",
        "end_mode"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      true,
      true
    ],
    "output_name": [
      "range",
      "range_sizes"
    ],
    "name": "easy rangeInt",
    "display_name": "Range(Int)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic/Type",
    "output_node": false
  },
  "easy float": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 0,
            "step": 0.01,
            "min": -999999,
            "max": 999999
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "float"
    ],
    "name": "easy float",
    "display_name": "Float",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic/Type",
    "output_node": false
  },
  "easy rangeFloat": {
    "input": {
      "required": {
        "range_mode": [
          [
            "step",
            "num_steps"
          ],
          {
            "default": "step"
          }
        ],
        "start": [
          "FLOAT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096,
            "step": 0.1
          }
        ],
        "stop": [
          "FLOAT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096,
            "step": 0.1
          }
        ],
        "step": [
          "FLOAT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096,
            "step": 0.1
          }
        ],
        "num_steps": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 4096,
            "step": 1
          }
        ],
        "end_mode": [
          [
            "Inclusive",
            "Exclusive"
          ],
          {
            "default": "Inclusive"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "range_mode",
        "start",
        "stop",
        "step",
        "num_steps",
        "end_mode"
      ]
    },
    "output": [
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      true,
      true
    ],
    "output_name": [
      "range",
      "range_sizes"
    ],
    "name": "easy rangeFloat",
    "display_name": "Range(Float)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic/Type",
    "output_node": false
  },
  "easy boolean": {
    "input": {
      "required": {
        "value": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "boolean"
    ],
    "name": "easy boolean",
    "display_name": "Boolean",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic/Type",
    "output_node": false
  },
  "easy mathString": {
    "input": {
      "required": {
        "a": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "b": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "operation": [
          [
            "a == b",
            "a != b",
            "a IN b",
            "a MATCH REGEX(b)",
            "a BEGINSWITH b",
            "a ENDSWITH b"
          ]
        ],
        "case_sensitive": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b",
        "operation",
        "case_sensitive"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "easy mathString",
    "display_name": "Math String",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic/Math",
    "output_node": false
  },
  "easy mathInt": {
    "input": {
      "required": {
        "a": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 1
          }
        ],
        "b": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 1
          }
        ],
        "operation": [
          [
            "add",
            "subtract",
            "multiply",
            "divide",
            "modulo",
            "power"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b",
        "operation"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "easy mathInt",
    "display_name": "Math Int",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic/Math",
    "output_node": false
  },
  "easy mathFloat": {
    "input": {
      "required": {
        "a": [
          "FLOAT",
          {
            "default": 0,
            "min": -999999999999.0,
            "max": 999999999999.0,
            "step": 0.01
          }
        ],
        "b": [
          "FLOAT",
          {
            "default": 0,
            "min": -999999999999.0,
            "max": 999999999999.0,
            "step": 0.01
          }
        ],
        "operation": [
          [
            "add",
            "subtract",
            "multiply",
            "divide",
            "modulo",
            "power"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b",
        "operation"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "easy mathFloat",
    "display_name": "Math Float",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic/Math",
    "output_node": false
  },
  "easy compare": {
    "input": {
      "required": {
        "a": [
          "*",
          {
            "default": 0
          }
        ],
        "b": [
          "*",
          {
            "default": 0
          }
        ],
        "comparison": [
          [
            "a == b",
            "a != b",
            "a < b",
            "a > b",
            "a <= b",
            "a >= b"
          ],
          {
            "default": "a == b"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "a",
        "b",
        "comparison"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "boolean"
    ],
    "name": "easy compare",
    "display_name": "Compare",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic/Math",
    "output_node": false
  },
  "easy imageSwitch": {
    "input": {
      "required": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ],
        "boolean": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_a",
        "image_b",
        "boolean"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "easy imageSwitch",
    "display_name": "Image Switch",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic/Switch",
    "output_node": false
  },
  "easy textSwitch": {
    "input": {
      "required": {
        "input": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 2
          }
        ]
      },
      "optional": {
        "text1": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text2": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input"
      ],
      "optional": [
        "text1",
        "text2"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "easy textSwitch",
    "display_name": "Text Switch",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic/Switch",
    "output_node": false
  },
  "easy imageIndexSwitch": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9,
            "step": 1
          }
        ]
      },
      "optional": {
        "image0": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image1": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image2": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image3": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image4": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image5": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image6": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image7": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image8": [
          "IMAGE",
          {
            "lazy": true
          }
        ],
        "image9": [
          "IMAGE",
          {
            "lazy": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "index"
      ],
      "optional": [
        "image0",
        "image1",
        "image2",
        "image3",
        "image4",
        "image5",
        "image6",
        "image7",
        "image8",
        "image9"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "easy imageIndexSwitch",
    "display_name": "Image Index Switch",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic/Index Switch",
    "output_node": false
  },
  "easy textIndexSwitch": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9,
            "step": 1
          }
        ]
      },
      "optional": {
        "text0": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text1": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text2": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text3": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text4": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text5": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text6": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text7": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text8": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ],
        "text9": [
          "STRING",
          {
            "lazy": true,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "index"
      ],
      "optional": [
        "text0",
        "text1",
        "text2",
        "text3",
        "text4",
        "text5",
        "text6",
        "text7",
        "text8",
        "text9"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "text"
    ],
    "name": "easy textIndexSwitch",
    "display_name": "Text Index Switch",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic/Index Switch",
    "output_node": false
  },
  "easy conditioningIndexSwitch": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9,
            "step": 1
          }
        ]
      },
      "optional": {
        "cond0": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond1": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond2": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond3": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond4": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond5": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond6": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond7": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond8": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ],
        "cond9": [
          "CONDITIONING",
          {
            "lazy": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "index"
      ],
      "optional": [
        "cond0",
        "cond1",
        "cond2",
        "cond3",
        "cond4",
        "cond5",
        "cond6",
        "cond7",
        "cond8",
        "cond9"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "conditioning"
    ],
    "name": "easy conditioningIndexSwitch",
    "display_name": "Conditioning Index Switch",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic/Index Switch",
    "output_node": false
  },
  "easy anythingIndexSwitch": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9,
            "step": 1
          }
        ]
      },
      "optional": {
        "value0": [
          "*",
          {
            "lazy": true
          }
        ],
        "value1": [
          "*",
          {
            "lazy": true
          }
        ],
        "value2": [
          "*",
          {
            "lazy": true
          }
        ],
        "value3": [
          "*",
          {
            "lazy": true
          }
        ],
        "value4": [
          "*",
          {
            "lazy": true
          }
        ],
        "value5": [
          "*",
          {
            "lazy": true
          }
        ],
        "value6": [
          "*",
          {
            "lazy": true
          }
        ],
        "value7": [
          "*",
          {
            "lazy": true
          }
        ],
        "value8": [
          "*",
          {
            "lazy": true
          }
        ],
        "value9": [
          "*",
          {
            "lazy": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "index"
      ],
      "optional": [
        "value0",
        "value1",
        "value2",
        "value3",
        "value4",
        "value5",
        "value6",
        "value7",
        "value8",
        "value9"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "value"
    ],
    "name": "easy anythingIndexSwitch",
    "display_name": "Any Index Switch",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic/Index Switch",
    "output_node": false
  },
  "easy ab": {
    "input": {
      "required": {
        "A or B": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "A",
            "label_off": "B"
          }
        ],
        "in": [
          "*"
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "A or B",
        "in"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "*",
      "*"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "A",
      "B"
    ],
    "name": "easy ab",
    "display_name": "A or B",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy anythingInversedSwitch": {
    "input": {
      "required": {
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9,
            "step": 1
          }
        ],
        "in": [
          "*"
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "index",
        "in"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "out0"
    ],
    "name": "easy anythingInversedSwitch",
    "display_name": "Any Inversed Switch",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy whileLoopStart": {
    "input": {
      "required": {
        "condition": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "initial_value0": [
          "*"
        ],
        "initial_value1": [
          "*"
        ],
        "initial_value2": [
          "*"
        ],
        "initial_value3": [
          "*"
        ],
        "initial_value4": [
          "*"
        ],
        "initial_value5": [
          "*"
        ],
        "initial_value6": [
          "*"
        ],
        "initial_value7": [
          "*"
        ],
        "initial_value8": [
          "*"
        ],
        "initial_value9": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "condition"
      ],
      "optional": [
        "initial_value0",
        "initial_value1",
        "initial_value2",
        "initial_value3",
        "initial_value4",
        "initial_value5",
        "initial_value6",
        "initial_value7",
        "initial_value8",
        "initial_value9"
      ]
    },
    "output": [
      "FLOW_CONTROL",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "flow",
      "value0",
      "value1",
      "value2",
      "value3",
      "value4",
      "value5",
      "value6",
      "value7",
      "value8",
      "value9"
    ],
    "name": "easy whileLoopStart",
    "display_name": "While Loop Start",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic/While Loop",
    "output_node": false
  },
  "easy whileLoopEnd": {
    "input": {
      "required": {
        "flow": [
          "FLOW_CONTROL",
          {
            "rawLink": true
          }
        ],
        "condition": [
          "BOOLEAN",
          {}
        ]
      },
      "optional": {
        "initial_value0": [
          "*"
        ],
        "initial_value1": [
          "*"
        ],
        "initial_value2": [
          "*"
        ],
        "initial_value3": [
          "*"
        ],
        "initial_value4": [
          "*"
        ],
        "initial_value5": [
          "*"
        ],
        "initial_value6": [
          "*"
        ],
        "initial_value7": [
          "*"
        ],
        "initial_value8": [
          "*"
        ],
        "initial_value9": [
          "*"
        ]
      },
      "hidden": {
        "dynprompt": "DYNPROMPT",
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "flow",
        "condition"
      ],
      "optional": [
        "initial_value0",
        "initial_value1",
        "initial_value2",
        "initial_value3",
        "initial_value4",
        "initial_value5",
        "initial_value6",
        "initial_value7",
        "initial_value8",
        "initial_value9"
      ],
      "hidden": [
        "dynprompt",
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "value0",
      "value1",
      "value2",
      "value3",
      "value4",
      "value5",
      "value6",
      "value7",
      "value8",
      "value9"
    ],
    "name": "easy whileLoopEnd",
    "display_name": "While Loop End",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic/While Loop",
    "output_node": false
  },
  "easy forLoopStart": {
    "input": {
      "required": {
        "total": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 100000,
            "step": 1
          }
        ]
      },
      "optional": {
        "initial_value1": [
          "*"
        ],
        "initial_value2": [
          "*"
        ],
        "initial_value3": [
          "*"
        ],
        "initial_value4": [
          "*"
        ],
        "initial_value5": [
          "*"
        ],
        "initial_value6": [
          "*"
        ],
        "initial_value7": [
          "*"
        ],
        "initial_value8": [
          "*"
        ],
        "initial_value9": [
          "*"
        ]
      },
      "hidden": {
        "initial_value0": [
          "*"
        ],
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "total"
      ],
      "optional": [
        "initial_value1",
        "initial_value2",
        "initial_value3",
        "initial_value4",
        "initial_value5",
        "initial_value6",
        "initial_value7",
        "initial_value8",
        "initial_value9"
      ],
      "hidden": [
        "initial_value0",
        "prompt",
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [
      "FLOW_CONTROL",
      "INT",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "flow",
      "index",
      "value1",
      "value2",
      "value3",
      "value4",
      "value5",
      "value6",
      "value7",
      "value8",
      "value9"
    ],
    "name": "easy forLoopStart",
    "display_name": "For Loop Start",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic/For Loop",
    "output_node": false
  },
  "easy forLoopEnd": {
    "input": {
      "required": {
        "flow": [
          "FLOW_CONTROL",
          {
            "rawLink": true
          }
        ]
      },
      "optional": {
        "initial_value1": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value2": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value3": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value4": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value5": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value6": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value7": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value8": [
          "*",
          {
            "rawLink": true
          }
        ],
        "initial_value9": [
          "*",
          {
            "rawLink": true
          }
        ]
      },
      "hidden": {
        "dynprompt": "DYNPROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "flow"
      ],
      "optional": [
        "initial_value1",
        "initial_value2",
        "initial_value3",
        "initial_value4",
        "initial_value5",
        "initial_value6",
        "initial_value7",
        "initial_value8",
        "initial_value9"
      ],
      "hidden": [
        "dynprompt",
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*",
      "*"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "value1",
      "value2",
      "value3",
      "value4",
      "value5",
      "value6",
      "value7",
      "value8",
      "value9"
    ],
    "name": "easy forLoopEnd",
    "display_name": "For Loop End",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic/For Loop",
    "output_node": false
  },
  "easy blocker": {
    "input": {
      "required": {
        "continue": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "in": [
          "*",
          {
            "default": null
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "continue",
        "in"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "out"
    ],
    "name": "easy blocker",
    "display_name": "Blocker",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy ifElse": {
    "input": {
      "required": {
        "boolean": [
          "BOOLEAN"
        ],
        "on_true": [
          "*",
          {
            "lazy": true
          }
        ],
        "on_false": [
          "*",
          {
            "lazy": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "boolean",
        "on_true",
        "on_false"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "easy ifElse",
    "display_name": "If else",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy isMaskEmpty": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      },
      "optional": {}
    },
    "input_order": {
      "required": [
        "mask"
      ],
      "optional": []
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "boolean"
    ],
    "name": "easy isMaskEmpty",
    "display_name": "Is Mask Empty",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy isNone": {
    "input": {
      "required": {
        "any": [
          "*"
        ]
      },
      "optional": {}
    },
    "input_order": {
      "required": [
        "any"
      ],
      "optional": []
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "boolean"
    ],
    "name": "easy isNone",
    "display_name": "Is None",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy isSDXL": {
    "input": {
      "required": {},
      "optional": {
        "optional_pipe": [
          "PIPE_LINE"
        ],
        "optional_clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "optional_pipe",
        "optional_clip"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "boolean"
    ],
    "name": "easy isSDXL",
    "display_name": "Is SDXL",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy isFileExist": {
    "input": {
      "required": {
        "file_path": [
          "STRING",
          {
            "default": ""
          }
        ],
        "file_name": [
          "STRING",
          {
            "default": ""
          }
        ],
        "file_extension": [
          "STRING",
          {
            "default": ""
          }
        ]
      },
      "optional": {}
    },
    "input_order": {
      "required": [
        "file_path",
        "file_name",
        "file_extension"
      ],
      "optional": []
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "boolean"
    ],
    "name": "easy isFileExist",
    "display_name": "Is File Exist",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy outputToList": {
    "input": {
      "required": {
        "tuple": [
          "*",
          {}
        ]
      },
      "optional": {}
    },
    "input_order": {
      "required": [
        "tuple"
      ],
      "optional": []
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "list"
    ],
    "name": "easy outputToList",
    "display_name": "Output to List",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy pixels": {
    "input": {
      "required": {
        "resolution": [
          [
            "width x height (custom)",
            "512 x 512",
            "512 x 768",
            "576 x 1024",
            "768 x 512",
            "768 x 768",
            "768 x 1024",
            "768 x 1280",
            "768 x 1344",
            "768 x 1536",
            "816 x 1920",
            "832 x 1152",
            "832 x 1216",
            "896 x 1152",
            "896 x 1088",
            "1024 x 1024",
            "1024 x 576",
            "1024 x 768",
            "1080 x 1920",
            "1440 x 2560",
            "1088 x 896",
            "1216 x 832",
            "1152 x 832",
            "1152 x 896",
            "1280 x 768",
            "1344 x 768",
            "1536 x 640",
            "1536 x 768",
            "1920 x 816",
            "1920 x 1080",
            "2560 x 1440"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "scale": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.001,
            "max": 10,
            "step": 0.001
          }
        ],
        "flip_w/h": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "resolution",
        "width",
        "height",
        "scale",
        "flip_w/h"
      ]
    },
    "output": [
      "INT",
      "INT",
      "*",
      "*",
      "*"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "width_norm",
      "height_norm",
      "width",
      "height",
      "scale_factor"
    ],
    "name": "easy pixels",
    "display_name": "Pixels W/H Norm",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy xyAny": {
    "input": {
      "required": {
        "X": [
          "*",
          {}
        ],
        "Y": [
          "*",
          {}
        ],
        "direction": [
          [
            "horizontal",
            "vertical"
          ],
          {
            "default": "horizontal"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "X",
        "Y",
        "direction"
      ]
    },
    "output": [
      "*",
      "*"
    ],
    "output_is_list": [
      true,
      true
    ],
    "output_name": [
      "X",
      "Y"
    ],
    "name": "easy xyAny",
    "display_name": "XY Any",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy lengthAnything": {
    "input": {
      "required": {
        "any": [
          "*",
          {}
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "any"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "length"
    ],
    "name": "easy lengthAnything",
    "display_name": "Length Any",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy indexAnything": {
    "input": {
      "required": {
        "any": [
          "*",
          {}
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000000,
            "step": 1
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "any",
        "index"
      ],
      "hidden": [
        "prompt",
        "my_unique_id"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "out"
    ],
    "name": "easy indexAnything",
    "display_name": "Index Any",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy batchAnything": {
    "input": {
      "required": {
        "any_1": [
          "*",
          {}
        ],
        "any_2": [
          "*",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "any_1",
        "any_2"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "batch"
    ],
    "name": "easy batchAnything",
    "display_name": "Batch Any",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy convertAnything": {
    "input": {
      "required": {
        "*": [
          "*"
        ],
        "output_type": [
          [
            "string",
            "int",
            "float",
            "boolean"
          ],
          {
            "default": "string"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "*",
        "output_type"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "easy convertAnything",
    "display_name": "Convert Any",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic",
    "output_node": true
  },
  "easy showAnything": {
    "input": {
      "required": {},
      "optional": {
        "anything": [
          "*",
          {}
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "anything"
      ],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "output"
    ],
    "name": "easy showAnything",
    "display_name": "Show Any",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic",
    "output_node": true
  },
  "easy showTensorShape": {
    "input": {
      "required": {
        "tensor": [
          "*"
        ]
      },
      "optional": {},
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "tensor"
      ],
      "optional": [],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "easy showTensorShape",
    "display_name": "Show Tensor Shape",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic",
    "output_node": true
  },
  "easy clearCacheKey": {
    "input": {
      "required": {
        "anything": [
          "*",
          {}
        ],
        "cache_key": [
          "STRING",
          {
            "default": "*"
          }
        ]
      },
      "optional": {},
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "anything",
        "cache_key"
      ],
      "optional": [],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "output"
    ],
    "name": "easy clearCacheKey",
    "display_name": "Clear Cache Key",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic",
    "output_node": true
  },
  "easy clearCacheAll": {
    "input": {
      "required": {
        "anything": [
          "*",
          {}
        ]
      },
      "optional": {},
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "anything"
      ],
      "optional": [],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "output"
    ],
    "name": "easy clearCacheAll",
    "display_name": "Clear Cache All",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic",
    "output_node": true
  },
  "easy cleanGpuUsed": {
    "input": {
      "required": {
        "anything": [
          "*",
          {}
        ]
      },
      "optional": {},
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "anything"
      ],
      "optional": [],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "output"
    ],
    "name": "easy cleanGpuUsed",
    "display_name": "Clean VRAM Used",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic",
    "output_node": true
  },
  "easy saveText": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ],
        "output_file_path": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "file_name": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "file_extension": [
          [
            "txt",
            "csv"
          ]
        ],
        "overwrite": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "output_file_path",
        "file_name",
        "file_extension",
        "overwrite"
      ],
      "optional": [
        "image"
      ]
    },
    "output": [
      "STRING",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "text",
      "image"
    ],
    "name": "easy saveText",
    "display_name": "Save Text",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic",
    "output_node": true
  },
  "easy sleep": {
    "input": {
      "required": {
        "any": [
          "*",
          {}
        ],
        "delay": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1000000,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "any",
        "delay"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "out"
    ],
    "name": "easy sleep",
    "display_name": "Sleep",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/Logic",
    "output_node": false
  },
  "easy fluxPromptGenAPI": {
    "input": {
      "required": {
        "describe": [
          "STRING",
          {
            "default": "",
            "placeholder": "Describe your image idea (you can use any language)",
            "multiline": true
          }
        ]
      },
      "optional": {
        "cookie_override": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "describe"
      ],
      "optional": [
        "cookie_override"
      ],
      "hidden": [
        "prompt",
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "prompt"
    ],
    "name": "easy fluxPromptGenAPI",
    "display_name": "Prompt Gen (FluxAI)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/API",
    "output_node": false
  },
  "easy joyCaption2API": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "do_sample": [
          [
            true,
            false
          ]
        ],
        "temperature": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 2.0,
            "step": 0.01,
            "round": 0.001,
            "display": "number"
          }
        ],
        "max_tokens": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 512,
            "step": 16,
            "display": "number"
          }
        ],
        "caption_type": [
          [
            "Descriptive",
            "Descriptive (Informal)",
            "Training Prompt",
            "MidJourney",
            "Booru tag list",
            "Booru-like tag list",
            "Art Critic",
            "Product Listing",
            "Social Media Post"
          ]
        ],
        "caption_length": [
          [
            "any",
            "very short",
            "short",
            "medium-length",
            "long",
            "very long",
            "20",
            "30",
            "40",
            "50",
            "60",
            "70",
            "80",
            "90",
            "100",
            "110",
            "120",
            "130",
            "140",
            "150",
            "160",
            "170",
            "180",
            "190",
            "200",
            "210",
            "220",
            "230",
            "240",
            "250",
            "260"
          ]
        ],
        "extra_options": [
          "STRING",
          {
            "placeholder": "Extra options(e.g):\nIf there is a person/character in the image you must refer to them as {name}.",
            "tooltip": "Extra options for the model",
            "multiline": true
          }
        ],
        "name_input": [
          "STRING",
          {
            "default": "",
            "tooltip": "Name input is only used if an Extra Option is selected that requires it."
          }
        ],
        "custom_prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "do_sample",
        "temperature",
        "max_tokens",
        "caption_type",
        "caption_length",
        "extra_options",
        "name_input",
        "custom_prompt"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "caption"
    ],
    "name": "easy joyCaption2API",
    "display_name": "JoyCaption2 (BizyAIR)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/API",
    "output_node": false
  },
  "easy if": {
    "input": {
      "required": {
        "any": [
          "*"
        ],
        "if": [
          "*"
        ],
        "else": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "any",
        "if",
        "else"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "?"
    ],
    "name": "easy if",
    "display_name": "If (\ud83d\udeabDeprecated)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/\ud83d\udeab Deprecated",
    "output_node": false,
    "deprecated": true
  },
  "easy poseEditor": {
    "input": {
      "required": {
        "image": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "easy poseEditor",
    "display_name": "PoseEditor (\ud83d\udeabDeprecated)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/\ud83d\udeab Deprecated",
    "output_node": false,
    "deprecated": true
  },
  "easy imageToMask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "channel": [
          [
            "red",
            "green",
            "blue"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "channel"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "easy imageToMask",
    "display_name": "ImageToMask (\ud83d\udeabDeprecated)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/\ud83d\udeab Deprecated",
    "output_node": false,
    "deprecated": true
  },
  "easy showSpentTime": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "pipe"
      ],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "easy showSpentTime",
    "display_name": "Show Spent Time (\ud83d\udeabDeprecated)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/\ud83d\udeab Deprecated",
    "output_node": true,
    "deprecated": true
  },
  "easy latentNoisy": {
    "input": {
      "required": {
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000
          }
        ],
        "start_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000
          }
        ],
        "end_at_step": [
          "INT",
          {
            "default": 10000,
            "min": 1,
            "max": 10000
          }
        ],
        "source": [
          [
            "CPU",
            "GPU"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      },
      "optional": {
        "pipe": [
          "PIPE_LINE"
        ],
        "optional_model": [
          "MODEL"
        ],
        "optional_latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "sampler_name",
        "scheduler",
        "steps",
        "start_at_step",
        "end_at_step",
        "source",
        "seed"
      ],
      "optional": [
        "pipe",
        "optional_model",
        "optional_latent"
      ]
    },
    "output": [
      "PIPE_LINE",
      "LATENT",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "pipe",
      "latent",
      "sigma"
    ],
    "name": "easy latentNoisy",
    "display_name": "LatentNoisy (\ud83d\udeabDeprecated)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/\ud83d\udeab Deprecated",
    "output_node": false,
    "deprecated": true
  },
  "easy latentCompositeMaskedWithCond": {
    "input": {
      "required": {
        "pipe": [
          "PIPE_LINE"
        ],
        "text_combine": [
          "LIST"
        ],
        "source_latent": [
          "LATENT"
        ],
        "source_mask": [
          "MASK"
        ],
        "destination_mask": [
          "MASK"
        ],
        "text_combine_mode": [
          [
            "add",
            "replace",
            "cover"
          ],
          {
            "default": "add"
          }
        ],
        "replace_text": [
          "STRING",
          {
            "default": ""
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "my_unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pipe",
        "text_combine",
        "source_latent",
        "source_mask",
        "destination_mask",
        "text_combine_mode",
        "replace_text"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "my_unique_id"
      ]
    },
    "output": [
      "PIPE_LINE",
      "LATENT",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      true
    ],
    "output_name": [
      "pipe",
      "latent",
      "conditioning"
    ],
    "name": "easy latentCompositeMaskedWithCond",
    "display_name": "LatentCompositeMaskedWithCond (\ud83d\udeabDeprecated)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/\ud83d\udeab Deprecated",
    "output_node": false,
    "deprecated": true
  },
  "easy injectNoiseToLatent": {
    "input": {
      "required": {
        "strength": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 200.0,
            "step": 0.0001
          }
        ],
        "normalize": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "average": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "pipe_to_noise": [
          "PIPE_LINE"
        ],
        "image_to_latent": [
          "IMAGE"
        ],
        "latent": [
          "LATENT"
        ],
        "noise": [
          "LATENT"
        ],
        "mask": [
          "MASK"
        ],
        "mix_randn_amount": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.001
          }
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "strength",
        "normalize",
        "average"
      ],
      "optional": [
        "pipe_to_noise",
        "image_to_latent",
        "latent",
        "noise",
        "mask",
        "mix_randn_amount",
        "seed"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "easy injectNoiseToLatent",
    "display_name": "InjectNoiseToLatent (\ud83d\udeabDeprecated)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/\ud83d\udeab Deprecated",
    "output_node": false,
    "deprecated": true
  },
  "easy stableDiffusion3API": {
    "input": {
      "required": {
        "positive": [
          "STRING",
          {
            "default": "",
            "placeholder": "Positive",
            "multiline": true
          }
        ],
        "negative": [
          "STRING",
          {
            "default": "",
            "placeholder": "Negative",
            "multiline": true
          }
        ],
        "model": [
          [
            "sd3",
            "sd3-turbo"
          ]
        ],
        "aspect_ratio": [
          [
            "16:9",
            "1:1",
            "21:9",
            "2:3",
            "3:2",
            "4:5",
            "5:4",
            "9:16",
            "9:21"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4294967294
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0
          }
        ]
      },
      "optional": {
        "optional_image": [
          "IMAGE"
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "model",
        "aspect_ratio",
        "seed",
        "denoise"
      ],
      "optional": [
        "optional_image"
      ],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "easy stableDiffusion3API",
    "display_name": "StableDiffusion3API (\ud83d\udeabDeprecated)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/\ud83d\udeab Deprecated",
    "output_node": false,
    "deprecated": true
  },
  "easy saveImageLazy": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ],
        "save_metadata": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {},
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "save_metadata"
      ],
      "optional": [],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "easy saveImageLazy",
    "display_name": "SaveImageLazy (\ud83d\udeabDeprecated)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/\ud83d\udeab Deprecated",
    "output_node": false,
    "deprecated": true
  },
  "easy saveTextLazy": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ],
        "output_file_path": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "file_name": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "file_extension": [
          [
            "txt",
            "csv"
          ]
        ],
        "overwrite": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "output_file_path",
        "file_name",
        "file_extension",
        "overwrite"
      ],
      "optional": [
        "image"
      ]
    },
    "output": [
      "STRING",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "text",
      "image"
    ],
    "name": "easy saveTextLazy",
    "display_name": "SaveTextLazy (\ud83d\udeabDeprecated)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/\ud83d\udeab Deprecated",
    "output_node": false,
    "deprecated": true
  },
  "easy showAnythingLazy": {
    "input": {
      "required": {},
      "optional": {
        "anything": [
          "*",
          {}
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "anything"
      ],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "output"
    ],
    "name": "easy showAnythingLazy",
    "display_name": "ShowAnythingLazy (\ud83d\udeabDeprecated)",
    "description": "",
    "python_module": "custom_nodes.comfyui-easy-use",
    "category": "EasyUse/\ud83d\udeab Deprecated",
    "output_node": false,
    "deprecated": true
  },
  "Zoe-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Zoe-DepthMapPreprocessor",
    "display_name": "Zoe Depth Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Unimatch_OptFlowPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "ckpt_name": [
          [
            "gmflow-scale1-mixdata.pth",
            "gmflow-scale2-mixdata.pth",
            "gmflow-scale2-regrefine6-mixdata.pth"
          ],
          {
            "default": "gmflow-scale2-regrefine6-mixdata.pth"
          }
        ],
        "backward_flow": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "bidirectional_flow": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "ckpt_name",
        "backward_flow",
        "bidirectional_flow"
      ]
    },
    "output": [
      "OPTICAL_FLOW",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "OPTICAL_FLOW",
      "PREVIEW_IMAGE"
    ],
    "name": "Unimatch_OptFlowPreprocessor",
    "display_name": "Unimatch Optical Flow",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Optical Flow",
    "output_node": false
  },
  "MaskOptFlow": {
    "input": {
      "required": {
        "optical_flow": [
          "OPTICAL_FLOW"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "optical_flow",
        "mask"
      ]
    },
    "output": [
      "OPTICAL_FLOW",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "OPTICAL_FLOW",
      "PREVIEW_IMAGE"
    ],
    "name": "MaskOptFlow",
    "display_name": "Mask Optical Flow (DragNUWA)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Optical Flow",
    "output_node": false
  },
  "UniFormer-SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "UniFormer-SemSegPreprocessor",
    "display_name": "UniFormer Segmentor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "SemSegPreprocessor",
    "display_name": "Semantic Segmentor (legacy, alias for UniFormer)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "TilePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "pyrUp_iters": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "pyrUp_iters",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "TilePreprocessor",
    "display_name": "Tile",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/tile",
    "output_node": false
  },
  "TTPlanet_TileGF_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "scale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 1.0,
            "max": 8.0,
            "step": 0.01
          }
        ],
        "blur_strength": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 1.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "radius": [
          "INT",
          {
            "default": 7,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "eps": [
          "FLOAT",
          {
            "default": 0.01,
            "min": 0.001,
            "max": 0.1,
            "step": 0.001
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "scale_factor",
        "blur_strength",
        "radius",
        "eps",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "TTPlanet_TileGF_Preprocessor",
    "display_name": "TTPlanet Tile GuidedFilter",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/tile",
    "output_node": false
  },
  "TTPlanet_TileSimple_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "scale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 1.0,
            "max": 8.0,
            "step": 0.01
          }
        ],
        "blur_strength": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 1.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "scale_factor",
        "blur_strength"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "TTPlanet_TileSimple_Preprocessor",
    "display_name": "TTPlanet Tile Simple",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/tile",
    "output_node": false
  },
  "TEEDPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe_steps": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 10,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe_steps",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "TEEDPreprocessor",
    "display_name": "TEEDPreprocessor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "ShufflePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ShufflePreprocessor",
    "display_name": "Content Shuffle",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/T2IAdapter-only",
    "output_node": false
  },
  "SAMPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "SAMPreprocessor",
    "display_name": "SAM Segmentor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/others",
    "output_node": false
  },
  "ScribblePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ScribblePreprocessor",
    "display_name": "Scribble Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Scribble_XDoG_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "threshold": [
          "INT",
          {
            "default": 32,
            "min": 1,
            "max": 64,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Scribble_XDoG_Preprocessor",
    "display_name": "Scribble XDoG Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Scribble_PiDiNet_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe": [
          [
            "enable",
            "disable"
          ]
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Scribble_PiDiNet_Preprocessor",
    "display_name": "Scribble PiDiNet Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "ImageLuminanceDetector": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "gamma_correction": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 2.0,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "gamma_correction",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageLuminanceDetector",
    "display_name": "Image Luminance",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Recolor",
    "output_node": false
  },
  "ImageIntensityDetector": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "gamma_correction": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 2.0,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "gamma_correction",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageIntensityDetector",
    "display_name": "Image Intensity",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Recolor",
    "output_node": false
  },
  "PyraCannyPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "low_threshold": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "high_threshold": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "low_threshold",
        "high_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "PyraCannyPreprocessor",
    "display_name": "PyraCanny",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "SavePoseKpsAsJsonFile": {
    "input": {
      "required": {
        "pose_kps": [
          "POSE_KEYPOINT"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "PoseKeypoint"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pose_kps",
        "filename_prefix"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SavePoseKpsAsJsonFile",
    "display_name": "Save Pose Keypoints",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": true
  },
  "FacialPartColoringFromPoseKps": {
    "input": {
      "required": {
        "pose_kps": [
          "POSE_KEYPOINT"
        ],
        "mode": [
          [
            "point",
            "polygon"
          ],
          {
            "default": "polygon"
          }
        ],
        "skin": [
          "STRING",
          {
            "default": "rgb(0, 153, 255)",
            "multiline": false
          }
        ],
        "left_eye": [
          "STRING",
          {
            "default": "rgb(0, 204, 153)",
            "multiline": false
          }
        ],
        "right_eye": [
          "STRING",
          {
            "default": "rgb(255, 153, 0)",
            "multiline": false
          }
        ],
        "nose": [
          "STRING",
          {
            "default": "rgb(255, 102, 255)",
            "multiline": false
          }
        ],
        "upper_lip": [
          "STRING",
          {
            "default": "rgb(102, 0, 51)",
            "multiline": false
          }
        ],
        "inner_mouth": [
          "STRING",
          {
            "default": "rgb(255, 204, 255)",
            "multiline": false
          }
        ],
        "lower_lip": [
          "STRING",
          {
            "default": "rgb(255, 0, 102)",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pose_kps",
        "mode",
        "skin",
        "left_eye",
        "right_eye",
        "nose",
        "upper_lip",
        "inner_mouth",
        "lower_lip"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FacialPartColoringFromPoseKps",
    "display_name": "Colorize Facial Parts from PoseKPS",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": false
  },
  "UpperBodyTrackingFromPoseKps": {
    "input": {
      "required": {
        "pose_kps": [
          "POSE_KEYPOINT"
        ],
        "id_include": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "Head_width_height": [
          "STRING",
          {
            "default": "256, 256",
            "multiline": false
          }
        ],
        "Neck_width_height": [
          "STRING",
          {
            "default": "100, 100",
            "multiline": false
          }
        ],
        "Shoulder_width_height": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "Torso_width_height": [
          "STRING",
          {
            "default": "350, 450",
            "multiline": false
          }
        ],
        "RArm_width_height": [
          "STRING",
          {
            "default": "128, 256",
            "multiline": false
          }
        ],
        "RForearm_width_height": [
          "STRING",
          {
            "default": "128, 256",
            "multiline": false
          }
        ],
        "LArm_width_height": [
          "STRING",
          {
            "default": "128, 256",
            "multiline": false
          }
        ],
        "LForearm_width_height": [
          "STRING",
          {
            "default": "128, 256",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pose_kps",
        "id_include",
        "Head_width_height",
        "Neck_width_height",
        "Shoulder_width_height",
        "Torso_width_height",
        "RArm_width_height",
        "RForearm_width_height",
        "LArm_width_height",
        "LForearm_width_height"
      ]
    },
    "output": [
      "TRACKING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "tracking",
      "prompt"
    ],
    "name": "UpperBodyTrackingFromPoseKps",
    "display_name": "Upper Body Tracking From PoseKps (InstanceDiffusion)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": false
  },
  "RenderPeopleKps": {
    "input": {
      "required": {
        "kps": [
          "POSE_KEYPOINT"
        ],
        "render_body": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "render_hand": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "render_face": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "kps",
        "render_body",
        "render_hand",
        "render_face"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "RenderPeopleKps",
    "display_name": "Render Pose JSON (Human)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": false
  },
  "RenderAnimalKps": {
    "input": {
      "required": {
        "kps": [
          "POSE_KEYPOINT"
        ]
      }
    },
    "input_order": {
      "required": [
        "kps"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "RenderAnimalKps",
    "display_name": "Render Pose JSON (Animal)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": false
  },
  "PiDiNetPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "PiDiNetPreprocessor",
    "display_name": "PiDiNet Soft-Edge Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "OpenposePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "detect_hand": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "detect_body": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "detect_face": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "scale_stick_for_xinsr_cn": [
          [
            "disable",
            "enable"
          ],
          {
            "default": "disable"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "detect_hand",
        "detect_body",
        "detect_face",
        "resolution",
        "scale_stick_for_xinsr_cn"
      ]
    },
    "output": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "name": "OpenposePreprocessor",
    "display_name": "OpenPose Pose",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "OneFormer-COCO-SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "OneFormer-COCO-SemSegPreprocessor",
    "display_name": "OneFormer COCO Segmentor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "OneFormer-ADE20K-SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "OneFormer-ADE20K-SemSegPreprocessor",
    "display_name": "OneFormer ADE20K Segmentor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "BAE-NormalMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "BAE-NormalMapPreprocessor",
    "display_name": "BAE Normal Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "M-LSDPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "score_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.01,
            "max": 2.0,
            "step": 0.01
          }
        ],
        "dist_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.01,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "score_threshold",
        "dist_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "M-LSDPreprocessor",
    "display_name": "M-LSD Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "MiDaS-NormalMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "a": [
          "FLOAT",
          {
            "default": 6.283185307179586,
            "min": 0.0,
            "max": 15.707963267948966,
            "step": 0.01
          }
        ],
        "bg_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "a",
        "bg_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "MiDaS-NormalMapPreprocessor",
    "display_name": "MiDaS Normal Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "MiDaS-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "a": [
          "FLOAT",
          {
            "default": 6.283185307179586,
            "min": 0.0,
            "max": 15.707963267948966,
            "step": 0.01
          }
        ],
        "bg_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "a",
        "bg_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "MiDaS-DepthMapPreprocessor",
    "display_name": "MiDaS Depth Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Metric3D-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "backbone": [
          [
            "vit-small",
            "vit-large",
            "vit-giant2"
          ],
          {
            "default": "vit-small"
          }
        ],
        "fx": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "fy": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "backbone",
        "fx",
        "fy",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Metric3D-DepthMapPreprocessor",
    "display_name": "Metric3D Depth Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Metric3D-NormalMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "backbone": [
          [
            "vit-small",
            "vit-large",
            "vit-giant2"
          ],
          {
            "default": "vit-small"
          }
        ],
        "fx": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "fy": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "backbone",
        "fx",
        "fy",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Metric3D-NormalMapPreprocessor",
    "display_name": "Metric3D Normal Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "MeshGraphormer-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "mask_bbox_padding": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 100
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "mask_type": [
          [
            "based_on_depth",
            "tight_bboxes",
            "original"
          ],
          {
            "default": "based_on_depth"
          }
        ],
        "mask_expand": [
          "INT",
          {
            "default": 5,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "rand_seed": [
          "INT",
          {
            "default": 88,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ],
        "detect_thr": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0.1,
            "max": 1,
            "step": 0.01
          }
        ],
        "presence_thr": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0.1,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "mask_bbox_padding",
        "resolution",
        "mask_type",
        "mask_expand",
        "rand_seed",
        "detect_thr",
        "presence_thr"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "INPAINTING_MASK"
    ],
    "name": "MeshGraphormer-DepthMapPreprocessor",
    "display_name": "MeshGraphormer Hand Refiner",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "MeshGraphormer+ImpactDetector-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "bbox_detector": [
          "BBOX_DETECTOR"
        ]
      },
      "optional": {
        "bbox_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.1,
            "max": 1,
            "step": 0.01
          }
        ],
        "bbox_dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "bbox_crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "drop_size": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "mask_bbox_padding": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "mask_type": [
          [
            "based_on_depth",
            "tight_bboxes",
            "original"
          ],
          {
            "default": "based_on_depth"
          }
        ],
        "mask_expand": [
          "INT",
          {
            "default": 5,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "rand_seed": [
          "INT",
          {
            "default": 88,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "bbox_detector"
      ],
      "optional": [
        "bbox_threshold",
        "bbox_dilation",
        "bbox_crop_factor",
        "drop_size",
        "mask_bbox_padding",
        "mask_type",
        "mask_expand",
        "rand_seed",
        "resolution"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "INPAINTING_MASK"
    ],
    "name": "MeshGraphormer+ImpactDetector-DepthMapPreprocessor",
    "display_name": "MeshGraphormer Hand Refiner With External Detector",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "MediaPipe-FaceMeshPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "max_faces": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 50,
            "step": 1
          }
        ],
        "min_confidence": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.1,
            "max": 1,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "max_faces",
        "min_confidence",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "MediaPipe-FaceMeshPreprocessor",
    "display_name": "MediaPipe Face Mesh",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "Manga2Anime_LineArt_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Manga2Anime_LineArt_Preprocessor",
    "display_name": "Manga Lineart (aka lineart_anime_denoise)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "LineartStandardPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "guassian_sigma": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "intensity_threshold": [
          "INT",
          {
            "default": 8,
            "min": 0,
            "max": 16,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "guassian_sigma",
        "intensity_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "LineartStandardPreprocessor",
    "display_name": "Standard Lineart",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "AnimeLineArtPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "AnimeLineArtPreprocessor",
    "display_name": "Anime Lineart",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "LineArtPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "coarse": [
          [
            "disable",
            "enable"
          ],
          {
            "default": "disable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "coarse",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "LineArtPreprocessor",
    "display_name": "Realistic Lineart",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "LeReS-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "rm_nearest": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "rm_background": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "boost": [
          [
            "disable",
            "enable"
          ],
          {
            "default": "disable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "rm_nearest",
        "rm_background",
        "boost",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "LeReS-DepthMapPreprocessor",
    "display_name": "LeReS Depth Map (enable boost for leres++)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "InpaintPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      },
      "optional": {
        "black_pixel_for_xinsir_cn": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask"
      ],
      "optional": [
        "black_pixel_for_xinsir_cn"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "InpaintPreprocessor",
    "display_name": "Inpaint Preprocessor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/others",
    "output_node": false
  },
  "HEDPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "HEDPreprocessor",
    "display_name": "HED Soft-Edge Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "FakeScribblePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FakeScribblePreprocessor",
    "display_name": "Fake Scribble Lines (aka scribble_hed)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "DWPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "detect_hand": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "detect_body": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "detect_face": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "bbox_detector": [
          [
            "yolox_l.torchscript.pt",
            "yolox_l.onnx",
            "yolo_nas_l_fp16.onnx",
            "yolo_nas_m_fp16.onnx",
            "yolo_nas_s_fp16.onnx"
          ],
          {
            "default": "yolox_l.onnx"
          }
        ],
        "pose_estimator": [
          [
            "dw-ll_ucoco_384_bs5.torchscript.pt",
            "dw-ll_ucoco_384.onnx",
            "dw-ll_ucoco.onnx"
          ],
          {
            "default": "dw-ll_ucoco_384_bs5.torchscript.pt"
          }
        ],
        "scale_stick_for_xinsr_cn": [
          [
            "disable",
            "enable"
          ],
          {
            "default": "disable"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "detect_hand",
        "detect_body",
        "detect_face",
        "resolution",
        "bbox_detector",
        "pose_estimator",
        "scale_stick_for_xinsr_cn"
      ]
    },
    "output": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "name": "DWPreprocessor",
    "display_name": "DWPose Estimator",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "AnimalPosePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "bbox_detector": [
          [
            "yolox_l.torchscript.pt",
            "yolox_l.onnx",
            "yolo_nas_l_fp16.onnx",
            "yolo_nas_m_fp16.onnx",
            "yolo_nas_s_fp16.onnx"
          ],
          {
            "default": "yolox_l.torchscript.pt"
          }
        ],
        "pose_estimator": [
          [
            "rtmpose-m_ap10k_256_bs5.torchscript.pt",
            "rtmpose-m_ap10k_256.onnx"
          ],
          {
            "default": "rtmpose-m_ap10k_256_bs5.torchscript.pt"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "bbox_detector",
        "pose_estimator",
        "resolution"
      ]
    },
    "output": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "name": "AnimalPosePreprocessor",
    "display_name": "AnimalPose Estimator (AP10K)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "DSINE-NormalMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "fov": [
          "FLOAT",
          {
            "default": 60.0,
            "min": 0,
            "max": 365.0,
            "step": 0.01
          }
        ],
        "iterations": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "fov",
        "iterations",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "DSINE-NormalMapPreprocessor",
    "display_name": "DSINE Normal Map",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "DiffusionEdge_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "environment": [
          [
            "indoor",
            "urban",
            "natrual"
          ],
          {
            "default": "indoor"
          }
        ],
        "patch_batch_size": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 16,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "environment",
        "patch_batch_size",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "DiffusionEdge_Preprocessor",
    "display_name": "Diffusion Edge (batch size \u2191 => speed \u2191, VRAM \u2191)",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "DepthAnythingV2Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "ckpt_name": [
          [
            "depth_anything_v2_vitg.pth",
            "depth_anything_v2_vitl.pth",
            "depth_anything_v2_vitb.pth",
            "depth_anything_v2_vits.pth"
          ],
          {
            "default": "depth_anything_v2_vitl.pth"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "ckpt_name",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "DepthAnythingV2Preprocessor",
    "display_name": "Depth Anything V2 - Relative",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "DepthAnythingPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "ckpt_name": [
          [
            "depth_anything_vitl14.pth",
            "depth_anything_vitb14.pth",
            "depth_anything_vits14.pth"
          ],
          {
            "default": "depth_anything_vitl14.pth"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "ckpt_name",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "DepthAnythingPreprocessor",
    "display_name": "Depth Anything",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Zoe_DepthAnythingPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "environment": [
          [
            "indoor",
            "outdoor"
          ],
          {
            "default": "indoor"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "environment",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Zoe_DepthAnythingPreprocessor",
    "display_name": "Zoe Depth Anything",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "DensePosePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "model": [
          [
            "densepose_r50_fpn_dl.torchscript",
            "densepose_r101_fpn_dl.torchscript"
          ],
          {
            "default": "densepose_r50_fpn_dl.torchscript"
          }
        ],
        "cmap": [
          [
            "Viridis (MagicAnimate)",
            "Parula (CivitAI)"
          ],
          {
            "default": "Viridis (MagicAnimate)"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "model",
        "cmap",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "DensePosePreprocessor",
    "display_name": "DensePose Estimator",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "ColorPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ColorPreprocessor",
    "display_name": "Color Pallete",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/T2IAdapter-only",
    "output_node": false
  },
  "CannyEdgePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "low_threshold": [
          "INT",
          {
            "default": 100,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "high_threshold": [
          "INT",
          {
            "default": 200,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "low_threshold",
        "high_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "CannyEdgePreprocessor",
    "display_name": "Canny Edge",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "BinaryPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "bin_threshold": [
          "INT",
          {
            "default": 100,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "bin_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "BinaryPreprocessor",
    "display_name": "Binary Lines",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "AnyLineArtPreprocessor_aux": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "merge_with_lineart": [
          [
            "lineart_standard",
            "lineart_realisitic",
            "lineart_anime",
            "manga_line"
          ],
          {
            "default": "lineart_standard"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 1280,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "lineart_lower_bound": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "lineart_upper_bound": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "object_min_size": [
          "INT",
          {
            "default": 36,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "object_connectivity": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "merge_with_lineart",
        "resolution",
        "lineart_lower_bound",
        "lineart_upper_bound",
        "object_min_size",
        "object_connectivity"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "AnyLineArtPreprocessor_aux",
    "display_name": "AnyLine Lineart",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "AnimeFace_SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "remove_background_using_abg": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 512,
            "max": 512,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "remove_background_using_abg",
        "resolution"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "ABG_CHARACTER_MASK (MASK)"
    ],
    "name": "AnimeFace_SemSegPreprocessor",
    "display_name": "Anime Face Segmentor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "AIO_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "preprocessor": [
          [
            "none",
            "Zoe-DepthMapPreprocessor",
            "UniFormer-SemSegPreprocessor",
            "SemSegPreprocessor",
            "TilePreprocessor",
            "TTPlanet_TileGF_Preprocessor",
            "TTPlanet_TileSimple_Preprocessor",
            "TEEDPreprocessor",
            "ShufflePreprocessor",
            "SAMPreprocessor",
            "ScribblePreprocessor",
            "Scribble_XDoG_Preprocessor",
            "Scribble_PiDiNet_Preprocessor",
            "ImageLuminanceDetector",
            "ImageIntensityDetector",
            "PyraCannyPreprocessor",
            "PiDiNetPreprocessor",
            "OpenposePreprocessor",
            "OneFormer-COCO-SemSegPreprocessor",
            "OneFormer-ADE20K-SemSegPreprocessor",
            "BAE-NormalMapPreprocessor",
            "M-LSDPreprocessor",
            "MiDaS-NormalMapPreprocessor",
            "MiDaS-DepthMapPreprocessor",
            "Metric3D-DepthMapPreprocessor",
            "Metric3D-NormalMapPreprocessor",
            "MeshGraphormer-DepthMapPreprocessor",
            "MediaPipe-FaceMeshPreprocessor",
            "Manga2Anime_LineArt_Preprocessor",
            "LineartStandardPreprocessor",
            "AnimeLineArtPreprocessor",
            "LineArtPreprocessor",
            "LeReS-DepthMapPreprocessor",
            "HEDPreprocessor",
            "FakeScribblePreprocessor",
            "DWPreprocessor",
            "AnimalPosePreprocessor",
            "DSINE-NormalMapPreprocessor",
            "DepthAnythingV2Preprocessor",
            "DepthAnythingPreprocessor",
            "Zoe_DepthAnythingPreprocessor",
            "DensePosePreprocessor",
            "ColorPreprocessor",
            "CannyEdgePreprocessor",
            "BinaryPreprocessor",
            "AnyLineArtPreprocessor_aux",
            "AnimeFace_SemSegPreprocessor"
          ],
          {
            "default": "none"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "preprocessor",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "AIO_Preprocessor",
    "display_name": "AIO Aux Preprocessor",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "ControlNetPreprocessorSelector": {
    "input": {
      "required": {
        "preprocessor": [
          [
            "none",
            "Zoe-DepthMapPreprocessor",
            "UniFormer-SemSegPreprocessor",
            "SemSegPreprocessor",
            "TilePreprocessor",
            "TTPlanet_TileGF_Preprocessor",
            "TTPlanet_TileSimple_Preprocessor",
            "TEEDPreprocessor",
            "ShufflePreprocessor",
            "SAMPreprocessor",
            "ScribblePreprocessor",
            "Scribble_XDoG_Preprocessor",
            "Scribble_PiDiNet_Preprocessor",
            "ImageLuminanceDetector",
            "ImageIntensityDetector",
            "PyraCannyPreprocessor",
            "PiDiNetPreprocessor",
            "OpenposePreprocessor",
            "OneFormer-COCO-SemSegPreprocessor",
            "OneFormer-ADE20K-SemSegPreprocessor",
            "BAE-NormalMapPreprocessor",
            "M-LSDPreprocessor",
            "MiDaS-NormalMapPreprocessor",
            "MiDaS-DepthMapPreprocessor",
            "Metric3D-DepthMapPreprocessor",
            "Metric3D-NormalMapPreprocessor",
            "MeshGraphormer-DepthMapPreprocessor",
            "MediaPipe-FaceMeshPreprocessor",
            "Manga2Anime_LineArt_Preprocessor",
            "LineartStandardPreprocessor",
            "AnimeLineArtPreprocessor",
            "LineArtPreprocessor",
            "LeReS-DepthMapPreprocessor",
            "HEDPreprocessor",
            "FakeScribblePreprocessor",
            "DWPreprocessor",
            "AnimalPosePreprocessor",
            "DSINE-NormalMapPreprocessor",
            "DepthAnythingV2Preprocessor",
            "DepthAnythingPreprocessor",
            "Zoe_DepthAnythingPreprocessor",
            "DensePosePreprocessor",
            "ColorPreprocessor",
            "CannyEdgePreprocessor",
            "BinaryPreprocessor",
            "AnyLineArtPreprocessor_aux",
            "AnimeFace_SemSegPreprocessor"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "preprocessor"
      ]
    },
    "output": [
      [
        "none",
        "Zoe-DepthMapPreprocessor",
        "UniFormer-SemSegPreprocessor",
        "SemSegPreprocessor",
        "TilePreprocessor",
        "TTPlanet_TileGF_Preprocessor",
        "TTPlanet_TileSimple_Preprocessor",
        "TEEDPreprocessor",
        "ShufflePreprocessor",
        "SAMPreprocessor",
        "ScribblePreprocessor",
        "Scribble_XDoG_Preprocessor",
        "Scribble_PiDiNet_Preprocessor",
        "ImageLuminanceDetector",
        "ImageIntensityDetector",
        "PyraCannyPreprocessor",
        "PiDiNetPreprocessor",
        "OpenposePreprocessor",
        "OneFormer-COCO-SemSegPreprocessor",
        "OneFormer-ADE20K-SemSegPreprocessor",
        "BAE-NormalMapPreprocessor",
        "M-LSDPreprocessor",
        "MiDaS-NormalMapPreprocessor",
        "MiDaS-DepthMapPreprocessor",
        "Metric3D-DepthMapPreprocessor",
        "Metric3D-NormalMapPreprocessor",
        "MeshGraphormer-DepthMapPreprocessor",
        "MediaPipe-FaceMeshPreprocessor",
        "Manga2Anime_LineArt_Preprocessor",
        "LineartStandardPreprocessor",
        "AnimeLineArtPreprocessor",
        "LineArtPreprocessor",
        "LeReS-DepthMapPreprocessor",
        "HEDPreprocessor",
        "FakeScribblePreprocessor",
        "DWPreprocessor",
        "AnimalPosePreprocessor",
        "DSINE-NormalMapPreprocessor",
        "DepthAnythingV2Preprocessor",
        "DepthAnythingPreprocessor",
        "Zoe_DepthAnythingPreprocessor",
        "DensePosePreprocessor",
        "ColorPreprocessor",
        "CannyEdgePreprocessor",
        "BinaryPreprocessor",
        "AnyLineArtPreprocessor_aux",
        "AnimeFace_SemSegPreprocessor"
      ]
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "preprocessor"
    ],
    "name": "ControlNetPreprocessorSelector",
    "display_name": "Preprocessor Selector",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "PixelPerfectResolution": {
    "input": {
      "required": {
        "original_image": [
          "IMAGE"
        ],
        "image_gen_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "image_gen_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "resize_mode": [
          [
            "Just Resize",
            "Crop and Resize",
            "Resize and Fill"
          ],
          {
            "default": "Just Resize"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "original_image",
        "image_gen_width",
        "image_gen_height",
        "resize_mode"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "RESOLUTION (INT)"
    ],
    "name": "PixelPerfectResolution",
    "display_name": "Pixel Perfect Resolution",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "ImageGenResolutionFromImage": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE_GEN_WIDTH (INT)",
      "IMAGE_GEN_HEIGHT (INT)"
    ],
    "name": "ImageGenResolutionFromImage",
    "display_name": "Generation Resolution From Image",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "ImageGenResolutionFromLatent": {
    "input": {
      "required": {
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "latent"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE_GEN_WIDTH (INT)",
      "IMAGE_GEN_HEIGHT (INT)"
    ],
    "name": "ImageGenResolutionFromLatent",
    "display_name": "Generation Resolution From Latent",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "HintImageEnchance": {
    "input": {
      "required": {
        "hint_image": [
          "IMAGE"
        ],
        "image_gen_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "image_gen_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "resize_mode": [
          [
            "Just Resize",
            "Crop and Resize",
            "Resize and Fill"
          ],
          {
            "default": "Just Resize"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "hint_image",
        "image_gen_width",
        "image_gen_height",
        "resize_mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "HintImageEnchance",
    "display_name": "Enchance And Resize Hint Images",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "ExecuteAllControlNetPreprocessors": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ExecuteAllControlNetPreprocessors",
    "display_name": "Execute All ControlNet Preprocessors",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "ControlNetAuxSimpleAddText": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "text"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ControlNetAuxSimpleAddText",
    "display_name": "ControlNetAuxSimpleAddText",
    "description": "",
    "python_module": "custom_nodes.comfyui_controlnet_aux",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "Inference_Core_ModelMergeBlockNumber": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "time_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "label_emb.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.10.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.11.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "out.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "time_embed.",
        "label_emb.",
        "input_blocks.0.",
        "input_blocks.1.",
        "input_blocks.2.",
        "input_blocks.3.",
        "input_blocks.4.",
        "input_blocks.5.",
        "input_blocks.6.",
        "input_blocks.7.",
        "input_blocks.8.",
        "input_blocks.9.",
        "input_blocks.10.",
        "input_blocks.11.",
        "middle_block.0.",
        "middle_block.1.",
        "middle_block.2.",
        "output_blocks.0.",
        "output_blocks.1.",
        "output_blocks.2.",
        "output_blocks.3.",
        "output_blocks.4.",
        "output_blocks.5.",
        "output_blocks.6.",
        "output_blocks.7.",
        "output_blocks.8.",
        "output_blocks.9.",
        "output_blocks.10.",
        "output_blocks.11.",
        "out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "Inference_Core_ModelMergeBlockNumber",
    "display_name": "Inference_Core_ModelMergeBlockNumber",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "Inference_Core_ReferenceOnlySimple": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "reference": [
          "LATENT"
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "reference",
        "batch_size"
      ]
    },
    "output": [
      "MODEL",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "LATENT"
    ],
    "name": "Inference_Core_ReferenceOnlySimple",
    "display_name": "Inference_Core_ReferenceOnlySimple",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "custom_node_experiments",
    "output_node": false
  },
  "Inference_Core_RescaleClassifierFreeGuidanceTest": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "multiplier"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "Inference_Core_RescaleClassifierFreeGuidanceTest",
    "display_name": "Inference_Core_RescaleClassifierFreeGuidanceTest",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "custom_node_experiments",
    "output_node": false
  },
  "Inference_Core_ModelSamplerTonemapNoiseTest": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "multiplier"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "Inference_Core_ModelSamplerTonemapNoiseTest",
    "display_name": "Inference_Core_ModelSamplerTonemapNoiseTest",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "custom_node_experiments",
    "output_node": false
  },
  "Inference_Core_TonemapNoiseWithRescaleCFG": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "tonemap_multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "rescale_multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "tonemap_multiplier",
        "rescale_multiplier"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "Inference_Core_TonemapNoiseWithRescaleCFG",
    "display_name": "Inference_Core_TonemapNoiseWithRescaleCFG",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "custom_node_experiments",
    "output_node": false
  },
  "Inference_Core_ModelMergeSDXL": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "time_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "label_emb.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.0": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.0": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.6": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.7": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.8": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "out.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "time_embed.",
        "label_emb.",
        "input_blocks.0",
        "input_blocks.1",
        "input_blocks.2",
        "input_blocks.3",
        "input_blocks.4",
        "input_blocks.5",
        "input_blocks.6",
        "input_blocks.7",
        "input_blocks.8",
        "middle_block.0",
        "middle_block.1",
        "middle_block.2",
        "output_blocks.0",
        "output_blocks.1",
        "output_blocks.2",
        "output_blocks.3",
        "output_blocks.4",
        "output_blocks.5",
        "output_blocks.6",
        "output_blocks.7",
        "output_blocks.8",
        "out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "Inference_Core_ModelMergeSDXL",
    "display_name": "Inference_Core_ModelMergeSDXL",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "Inference_Core_ModelMergeSDXLTransformers": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "time_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "label_emb.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.0.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.1.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.2.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.3.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.6.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.3.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.4.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.5.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.6.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.7.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.8.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.9.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.6.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.7.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.8.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "out.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "time_embed.",
        "label_emb.",
        "input_blocks.0.0.",
        "input_blocks.1.0.",
        "input_blocks.2.0.",
        "input_blocks.3.0.",
        "input_blocks.4.0.",
        "input_blocks.4.1.",
        "input_blocks.4.1.transformer_blocks.0.",
        "input_blocks.4.1.transformer_blocks.1.",
        "input_blocks.5.0.",
        "input_blocks.5.1.",
        "input_blocks.5.1.transformer_blocks.0.",
        "input_blocks.5.1.transformer_blocks.1.",
        "input_blocks.6.0.",
        "input_blocks.7.0.",
        "input_blocks.7.1.",
        "input_blocks.7.1.transformer_blocks.0.",
        "input_blocks.7.1.transformer_blocks.1.",
        "input_blocks.7.1.transformer_blocks.2.",
        "input_blocks.7.1.transformer_blocks.3.",
        "input_blocks.7.1.transformer_blocks.4.",
        "input_blocks.7.1.transformer_blocks.5.",
        "input_blocks.7.1.transformer_blocks.6.",
        "input_blocks.7.1.transformer_blocks.7.",
        "input_blocks.7.1.transformer_blocks.8.",
        "input_blocks.7.1.transformer_blocks.9.",
        "input_blocks.8.0.",
        "input_blocks.8.1.",
        "input_blocks.8.1.transformer_blocks.0.",
        "input_blocks.8.1.transformer_blocks.1.",
        "input_blocks.8.1.transformer_blocks.2.",
        "input_blocks.8.1.transformer_blocks.3.",
        "input_blocks.8.1.transformer_blocks.4.",
        "input_blocks.8.1.transformer_blocks.5.",
        "input_blocks.8.1.transformer_blocks.6.",
        "input_blocks.8.1.transformer_blocks.7.",
        "input_blocks.8.1.transformer_blocks.8.",
        "input_blocks.8.1.transformer_blocks.9.",
        "middle_block.0.",
        "middle_block.1.",
        "middle_block.1.transformer_blocks.0.",
        "middle_block.1.transformer_blocks.1.",
        "middle_block.1.transformer_blocks.2.",
        "middle_block.1.transformer_blocks.3.",
        "middle_block.1.transformer_blocks.4.",
        "middle_block.1.transformer_blocks.5.",
        "middle_block.1.transformer_blocks.6.",
        "middle_block.1.transformer_blocks.7.",
        "middle_block.1.transformer_blocks.8.",
        "middle_block.1.transformer_blocks.9.",
        "middle_block.2.",
        "output_blocks.0.0.",
        "output_blocks.0.1.",
        "output_blocks.0.1.transformer_blocks.0.",
        "output_blocks.0.1.transformer_blocks.1.",
        "output_blocks.0.1.transformer_blocks.2.",
        "output_blocks.0.1.transformer_blocks.3.",
        "output_blocks.0.1.transformer_blocks.4.",
        "output_blocks.0.1.transformer_blocks.5.",
        "output_blocks.0.1.transformer_blocks.6.",
        "output_blocks.0.1.transformer_blocks.7.",
        "output_blocks.0.1.transformer_blocks.8.",
        "output_blocks.0.1.transformer_blocks.9.",
        "output_blocks.1.0.",
        "output_blocks.1.1.",
        "output_blocks.1.1.transformer_blocks.0.",
        "output_blocks.1.1.transformer_blocks.1.",
        "output_blocks.1.1.transformer_blocks.2.",
        "output_blocks.1.1.transformer_blocks.3.",
        "output_blocks.1.1.transformer_blocks.4.",
        "output_blocks.1.1.transformer_blocks.5.",
        "output_blocks.1.1.transformer_blocks.6.",
        "output_blocks.1.1.transformer_blocks.7.",
        "output_blocks.1.1.transformer_blocks.8.",
        "output_blocks.1.1.transformer_blocks.9.",
        "output_blocks.2.0.",
        "output_blocks.2.1.",
        "output_blocks.2.1.transformer_blocks.0.",
        "output_blocks.2.1.transformer_blocks.1.",
        "output_blocks.2.1.transformer_blocks.2.",
        "output_blocks.2.1.transformer_blocks.3.",
        "output_blocks.2.1.transformer_blocks.4.",
        "output_blocks.2.1.transformer_blocks.5.",
        "output_blocks.2.1.transformer_blocks.6.",
        "output_blocks.2.1.transformer_blocks.7.",
        "output_blocks.2.1.transformer_blocks.8.",
        "output_blocks.2.1.transformer_blocks.9.",
        "output_blocks.3.0.",
        "output_blocks.3.1.",
        "output_blocks.3.1.transformer_blocks.0.",
        "output_blocks.3.1.transformer_blocks.1.",
        "output_blocks.4.0.",
        "output_blocks.4.1.",
        "output_blocks.4.1.transformer_blocks.0.",
        "output_blocks.4.1.transformer_blocks.1.",
        "output_blocks.5.0.",
        "output_blocks.5.1.",
        "output_blocks.5.1.transformer_blocks.0.",
        "output_blocks.5.1.transformer_blocks.1.",
        "output_blocks.6.0.",
        "output_blocks.7.0.",
        "output_blocks.8.0.",
        "out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "Inference_Core_ModelMergeSDXLTransformers",
    "display_name": "Inference_Core_ModelMergeSDXLTransformers",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "Inference_Core_ModelMergeSDXLDetailedTransformers": {
    "input": {
      "required": {
        "model1": [
          "MODEL"
        ],
        "model2": [
          "MODEL"
        ],
        "time_embed.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "label_emb.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.0.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.1.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.2.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.3.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.0.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.0.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.0.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.0.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.0.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.0.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.0.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.0.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.0.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.0.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.0.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.0.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.1.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.1.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.1.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.1.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.1.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.1.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.1.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.1.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.1.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.1.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.1.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.4.1.transformer_blocks.1.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.0.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.0.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.0.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.0.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.0.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.0.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.0.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.0.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.0.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.0.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.0.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.0.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.1.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.1.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.1.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.1.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.1.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.1.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.1.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.1.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.1.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.1.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.1.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.5.1.transformer_blocks.1.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.6.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.0.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.0.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.0.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.0.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.0.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.0.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.0.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.0.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.0.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.0.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.0.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.0.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.1.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.1.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.1.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.1.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.1.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.1.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.1.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.1.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.1.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.1.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.1.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.1.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.2.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.2.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.2.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.2.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.2.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.2.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.2.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.2.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.2.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.2.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.2.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.2.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.3.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.3.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.3.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.3.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.3.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.3.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.3.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.3.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.3.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.3.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.3.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.3.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.4.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.4.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.4.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.4.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.4.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.4.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.4.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.4.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.4.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.4.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.4.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.4.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.5.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.5.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.5.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.5.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.5.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.5.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.5.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.5.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.5.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.5.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.5.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.5.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.6.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.6.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.6.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.6.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.6.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.6.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.6.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.6.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.6.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.6.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.6.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.6.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.7.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.7.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.7.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.7.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.7.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.7.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.7.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.7.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.7.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.7.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.7.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.7.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.8.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.8.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.8.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.8.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.8.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.8.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.8.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.8.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.8.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.8.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.8.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.8.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.9.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.9.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.9.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.9.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.9.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.9.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.9.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.9.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.9.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.9.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.9.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.7.1.transformer_blocks.9.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.0.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.0.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.0.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.0.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.0.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.0.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.0.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.0.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.0.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.0.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.0.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.0.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.1.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.1.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.1.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.1.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.1.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.1.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.1.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.1.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.1.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.1.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.1.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.1.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.2.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.2.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.2.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.2.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.2.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.2.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.2.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.2.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.2.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.2.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.2.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.2.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.3.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.3.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.3.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.3.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.3.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.3.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.3.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.3.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.3.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.3.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.3.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.3.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.4.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.4.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.4.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.4.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.4.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.4.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.4.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.4.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.4.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.4.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.4.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.4.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.5.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.5.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.5.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.5.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.5.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.5.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.5.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.5.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.5.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.5.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.5.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.5.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.6.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.6.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.6.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.6.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.6.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.6.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.6.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.6.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.6.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.6.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.6.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.6.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.7.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.7.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.7.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.7.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.7.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.7.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.7.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.7.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.7.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.7.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.7.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.7.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.8.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.8.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.8.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.8.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.8.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.8.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.8.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.8.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.8.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.8.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.8.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.8.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.9.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.9.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.9.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.9.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.9.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.9.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.9.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.9.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.9.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.9.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.9.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "input_blocks.8.1.transformer_blocks.9.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.0.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.0.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.0.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.0.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.0.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.0.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.0.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.0.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.0.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.0.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.0.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.0.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.1.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.1.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.1.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.1.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.1.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.1.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.1.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.1.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.1.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.1.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.1.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.1.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.2.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.2.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.2.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.2.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.2.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.2.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.2.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.2.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.2.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.2.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.2.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.2.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.3.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.3.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.3.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.3.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.3.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.3.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.3.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.3.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.3.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.3.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.3.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.3.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.4.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.4.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.4.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.4.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.4.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.4.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.4.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.4.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.4.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.4.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.4.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.4.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.5.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.5.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.5.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.5.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.5.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.5.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.5.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.5.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.5.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.5.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.5.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.5.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.6.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.6.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.6.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.6.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.6.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.6.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.6.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.6.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.6.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.6.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.6.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.6.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.7.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.7.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.7.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.7.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.7.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.7.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.7.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.7.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.7.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.7.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.7.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.7.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.8.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.8.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.8.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.8.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.8.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.8.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.8.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.8.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.8.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.8.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.8.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.8.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.9.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.9.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.9.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.9.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.9.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.9.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.9.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.9.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.9.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.9.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.9.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.1.transformer_blocks.9.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "middle_block.2.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.0.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.0.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.0.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.0.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.0.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.0.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.0.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.0.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.0.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.0.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.0.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.0.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.1.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.1.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.1.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.1.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.1.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.1.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.1.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.1.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.1.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.1.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.1.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.1.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.2.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.2.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.2.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.2.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.2.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.2.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.2.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.2.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.2.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.2.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.2.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.2.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.3.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.3.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.3.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.3.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.3.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.3.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.3.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.3.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.3.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.3.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.3.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.3.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.4.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.4.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.4.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.4.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.4.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.4.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.4.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.4.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.4.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.4.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.4.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.4.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.5.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.5.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.5.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.5.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.5.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.5.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.5.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.5.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.5.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.5.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.5.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.5.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.6.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.6.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.6.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.6.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.6.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.6.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.6.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.6.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.6.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.6.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.6.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.6.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.7.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.7.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.7.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.7.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.7.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.7.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.7.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.7.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.7.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.7.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.7.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.7.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.8.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.8.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.8.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.8.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.8.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.8.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.8.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.8.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.8.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.8.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.8.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.8.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.9.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.9.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.9.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.9.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.9.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.9.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.9.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.9.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.9.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.9.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.9.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.0.1.transformer_blocks.9.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.0.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.0.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.0.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.0.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.0.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.0.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.0.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.0.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.0.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.0.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.0.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.0.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.1.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.1.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.1.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.1.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.1.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.1.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.1.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.1.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.1.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.1.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.1.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.1.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.2.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.2.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.2.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.2.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.2.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.2.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.2.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.2.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.2.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.2.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.2.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.2.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.3.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.3.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.3.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.3.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.3.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.3.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.3.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.3.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.3.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.3.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.3.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.3.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.4.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.4.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.4.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.4.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.4.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.4.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.4.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.4.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.4.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.4.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.4.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.4.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.5.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.5.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.5.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.5.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.5.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.5.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.5.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.5.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.5.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.5.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.5.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.5.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.6.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.6.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.6.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.6.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.6.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.6.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.6.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.6.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.6.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.6.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.6.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.6.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.7.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.7.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.7.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.7.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.7.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.7.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.7.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.7.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.7.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.7.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.7.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.7.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.8.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.8.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.8.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.8.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.8.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.8.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.8.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.8.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.8.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.8.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.8.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.8.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.9.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.9.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.9.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.9.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.9.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.9.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.9.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.9.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.9.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.9.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.9.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.1.1.transformer_blocks.9.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.0.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.0.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.0.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.0.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.0.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.0.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.0.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.0.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.0.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.0.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.0.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.0.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.1.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.1.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.1.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.1.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.1.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.1.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.1.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.1.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.1.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.1.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.1.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.1.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.2.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.2.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.2.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.2.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.2.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.2.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.2.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.2.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.2.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.2.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.2.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.2.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.3.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.3.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.3.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.3.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.3.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.3.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.3.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.3.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.3.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.3.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.3.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.3.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.4.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.4.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.4.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.4.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.4.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.4.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.4.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.4.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.4.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.4.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.4.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.4.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.5.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.5.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.5.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.5.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.5.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.5.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.5.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.5.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.5.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.5.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.5.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.5.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.6.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.6.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.6.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.6.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.6.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.6.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.6.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.6.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.6.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.6.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.6.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.6.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.7.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.7.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.7.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.7.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.7.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.7.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.7.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.7.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.7.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.7.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.7.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.7.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.8.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.8.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.8.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.8.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.8.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.8.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.8.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.8.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.8.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.8.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.8.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.8.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.9.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.9.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.9.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.9.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.9.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.9.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.9.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.9.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.9.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.9.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.9.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.2.1.transformer_blocks.9.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.0.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.0.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.0.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.0.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.0.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.0.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.0.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.0.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.0.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.0.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.0.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.0.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.1.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.1.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.1.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.1.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.1.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.1.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.1.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.1.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.1.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.1.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.1.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.3.1.transformer_blocks.1.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.0.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.0.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.0.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.0.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.0.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.0.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.0.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.0.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.0.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.0.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.0.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.0.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.1.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.1.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.1.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.1.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.1.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.1.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.1.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.1.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.1.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.1.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.1.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.4.1.transformer_blocks.1.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.0.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.0.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.0.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.0.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.0.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.0.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.0.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.0.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.0.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.0.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.0.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.0.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.1.norm1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.1.attn1.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.1.attn1.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.1.attn1.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.1.attn1.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.1.ff.net": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.1.norm2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.1.attn2.to_q": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.1.attn2.to_k": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.1.attn2.to_v": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.1.attn2.to_out": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.5.1.transformer_blocks.1.norm3": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.6.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.7.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "output_blocks.8.0.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "out.": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model1",
        "model2",
        "time_embed.",
        "label_emb.",
        "input_blocks.0.0.",
        "input_blocks.1.0.",
        "input_blocks.2.0.",
        "input_blocks.3.0.",
        "input_blocks.4.0.",
        "input_blocks.4.1.",
        "input_blocks.4.1.transformer_blocks.0.norm1",
        "input_blocks.4.1.transformer_blocks.0.attn1.to_q",
        "input_blocks.4.1.transformer_blocks.0.attn1.to_k",
        "input_blocks.4.1.transformer_blocks.0.attn1.to_v",
        "input_blocks.4.1.transformer_blocks.0.attn1.to_out",
        "input_blocks.4.1.transformer_blocks.0.ff.net",
        "input_blocks.4.1.transformer_blocks.0.norm2",
        "input_blocks.4.1.transformer_blocks.0.attn2.to_q",
        "input_blocks.4.1.transformer_blocks.0.attn2.to_k",
        "input_blocks.4.1.transformer_blocks.0.attn2.to_v",
        "input_blocks.4.1.transformer_blocks.0.attn2.to_out",
        "input_blocks.4.1.transformer_blocks.0.norm3",
        "input_blocks.4.1.transformer_blocks.1.norm1",
        "input_blocks.4.1.transformer_blocks.1.attn1.to_q",
        "input_blocks.4.1.transformer_blocks.1.attn1.to_k",
        "input_blocks.4.1.transformer_blocks.1.attn1.to_v",
        "input_blocks.4.1.transformer_blocks.1.attn1.to_out",
        "input_blocks.4.1.transformer_blocks.1.ff.net",
        "input_blocks.4.1.transformer_blocks.1.norm2",
        "input_blocks.4.1.transformer_blocks.1.attn2.to_q",
        "input_blocks.4.1.transformer_blocks.1.attn2.to_k",
        "input_blocks.4.1.transformer_blocks.1.attn2.to_v",
        "input_blocks.4.1.transformer_blocks.1.attn2.to_out",
        "input_blocks.4.1.transformer_blocks.1.norm3",
        "input_blocks.5.0.",
        "input_blocks.5.1.",
        "input_blocks.5.1.transformer_blocks.0.norm1",
        "input_blocks.5.1.transformer_blocks.0.attn1.to_q",
        "input_blocks.5.1.transformer_blocks.0.attn1.to_k",
        "input_blocks.5.1.transformer_blocks.0.attn1.to_v",
        "input_blocks.5.1.transformer_blocks.0.attn1.to_out",
        "input_blocks.5.1.transformer_blocks.0.ff.net",
        "input_blocks.5.1.transformer_blocks.0.norm2",
        "input_blocks.5.1.transformer_blocks.0.attn2.to_q",
        "input_blocks.5.1.transformer_blocks.0.attn2.to_k",
        "input_blocks.5.1.transformer_blocks.0.attn2.to_v",
        "input_blocks.5.1.transformer_blocks.0.attn2.to_out",
        "input_blocks.5.1.transformer_blocks.0.norm3",
        "input_blocks.5.1.transformer_blocks.1.norm1",
        "input_blocks.5.1.transformer_blocks.1.attn1.to_q",
        "input_blocks.5.1.transformer_blocks.1.attn1.to_k",
        "input_blocks.5.1.transformer_blocks.1.attn1.to_v",
        "input_blocks.5.1.transformer_blocks.1.attn1.to_out",
        "input_blocks.5.1.transformer_blocks.1.ff.net",
        "input_blocks.5.1.transformer_blocks.1.norm2",
        "input_blocks.5.1.transformer_blocks.1.attn2.to_q",
        "input_blocks.5.1.transformer_blocks.1.attn2.to_k",
        "input_blocks.5.1.transformer_blocks.1.attn2.to_v",
        "input_blocks.5.1.transformer_blocks.1.attn2.to_out",
        "input_blocks.5.1.transformer_blocks.1.norm3",
        "input_blocks.6.0.",
        "input_blocks.7.0.",
        "input_blocks.7.1.",
        "input_blocks.7.1.transformer_blocks.0.norm1",
        "input_blocks.7.1.transformer_blocks.0.attn1.to_q",
        "input_blocks.7.1.transformer_blocks.0.attn1.to_k",
        "input_blocks.7.1.transformer_blocks.0.attn1.to_v",
        "input_blocks.7.1.transformer_blocks.0.attn1.to_out",
        "input_blocks.7.1.transformer_blocks.0.ff.net",
        "input_blocks.7.1.transformer_blocks.0.norm2",
        "input_blocks.7.1.transformer_blocks.0.attn2.to_q",
        "input_blocks.7.1.transformer_blocks.0.attn2.to_k",
        "input_blocks.7.1.transformer_blocks.0.attn2.to_v",
        "input_blocks.7.1.transformer_blocks.0.attn2.to_out",
        "input_blocks.7.1.transformer_blocks.0.norm3",
        "input_blocks.7.1.transformer_blocks.1.norm1",
        "input_blocks.7.1.transformer_blocks.1.attn1.to_q",
        "input_blocks.7.1.transformer_blocks.1.attn1.to_k",
        "input_blocks.7.1.transformer_blocks.1.attn1.to_v",
        "input_blocks.7.1.transformer_blocks.1.attn1.to_out",
        "input_blocks.7.1.transformer_blocks.1.ff.net",
        "input_blocks.7.1.transformer_blocks.1.norm2",
        "input_blocks.7.1.transformer_blocks.1.attn2.to_q",
        "input_blocks.7.1.transformer_blocks.1.attn2.to_k",
        "input_blocks.7.1.transformer_blocks.1.attn2.to_v",
        "input_blocks.7.1.transformer_blocks.1.attn2.to_out",
        "input_blocks.7.1.transformer_blocks.1.norm3",
        "input_blocks.7.1.transformer_blocks.2.norm1",
        "input_blocks.7.1.transformer_blocks.2.attn1.to_q",
        "input_blocks.7.1.transformer_blocks.2.attn1.to_k",
        "input_blocks.7.1.transformer_blocks.2.attn1.to_v",
        "input_blocks.7.1.transformer_blocks.2.attn1.to_out",
        "input_blocks.7.1.transformer_blocks.2.ff.net",
        "input_blocks.7.1.transformer_blocks.2.norm2",
        "input_blocks.7.1.transformer_blocks.2.attn2.to_q",
        "input_blocks.7.1.transformer_blocks.2.attn2.to_k",
        "input_blocks.7.1.transformer_blocks.2.attn2.to_v",
        "input_blocks.7.1.transformer_blocks.2.attn2.to_out",
        "input_blocks.7.1.transformer_blocks.2.norm3",
        "input_blocks.7.1.transformer_blocks.3.norm1",
        "input_blocks.7.1.transformer_blocks.3.attn1.to_q",
        "input_blocks.7.1.transformer_blocks.3.attn1.to_k",
        "input_blocks.7.1.transformer_blocks.3.attn1.to_v",
        "input_blocks.7.1.transformer_blocks.3.attn1.to_out",
        "input_blocks.7.1.transformer_blocks.3.ff.net",
        "input_blocks.7.1.transformer_blocks.3.norm2",
        "input_blocks.7.1.transformer_blocks.3.attn2.to_q",
        "input_blocks.7.1.transformer_blocks.3.attn2.to_k",
        "input_blocks.7.1.transformer_blocks.3.attn2.to_v",
        "input_blocks.7.1.transformer_blocks.3.attn2.to_out",
        "input_blocks.7.1.transformer_blocks.3.norm3",
        "input_blocks.7.1.transformer_blocks.4.norm1",
        "input_blocks.7.1.transformer_blocks.4.attn1.to_q",
        "input_blocks.7.1.transformer_blocks.4.attn1.to_k",
        "input_blocks.7.1.transformer_blocks.4.attn1.to_v",
        "input_blocks.7.1.transformer_blocks.4.attn1.to_out",
        "input_blocks.7.1.transformer_blocks.4.ff.net",
        "input_blocks.7.1.transformer_blocks.4.norm2",
        "input_blocks.7.1.transformer_blocks.4.attn2.to_q",
        "input_blocks.7.1.transformer_blocks.4.attn2.to_k",
        "input_blocks.7.1.transformer_blocks.4.attn2.to_v",
        "input_blocks.7.1.transformer_blocks.4.attn2.to_out",
        "input_blocks.7.1.transformer_blocks.4.norm3",
        "input_blocks.7.1.transformer_blocks.5.norm1",
        "input_blocks.7.1.transformer_blocks.5.attn1.to_q",
        "input_blocks.7.1.transformer_blocks.5.attn1.to_k",
        "input_blocks.7.1.transformer_blocks.5.attn1.to_v",
        "input_blocks.7.1.transformer_blocks.5.attn1.to_out",
        "input_blocks.7.1.transformer_blocks.5.ff.net",
        "input_blocks.7.1.transformer_blocks.5.norm2",
        "input_blocks.7.1.transformer_blocks.5.attn2.to_q",
        "input_blocks.7.1.transformer_blocks.5.attn2.to_k",
        "input_blocks.7.1.transformer_blocks.5.attn2.to_v",
        "input_blocks.7.1.transformer_blocks.5.attn2.to_out",
        "input_blocks.7.1.transformer_blocks.5.norm3",
        "input_blocks.7.1.transformer_blocks.6.norm1",
        "input_blocks.7.1.transformer_blocks.6.attn1.to_q",
        "input_blocks.7.1.transformer_blocks.6.attn1.to_k",
        "input_blocks.7.1.transformer_blocks.6.attn1.to_v",
        "input_blocks.7.1.transformer_blocks.6.attn1.to_out",
        "input_blocks.7.1.transformer_blocks.6.ff.net",
        "input_blocks.7.1.transformer_blocks.6.norm2",
        "input_blocks.7.1.transformer_blocks.6.attn2.to_q",
        "input_blocks.7.1.transformer_blocks.6.attn2.to_k",
        "input_blocks.7.1.transformer_blocks.6.attn2.to_v",
        "input_blocks.7.1.transformer_blocks.6.attn2.to_out",
        "input_blocks.7.1.transformer_blocks.6.norm3",
        "input_blocks.7.1.transformer_blocks.7.norm1",
        "input_blocks.7.1.transformer_blocks.7.attn1.to_q",
        "input_blocks.7.1.transformer_blocks.7.attn1.to_k",
        "input_blocks.7.1.transformer_blocks.7.attn1.to_v",
        "input_blocks.7.1.transformer_blocks.7.attn1.to_out",
        "input_blocks.7.1.transformer_blocks.7.ff.net",
        "input_blocks.7.1.transformer_blocks.7.norm2",
        "input_blocks.7.1.transformer_blocks.7.attn2.to_q",
        "input_blocks.7.1.transformer_blocks.7.attn2.to_k",
        "input_blocks.7.1.transformer_blocks.7.attn2.to_v",
        "input_blocks.7.1.transformer_blocks.7.attn2.to_out",
        "input_blocks.7.1.transformer_blocks.7.norm3",
        "input_blocks.7.1.transformer_blocks.8.norm1",
        "input_blocks.7.1.transformer_blocks.8.attn1.to_q",
        "input_blocks.7.1.transformer_blocks.8.attn1.to_k",
        "input_blocks.7.1.transformer_blocks.8.attn1.to_v",
        "input_blocks.7.1.transformer_blocks.8.attn1.to_out",
        "input_blocks.7.1.transformer_blocks.8.ff.net",
        "input_blocks.7.1.transformer_blocks.8.norm2",
        "input_blocks.7.1.transformer_blocks.8.attn2.to_q",
        "input_blocks.7.1.transformer_blocks.8.attn2.to_k",
        "input_blocks.7.1.transformer_blocks.8.attn2.to_v",
        "input_blocks.7.1.transformer_blocks.8.attn2.to_out",
        "input_blocks.7.1.transformer_blocks.8.norm3",
        "input_blocks.7.1.transformer_blocks.9.norm1",
        "input_blocks.7.1.transformer_blocks.9.attn1.to_q",
        "input_blocks.7.1.transformer_blocks.9.attn1.to_k",
        "input_blocks.7.1.transformer_blocks.9.attn1.to_v",
        "input_blocks.7.1.transformer_blocks.9.attn1.to_out",
        "input_blocks.7.1.transformer_blocks.9.ff.net",
        "input_blocks.7.1.transformer_blocks.9.norm2",
        "input_blocks.7.1.transformer_blocks.9.attn2.to_q",
        "input_blocks.7.1.transformer_blocks.9.attn2.to_k",
        "input_blocks.7.1.transformer_blocks.9.attn2.to_v",
        "input_blocks.7.1.transformer_blocks.9.attn2.to_out",
        "input_blocks.7.1.transformer_blocks.9.norm3",
        "input_blocks.8.0.",
        "input_blocks.8.1.",
        "input_blocks.8.1.transformer_blocks.0.norm1",
        "input_blocks.8.1.transformer_blocks.0.attn1.to_q",
        "input_blocks.8.1.transformer_blocks.0.attn1.to_k",
        "input_blocks.8.1.transformer_blocks.0.attn1.to_v",
        "input_blocks.8.1.transformer_blocks.0.attn1.to_out",
        "input_blocks.8.1.transformer_blocks.0.ff.net",
        "input_blocks.8.1.transformer_blocks.0.norm2",
        "input_blocks.8.1.transformer_blocks.0.attn2.to_q",
        "input_blocks.8.1.transformer_blocks.0.attn2.to_k",
        "input_blocks.8.1.transformer_blocks.0.attn2.to_v",
        "input_blocks.8.1.transformer_blocks.0.attn2.to_out",
        "input_blocks.8.1.transformer_blocks.0.norm3",
        "input_blocks.8.1.transformer_blocks.1.norm1",
        "input_blocks.8.1.transformer_blocks.1.attn1.to_q",
        "input_blocks.8.1.transformer_blocks.1.attn1.to_k",
        "input_blocks.8.1.transformer_blocks.1.attn1.to_v",
        "input_blocks.8.1.transformer_blocks.1.attn1.to_out",
        "input_blocks.8.1.transformer_blocks.1.ff.net",
        "input_blocks.8.1.transformer_blocks.1.norm2",
        "input_blocks.8.1.transformer_blocks.1.attn2.to_q",
        "input_blocks.8.1.transformer_blocks.1.attn2.to_k",
        "input_blocks.8.1.transformer_blocks.1.attn2.to_v",
        "input_blocks.8.1.transformer_blocks.1.attn2.to_out",
        "input_blocks.8.1.transformer_blocks.1.norm3",
        "input_blocks.8.1.transformer_blocks.2.norm1",
        "input_blocks.8.1.transformer_blocks.2.attn1.to_q",
        "input_blocks.8.1.transformer_blocks.2.attn1.to_k",
        "input_blocks.8.1.transformer_blocks.2.attn1.to_v",
        "input_blocks.8.1.transformer_blocks.2.attn1.to_out",
        "input_blocks.8.1.transformer_blocks.2.ff.net",
        "input_blocks.8.1.transformer_blocks.2.norm2",
        "input_blocks.8.1.transformer_blocks.2.attn2.to_q",
        "input_blocks.8.1.transformer_blocks.2.attn2.to_k",
        "input_blocks.8.1.transformer_blocks.2.attn2.to_v",
        "input_blocks.8.1.transformer_blocks.2.attn2.to_out",
        "input_blocks.8.1.transformer_blocks.2.norm3",
        "input_blocks.8.1.transformer_blocks.3.norm1",
        "input_blocks.8.1.transformer_blocks.3.attn1.to_q",
        "input_blocks.8.1.transformer_blocks.3.attn1.to_k",
        "input_blocks.8.1.transformer_blocks.3.attn1.to_v",
        "input_blocks.8.1.transformer_blocks.3.attn1.to_out",
        "input_blocks.8.1.transformer_blocks.3.ff.net",
        "input_blocks.8.1.transformer_blocks.3.norm2",
        "input_blocks.8.1.transformer_blocks.3.attn2.to_q",
        "input_blocks.8.1.transformer_blocks.3.attn2.to_k",
        "input_blocks.8.1.transformer_blocks.3.attn2.to_v",
        "input_blocks.8.1.transformer_blocks.3.attn2.to_out",
        "input_blocks.8.1.transformer_blocks.3.norm3",
        "input_blocks.8.1.transformer_blocks.4.norm1",
        "input_blocks.8.1.transformer_blocks.4.attn1.to_q",
        "input_blocks.8.1.transformer_blocks.4.attn1.to_k",
        "input_blocks.8.1.transformer_blocks.4.attn1.to_v",
        "input_blocks.8.1.transformer_blocks.4.attn1.to_out",
        "input_blocks.8.1.transformer_blocks.4.ff.net",
        "input_blocks.8.1.transformer_blocks.4.norm2",
        "input_blocks.8.1.transformer_blocks.4.attn2.to_q",
        "input_blocks.8.1.transformer_blocks.4.attn2.to_k",
        "input_blocks.8.1.transformer_blocks.4.attn2.to_v",
        "input_blocks.8.1.transformer_blocks.4.attn2.to_out",
        "input_blocks.8.1.transformer_blocks.4.norm3",
        "input_blocks.8.1.transformer_blocks.5.norm1",
        "input_blocks.8.1.transformer_blocks.5.attn1.to_q",
        "input_blocks.8.1.transformer_blocks.5.attn1.to_k",
        "input_blocks.8.1.transformer_blocks.5.attn1.to_v",
        "input_blocks.8.1.transformer_blocks.5.attn1.to_out",
        "input_blocks.8.1.transformer_blocks.5.ff.net",
        "input_blocks.8.1.transformer_blocks.5.norm2",
        "input_blocks.8.1.transformer_blocks.5.attn2.to_q",
        "input_blocks.8.1.transformer_blocks.5.attn2.to_k",
        "input_blocks.8.1.transformer_blocks.5.attn2.to_v",
        "input_blocks.8.1.transformer_blocks.5.attn2.to_out",
        "input_blocks.8.1.transformer_blocks.5.norm3",
        "input_blocks.8.1.transformer_blocks.6.norm1",
        "input_blocks.8.1.transformer_blocks.6.attn1.to_q",
        "input_blocks.8.1.transformer_blocks.6.attn1.to_k",
        "input_blocks.8.1.transformer_blocks.6.attn1.to_v",
        "input_blocks.8.1.transformer_blocks.6.attn1.to_out",
        "input_blocks.8.1.transformer_blocks.6.ff.net",
        "input_blocks.8.1.transformer_blocks.6.norm2",
        "input_blocks.8.1.transformer_blocks.6.attn2.to_q",
        "input_blocks.8.1.transformer_blocks.6.attn2.to_k",
        "input_blocks.8.1.transformer_blocks.6.attn2.to_v",
        "input_blocks.8.1.transformer_blocks.6.attn2.to_out",
        "input_blocks.8.1.transformer_blocks.6.norm3",
        "input_blocks.8.1.transformer_blocks.7.norm1",
        "input_blocks.8.1.transformer_blocks.7.attn1.to_q",
        "input_blocks.8.1.transformer_blocks.7.attn1.to_k",
        "input_blocks.8.1.transformer_blocks.7.attn1.to_v",
        "input_blocks.8.1.transformer_blocks.7.attn1.to_out",
        "input_blocks.8.1.transformer_blocks.7.ff.net",
        "input_blocks.8.1.transformer_blocks.7.norm2",
        "input_blocks.8.1.transformer_blocks.7.attn2.to_q",
        "input_blocks.8.1.transformer_blocks.7.attn2.to_k",
        "input_blocks.8.1.transformer_blocks.7.attn2.to_v",
        "input_blocks.8.1.transformer_blocks.7.attn2.to_out",
        "input_blocks.8.1.transformer_blocks.7.norm3",
        "input_blocks.8.1.transformer_blocks.8.norm1",
        "input_blocks.8.1.transformer_blocks.8.attn1.to_q",
        "input_blocks.8.1.transformer_blocks.8.attn1.to_k",
        "input_blocks.8.1.transformer_blocks.8.attn1.to_v",
        "input_blocks.8.1.transformer_blocks.8.attn1.to_out",
        "input_blocks.8.1.transformer_blocks.8.ff.net",
        "input_blocks.8.1.transformer_blocks.8.norm2",
        "input_blocks.8.1.transformer_blocks.8.attn2.to_q",
        "input_blocks.8.1.transformer_blocks.8.attn2.to_k",
        "input_blocks.8.1.transformer_blocks.8.attn2.to_v",
        "input_blocks.8.1.transformer_blocks.8.attn2.to_out",
        "input_blocks.8.1.transformer_blocks.8.norm3",
        "input_blocks.8.1.transformer_blocks.9.norm1",
        "input_blocks.8.1.transformer_blocks.9.attn1.to_q",
        "input_blocks.8.1.transformer_blocks.9.attn1.to_k",
        "input_blocks.8.1.transformer_blocks.9.attn1.to_v",
        "input_blocks.8.1.transformer_blocks.9.attn1.to_out",
        "input_blocks.8.1.transformer_blocks.9.ff.net",
        "input_blocks.8.1.transformer_blocks.9.norm2",
        "input_blocks.8.1.transformer_blocks.9.attn2.to_q",
        "input_blocks.8.1.transformer_blocks.9.attn2.to_k",
        "input_blocks.8.1.transformer_blocks.9.attn2.to_v",
        "input_blocks.8.1.transformer_blocks.9.attn2.to_out",
        "input_blocks.8.1.transformer_blocks.9.norm3",
        "middle_block.0.",
        "middle_block.1.",
        "middle_block.1.transformer_blocks.0.norm1",
        "middle_block.1.transformer_blocks.0.attn1.to_q",
        "middle_block.1.transformer_blocks.0.attn1.to_k",
        "middle_block.1.transformer_blocks.0.attn1.to_v",
        "middle_block.1.transformer_blocks.0.attn1.to_out",
        "middle_block.1.transformer_blocks.0.ff.net",
        "middle_block.1.transformer_blocks.0.norm2",
        "middle_block.1.transformer_blocks.0.attn2.to_q",
        "middle_block.1.transformer_blocks.0.attn2.to_k",
        "middle_block.1.transformer_blocks.0.attn2.to_v",
        "middle_block.1.transformer_blocks.0.attn2.to_out",
        "middle_block.1.transformer_blocks.0.norm3",
        "middle_block.1.transformer_blocks.1.norm1",
        "middle_block.1.transformer_blocks.1.attn1.to_q",
        "middle_block.1.transformer_blocks.1.attn1.to_k",
        "middle_block.1.transformer_blocks.1.attn1.to_v",
        "middle_block.1.transformer_blocks.1.attn1.to_out",
        "middle_block.1.transformer_blocks.1.ff.net",
        "middle_block.1.transformer_blocks.1.norm2",
        "middle_block.1.transformer_blocks.1.attn2.to_q",
        "middle_block.1.transformer_blocks.1.attn2.to_k",
        "middle_block.1.transformer_blocks.1.attn2.to_v",
        "middle_block.1.transformer_blocks.1.attn2.to_out",
        "middle_block.1.transformer_blocks.1.norm3",
        "middle_block.1.transformer_blocks.2.norm1",
        "middle_block.1.transformer_blocks.2.attn1.to_q",
        "middle_block.1.transformer_blocks.2.attn1.to_k",
        "middle_block.1.transformer_blocks.2.attn1.to_v",
        "middle_block.1.transformer_blocks.2.attn1.to_out",
        "middle_block.1.transformer_blocks.2.ff.net",
        "middle_block.1.transformer_blocks.2.norm2",
        "middle_block.1.transformer_blocks.2.attn2.to_q",
        "middle_block.1.transformer_blocks.2.attn2.to_k",
        "middle_block.1.transformer_blocks.2.attn2.to_v",
        "middle_block.1.transformer_blocks.2.attn2.to_out",
        "middle_block.1.transformer_blocks.2.norm3",
        "middle_block.1.transformer_blocks.3.norm1",
        "middle_block.1.transformer_blocks.3.attn1.to_q",
        "middle_block.1.transformer_blocks.3.attn1.to_k",
        "middle_block.1.transformer_blocks.3.attn1.to_v",
        "middle_block.1.transformer_blocks.3.attn1.to_out",
        "middle_block.1.transformer_blocks.3.ff.net",
        "middle_block.1.transformer_blocks.3.norm2",
        "middle_block.1.transformer_blocks.3.attn2.to_q",
        "middle_block.1.transformer_blocks.3.attn2.to_k",
        "middle_block.1.transformer_blocks.3.attn2.to_v",
        "middle_block.1.transformer_blocks.3.attn2.to_out",
        "middle_block.1.transformer_blocks.3.norm3",
        "middle_block.1.transformer_blocks.4.norm1",
        "middle_block.1.transformer_blocks.4.attn1.to_q",
        "middle_block.1.transformer_blocks.4.attn1.to_k",
        "middle_block.1.transformer_blocks.4.attn1.to_v",
        "middle_block.1.transformer_blocks.4.attn1.to_out",
        "middle_block.1.transformer_blocks.4.ff.net",
        "middle_block.1.transformer_blocks.4.norm2",
        "middle_block.1.transformer_blocks.4.attn2.to_q",
        "middle_block.1.transformer_blocks.4.attn2.to_k",
        "middle_block.1.transformer_blocks.4.attn2.to_v",
        "middle_block.1.transformer_blocks.4.attn2.to_out",
        "middle_block.1.transformer_blocks.4.norm3",
        "middle_block.1.transformer_blocks.5.norm1",
        "middle_block.1.transformer_blocks.5.attn1.to_q",
        "middle_block.1.transformer_blocks.5.attn1.to_k",
        "middle_block.1.transformer_blocks.5.attn1.to_v",
        "middle_block.1.transformer_blocks.5.attn1.to_out",
        "middle_block.1.transformer_blocks.5.ff.net",
        "middle_block.1.transformer_blocks.5.norm2",
        "middle_block.1.transformer_blocks.5.attn2.to_q",
        "middle_block.1.transformer_blocks.5.attn2.to_k",
        "middle_block.1.transformer_blocks.5.attn2.to_v",
        "middle_block.1.transformer_blocks.5.attn2.to_out",
        "middle_block.1.transformer_blocks.5.norm3",
        "middle_block.1.transformer_blocks.6.norm1",
        "middle_block.1.transformer_blocks.6.attn1.to_q",
        "middle_block.1.transformer_blocks.6.attn1.to_k",
        "middle_block.1.transformer_blocks.6.attn1.to_v",
        "middle_block.1.transformer_blocks.6.attn1.to_out",
        "middle_block.1.transformer_blocks.6.ff.net",
        "middle_block.1.transformer_blocks.6.norm2",
        "middle_block.1.transformer_blocks.6.attn2.to_q",
        "middle_block.1.transformer_blocks.6.attn2.to_k",
        "middle_block.1.transformer_blocks.6.attn2.to_v",
        "middle_block.1.transformer_blocks.6.attn2.to_out",
        "middle_block.1.transformer_blocks.6.norm3",
        "middle_block.1.transformer_blocks.7.norm1",
        "middle_block.1.transformer_blocks.7.attn1.to_q",
        "middle_block.1.transformer_blocks.7.attn1.to_k",
        "middle_block.1.transformer_blocks.7.attn1.to_v",
        "middle_block.1.transformer_blocks.7.attn1.to_out",
        "middle_block.1.transformer_blocks.7.ff.net",
        "middle_block.1.transformer_blocks.7.norm2",
        "middle_block.1.transformer_blocks.7.attn2.to_q",
        "middle_block.1.transformer_blocks.7.attn2.to_k",
        "middle_block.1.transformer_blocks.7.attn2.to_v",
        "middle_block.1.transformer_blocks.7.attn2.to_out",
        "middle_block.1.transformer_blocks.7.norm3",
        "middle_block.1.transformer_blocks.8.norm1",
        "middle_block.1.transformer_blocks.8.attn1.to_q",
        "middle_block.1.transformer_blocks.8.attn1.to_k",
        "middle_block.1.transformer_blocks.8.attn1.to_v",
        "middle_block.1.transformer_blocks.8.attn1.to_out",
        "middle_block.1.transformer_blocks.8.ff.net",
        "middle_block.1.transformer_blocks.8.norm2",
        "middle_block.1.transformer_blocks.8.attn2.to_q",
        "middle_block.1.transformer_blocks.8.attn2.to_k",
        "middle_block.1.transformer_blocks.8.attn2.to_v",
        "middle_block.1.transformer_blocks.8.attn2.to_out",
        "middle_block.1.transformer_blocks.8.norm3",
        "middle_block.1.transformer_blocks.9.norm1",
        "middle_block.1.transformer_blocks.9.attn1.to_q",
        "middle_block.1.transformer_blocks.9.attn1.to_k",
        "middle_block.1.transformer_blocks.9.attn1.to_v",
        "middle_block.1.transformer_blocks.9.attn1.to_out",
        "middle_block.1.transformer_blocks.9.ff.net",
        "middle_block.1.transformer_blocks.9.norm2",
        "middle_block.1.transformer_blocks.9.attn2.to_q",
        "middle_block.1.transformer_blocks.9.attn2.to_k",
        "middle_block.1.transformer_blocks.9.attn2.to_v",
        "middle_block.1.transformer_blocks.9.attn2.to_out",
        "middle_block.1.transformer_blocks.9.norm3",
        "middle_block.2.",
        "output_blocks.0.0.",
        "output_blocks.0.1.",
        "output_blocks.0.1.transformer_blocks.0.norm1",
        "output_blocks.0.1.transformer_blocks.0.attn1.to_q",
        "output_blocks.0.1.transformer_blocks.0.attn1.to_k",
        "output_blocks.0.1.transformer_blocks.0.attn1.to_v",
        "output_blocks.0.1.transformer_blocks.0.attn1.to_out",
        "output_blocks.0.1.transformer_blocks.0.ff.net",
        "output_blocks.0.1.transformer_blocks.0.norm2",
        "output_blocks.0.1.transformer_blocks.0.attn2.to_q",
        "output_blocks.0.1.transformer_blocks.0.attn2.to_k",
        "output_blocks.0.1.transformer_blocks.0.attn2.to_v",
        "output_blocks.0.1.transformer_blocks.0.attn2.to_out",
        "output_blocks.0.1.transformer_blocks.0.norm3",
        "output_blocks.0.1.transformer_blocks.1.norm1",
        "output_blocks.0.1.transformer_blocks.1.attn1.to_q",
        "output_blocks.0.1.transformer_blocks.1.attn1.to_k",
        "output_blocks.0.1.transformer_blocks.1.attn1.to_v",
        "output_blocks.0.1.transformer_blocks.1.attn1.to_out",
        "output_blocks.0.1.transformer_blocks.1.ff.net",
        "output_blocks.0.1.transformer_blocks.1.norm2",
        "output_blocks.0.1.transformer_blocks.1.attn2.to_q",
        "output_blocks.0.1.transformer_blocks.1.attn2.to_k",
        "output_blocks.0.1.transformer_blocks.1.attn2.to_v",
        "output_blocks.0.1.transformer_blocks.1.attn2.to_out",
        "output_blocks.0.1.transformer_blocks.1.norm3",
        "output_blocks.0.1.transformer_blocks.2.norm1",
        "output_blocks.0.1.transformer_blocks.2.attn1.to_q",
        "output_blocks.0.1.transformer_blocks.2.attn1.to_k",
        "output_blocks.0.1.transformer_blocks.2.attn1.to_v",
        "output_blocks.0.1.transformer_blocks.2.attn1.to_out",
        "output_blocks.0.1.transformer_blocks.2.ff.net",
        "output_blocks.0.1.transformer_blocks.2.norm2",
        "output_blocks.0.1.transformer_blocks.2.attn2.to_q",
        "output_blocks.0.1.transformer_blocks.2.attn2.to_k",
        "output_blocks.0.1.transformer_blocks.2.attn2.to_v",
        "output_blocks.0.1.transformer_blocks.2.attn2.to_out",
        "output_blocks.0.1.transformer_blocks.2.norm3",
        "output_blocks.0.1.transformer_blocks.3.norm1",
        "output_blocks.0.1.transformer_blocks.3.attn1.to_q",
        "output_blocks.0.1.transformer_blocks.3.attn1.to_k",
        "output_blocks.0.1.transformer_blocks.3.attn1.to_v",
        "output_blocks.0.1.transformer_blocks.3.attn1.to_out",
        "output_blocks.0.1.transformer_blocks.3.ff.net",
        "output_blocks.0.1.transformer_blocks.3.norm2",
        "output_blocks.0.1.transformer_blocks.3.attn2.to_q",
        "output_blocks.0.1.transformer_blocks.3.attn2.to_k",
        "output_blocks.0.1.transformer_blocks.3.attn2.to_v",
        "output_blocks.0.1.transformer_blocks.3.attn2.to_out",
        "output_blocks.0.1.transformer_blocks.3.norm3",
        "output_blocks.0.1.transformer_blocks.4.norm1",
        "output_blocks.0.1.transformer_blocks.4.attn1.to_q",
        "output_blocks.0.1.transformer_blocks.4.attn1.to_k",
        "output_blocks.0.1.transformer_blocks.4.attn1.to_v",
        "output_blocks.0.1.transformer_blocks.4.attn1.to_out",
        "output_blocks.0.1.transformer_blocks.4.ff.net",
        "output_blocks.0.1.transformer_blocks.4.norm2",
        "output_blocks.0.1.transformer_blocks.4.attn2.to_q",
        "output_blocks.0.1.transformer_blocks.4.attn2.to_k",
        "output_blocks.0.1.transformer_blocks.4.attn2.to_v",
        "output_blocks.0.1.transformer_blocks.4.attn2.to_out",
        "output_blocks.0.1.transformer_blocks.4.norm3",
        "output_blocks.0.1.transformer_blocks.5.norm1",
        "output_blocks.0.1.transformer_blocks.5.attn1.to_q",
        "output_blocks.0.1.transformer_blocks.5.attn1.to_k",
        "output_blocks.0.1.transformer_blocks.5.attn1.to_v",
        "output_blocks.0.1.transformer_blocks.5.attn1.to_out",
        "output_blocks.0.1.transformer_blocks.5.ff.net",
        "output_blocks.0.1.transformer_blocks.5.norm2",
        "output_blocks.0.1.transformer_blocks.5.attn2.to_q",
        "output_blocks.0.1.transformer_blocks.5.attn2.to_k",
        "output_blocks.0.1.transformer_blocks.5.attn2.to_v",
        "output_blocks.0.1.transformer_blocks.5.attn2.to_out",
        "output_blocks.0.1.transformer_blocks.5.norm3",
        "output_blocks.0.1.transformer_blocks.6.norm1",
        "output_blocks.0.1.transformer_blocks.6.attn1.to_q",
        "output_blocks.0.1.transformer_blocks.6.attn1.to_k",
        "output_blocks.0.1.transformer_blocks.6.attn1.to_v",
        "output_blocks.0.1.transformer_blocks.6.attn1.to_out",
        "output_blocks.0.1.transformer_blocks.6.ff.net",
        "output_blocks.0.1.transformer_blocks.6.norm2",
        "output_blocks.0.1.transformer_blocks.6.attn2.to_q",
        "output_blocks.0.1.transformer_blocks.6.attn2.to_k",
        "output_blocks.0.1.transformer_blocks.6.attn2.to_v",
        "output_blocks.0.1.transformer_blocks.6.attn2.to_out",
        "output_blocks.0.1.transformer_blocks.6.norm3",
        "output_blocks.0.1.transformer_blocks.7.norm1",
        "output_blocks.0.1.transformer_blocks.7.attn1.to_q",
        "output_blocks.0.1.transformer_blocks.7.attn1.to_k",
        "output_blocks.0.1.transformer_blocks.7.attn1.to_v",
        "output_blocks.0.1.transformer_blocks.7.attn1.to_out",
        "output_blocks.0.1.transformer_blocks.7.ff.net",
        "output_blocks.0.1.transformer_blocks.7.norm2",
        "output_blocks.0.1.transformer_blocks.7.attn2.to_q",
        "output_blocks.0.1.transformer_blocks.7.attn2.to_k",
        "output_blocks.0.1.transformer_blocks.7.attn2.to_v",
        "output_blocks.0.1.transformer_blocks.7.attn2.to_out",
        "output_blocks.0.1.transformer_blocks.7.norm3",
        "output_blocks.0.1.transformer_blocks.8.norm1",
        "output_blocks.0.1.transformer_blocks.8.attn1.to_q",
        "output_blocks.0.1.transformer_blocks.8.attn1.to_k",
        "output_blocks.0.1.transformer_blocks.8.attn1.to_v",
        "output_blocks.0.1.transformer_blocks.8.attn1.to_out",
        "output_blocks.0.1.transformer_blocks.8.ff.net",
        "output_blocks.0.1.transformer_blocks.8.norm2",
        "output_blocks.0.1.transformer_blocks.8.attn2.to_q",
        "output_blocks.0.1.transformer_blocks.8.attn2.to_k",
        "output_blocks.0.1.transformer_blocks.8.attn2.to_v",
        "output_blocks.0.1.transformer_blocks.8.attn2.to_out",
        "output_blocks.0.1.transformer_blocks.8.norm3",
        "output_blocks.0.1.transformer_blocks.9.norm1",
        "output_blocks.0.1.transformer_blocks.9.attn1.to_q",
        "output_blocks.0.1.transformer_blocks.9.attn1.to_k",
        "output_blocks.0.1.transformer_blocks.9.attn1.to_v",
        "output_blocks.0.1.transformer_blocks.9.attn1.to_out",
        "output_blocks.0.1.transformer_blocks.9.ff.net",
        "output_blocks.0.1.transformer_blocks.9.norm2",
        "output_blocks.0.1.transformer_blocks.9.attn2.to_q",
        "output_blocks.0.1.transformer_blocks.9.attn2.to_k",
        "output_blocks.0.1.transformer_blocks.9.attn2.to_v",
        "output_blocks.0.1.transformer_blocks.9.attn2.to_out",
        "output_blocks.0.1.transformer_blocks.9.norm3",
        "output_blocks.1.0.",
        "output_blocks.1.1.",
        "output_blocks.1.1.transformer_blocks.0.norm1",
        "output_blocks.1.1.transformer_blocks.0.attn1.to_q",
        "output_blocks.1.1.transformer_blocks.0.attn1.to_k",
        "output_blocks.1.1.transformer_blocks.0.attn1.to_v",
        "output_blocks.1.1.transformer_blocks.0.attn1.to_out",
        "output_blocks.1.1.transformer_blocks.0.ff.net",
        "output_blocks.1.1.transformer_blocks.0.norm2",
        "output_blocks.1.1.transformer_blocks.0.attn2.to_q",
        "output_blocks.1.1.transformer_blocks.0.attn2.to_k",
        "output_blocks.1.1.transformer_blocks.0.attn2.to_v",
        "output_blocks.1.1.transformer_blocks.0.attn2.to_out",
        "output_blocks.1.1.transformer_blocks.0.norm3",
        "output_blocks.1.1.transformer_blocks.1.norm1",
        "output_blocks.1.1.transformer_blocks.1.attn1.to_q",
        "output_blocks.1.1.transformer_blocks.1.attn1.to_k",
        "output_blocks.1.1.transformer_blocks.1.attn1.to_v",
        "output_blocks.1.1.transformer_blocks.1.attn1.to_out",
        "output_blocks.1.1.transformer_blocks.1.ff.net",
        "output_blocks.1.1.transformer_blocks.1.norm2",
        "output_blocks.1.1.transformer_blocks.1.attn2.to_q",
        "output_blocks.1.1.transformer_blocks.1.attn2.to_k",
        "output_blocks.1.1.transformer_blocks.1.attn2.to_v",
        "output_blocks.1.1.transformer_blocks.1.attn2.to_out",
        "output_blocks.1.1.transformer_blocks.1.norm3",
        "output_blocks.1.1.transformer_blocks.2.norm1",
        "output_blocks.1.1.transformer_blocks.2.attn1.to_q",
        "output_blocks.1.1.transformer_blocks.2.attn1.to_k",
        "output_blocks.1.1.transformer_blocks.2.attn1.to_v",
        "output_blocks.1.1.transformer_blocks.2.attn1.to_out",
        "output_blocks.1.1.transformer_blocks.2.ff.net",
        "output_blocks.1.1.transformer_blocks.2.norm2",
        "output_blocks.1.1.transformer_blocks.2.attn2.to_q",
        "output_blocks.1.1.transformer_blocks.2.attn2.to_k",
        "output_blocks.1.1.transformer_blocks.2.attn2.to_v",
        "output_blocks.1.1.transformer_blocks.2.attn2.to_out",
        "output_blocks.1.1.transformer_blocks.2.norm3",
        "output_blocks.1.1.transformer_blocks.3.norm1",
        "output_blocks.1.1.transformer_blocks.3.attn1.to_q",
        "output_blocks.1.1.transformer_blocks.3.attn1.to_k",
        "output_blocks.1.1.transformer_blocks.3.attn1.to_v",
        "output_blocks.1.1.transformer_blocks.3.attn1.to_out",
        "output_blocks.1.1.transformer_blocks.3.ff.net",
        "output_blocks.1.1.transformer_blocks.3.norm2",
        "output_blocks.1.1.transformer_blocks.3.attn2.to_q",
        "output_blocks.1.1.transformer_blocks.3.attn2.to_k",
        "output_blocks.1.1.transformer_blocks.3.attn2.to_v",
        "output_blocks.1.1.transformer_blocks.3.attn2.to_out",
        "output_blocks.1.1.transformer_blocks.3.norm3",
        "output_blocks.1.1.transformer_blocks.4.norm1",
        "output_blocks.1.1.transformer_blocks.4.attn1.to_q",
        "output_blocks.1.1.transformer_blocks.4.attn1.to_k",
        "output_blocks.1.1.transformer_blocks.4.attn1.to_v",
        "output_blocks.1.1.transformer_blocks.4.attn1.to_out",
        "output_blocks.1.1.transformer_blocks.4.ff.net",
        "output_blocks.1.1.transformer_blocks.4.norm2",
        "output_blocks.1.1.transformer_blocks.4.attn2.to_q",
        "output_blocks.1.1.transformer_blocks.4.attn2.to_k",
        "output_blocks.1.1.transformer_blocks.4.attn2.to_v",
        "output_blocks.1.1.transformer_blocks.4.attn2.to_out",
        "output_blocks.1.1.transformer_blocks.4.norm3",
        "output_blocks.1.1.transformer_blocks.5.norm1",
        "output_blocks.1.1.transformer_blocks.5.attn1.to_q",
        "output_blocks.1.1.transformer_blocks.5.attn1.to_k",
        "output_blocks.1.1.transformer_blocks.5.attn1.to_v",
        "output_blocks.1.1.transformer_blocks.5.attn1.to_out",
        "output_blocks.1.1.transformer_blocks.5.ff.net",
        "output_blocks.1.1.transformer_blocks.5.norm2",
        "output_blocks.1.1.transformer_blocks.5.attn2.to_q",
        "output_blocks.1.1.transformer_blocks.5.attn2.to_k",
        "output_blocks.1.1.transformer_blocks.5.attn2.to_v",
        "output_blocks.1.1.transformer_blocks.5.attn2.to_out",
        "output_blocks.1.1.transformer_blocks.5.norm3",
        "output_blocks.1.1.transformer_blocks.6.norm1",
        "output_blocks.1.1.transformer_blocks.6.attn1.to_q",
        "output_blocks.1.1.transformer_blocks.6.attn1.to_k",
        "output_blocks.1.1.transformer_blocks.6.attn1.to_v",
        "output_blocks.1.1.transformer_blocks.6.attn1.to_out",
        "output_blocks.1.1.transformer_blocks.6.ff.net",
        "output_blocks.1.1.transformer_blocks.6.norm2",
        "output_blocks.1.1.transformer_blocks.6.attn2.to_q",
        "output_blocks.1.1.transformer_blocks.6.attn2.to_k",
        "output_blocks.1.1.transformer_blocks.6.attn2.to_v",
        "output_blocks.1.1.transformer_blocks.6.attn2.to_out",
        "output_blocks.1.1.transformer_blocks.6.norm3",
        "output_blocks.1.1.transformer_blocks.7.norm1",
        "output_blocks.1.1.transformer_blocks.7.attn1.to_q",
        "output_blocks.1.1.transformer_blocks.7.attn1.to_k",
        "output_blocks.1.1.transformer_blocks.7.attn1.to_v",
        "output_blocks.1.1.transformer_blocks.7.attn1.to_out",
        "output_blocks.1.1.transformer_blocks.7.ff.net",
        "output_blocks.1.1.transformer_blocks.7.norm2",
        "output_blocks.1.1.transformer_blocks.7.attn2.to_q",
        "output_blocks.1.1.transformer_blocks.7.attn2.to_k",
        "output_blocks.1.1.transformer_blocks.7.attn2.to_v",
        "output_blocks.1.1.transformer_blocks.7.attn2.to_out",
        "output_blocks.1.1.transformer_blocks.7.norm3",
        "output_blocks.1.1.transformer_blocks.8.norm1",
        "output_blocks.1.1.transformer_blocks.8.attn1.to_q",
        "output_blocks.1.1.transformer_blocks.8.attn1.to_k",
        "output_blocks.1.1.transformer_blocks.8.attn1.to_v",
        "output_blocks.1.1.transformer_blocks.8.attn1.to_out",
        "output_blocks.1.1.transformer_blocks.8.ff.net",
        "output_blocks.1.1.transformer_blocks.8.norm2",
        "output_blocks.1.1.transformer_blocks.8.attn2.to_q",
        "output_blocks.1.1.transformer_blocks.8.attn2.to_k",
        "output_blocks.1.1.transformer_blocks.8.attn2.to_v",
        "output_blocks.1.1.transformer_blocks.8.attn2.to_out",
        "output_blocks.1.1.transformer_blocks.8.norm3",
        "output_blocks.1.1.transformer_blocks.9.norm1",
        "output_blocks.1.1.transformer_blocks.9.attn1.to_q",
        "output_blocks.1.1.transformer_blocks.9.attn1.to_k",
        "output_blocks.1.1.transformer_blocks.9.attn1.to_v",
        "output_blocks.1.1.transformer_blocks.9.attn1.to_out",
        "output_blocks.1.1.transformer_blocks.9.ff.net",
        "output_blocks.1.1.transformer_blocks.9.norm2",
        "output_blocks.1.1.transformer_blocks.9.attn2.to_q",
        "output_blocks.1.1.transformer_blocks.9.attn2.to_k",
        "output_blocks.1.1.transformer_blocks.9.attn2.to_v",
        "output_blocks.1.1.transformer_blocks.9.attn2.to_out",
        "output_blocks.1.1.transformer_blocks.9.norm3",
        "output_blocks.2.0.",
        "output_blocks.2.1.",
        "output_blocks.2.1.transformer_blocks.0.norm1",
        "output_blocks.2.1.transformer_blocks.0.attn1.to_q",
        "output_blocks.2.1.transformer_blocks.0.attn1.to_k",
        "output_blocks.2.1.transformer_blocks.0.attn1.to_v",
        "output_blocks.2.1.transformer_blocks.0.attn1.to_out",
        "output_blocks.2.1.transformer_blocks.0.ff.net",
        "output_blocks.2.1.transformer_blocks.0.norm2",
        "output_blocks.2.1.transformer_blocks.0.attn2.to_q",
        "output_blocks.2.1.transformer_blocks.0.attn2.to_k",
        "output_blocks.2.1.transformer_blocks.0.attn2.to_v",
        "output_blocks.2.1.transformer_blocks.0.attn2.to_out",
        "output_blocks.2.1.transformer_blocks.0.norm3",
        "output_blocks.2.1.transformer_blocks.1.norm1",
        "output_blocks.2.1.transformer_blocks.1.attn1.to_q",
        "output_blocks.2.1.transformer_blocks.1.attn1.to_k",
        "output_blocks.2.1.transformer_blocks.1.attn1.to_v",
        "output_blocks.2.1.transformer_blocks.1.attn1.to_out",
        "output_blocks.2.1.transformer_blocks.1.ff.net",
        "output_blocks.2.1.transformer_blocks.1.norm2",
        "output_blocks.2.1.transformer_blocks.1.attn2.to_q",
        "output_blocks.2.1.transformer_blocks.1.attn2.to_k",
        "output_blocks.2.1.transformer_blocks.1.attn2.to_v",
        "output_blocks.2.1.transformer_blocks.1.attn2.to_out",
        "output_blocks.2.1.transformer_blocks.1.norm3",
        "output_blocks.2.1.transformer_blocks.2.norm1",
        "output_blocks.2.1.transformer_blocks.2.attn1.to_q",
        "output_blocks.2.1.transformer_blocks.2.attn1.to_k",
        "output_blocks.2.1.transformer_blocks.2.attn1.to_v",
        "output_blocks.2.1.transformer_blocks.2.attn1.to_out",
        "output_blocks.2.1.transformer_blocks.2.ff.net",
        "output_blocks.2.1.transformer_blocks.2.norm2",
        "output_blocks.2.1.transformer_blocks.2.attn2.to_q",
        "output_blocks.2.1.transformer_blocks.2.attn2.to_k",
        "output_blocks.2.1.transformer_blocks.2.attn2.to_v",
        "output_blocks.2.1.transformer_blocks.2.attn2.to_out",
        "output_blocks.2.1.transformer_blocks.2.norm3",
        "output_blocks.2.1.transformer_blocks.3.norm1",
        "output_blocks.2.1.transformer_blocks.3.attn1.to_q",
        "output_blocks.2.1.transformer_blocks.3.attn1.to_k",
        "output_blocks.2.1.transformer_blocks.3.attn1.to_v",
        "output_blocks.2.1.transformer_blocks.3.attn1.to_out",
        "output_blocks.2.1.transformer_blocks.3.ff.net",
        "output_blocks.2.1.transformer_blocks.3.norm2",
        "output_blocks.2.1.transformer_blocks.3.attn2.to_q",
        "output_blocks.2.1.transformer_blocks.3.attn2.to_k",
        "output_blocks.2.1.transformer_blocks.3.attn2.to_v",
        "output_blocks.2.1.transformer_blocks.3.attn2.to_out",
        "output_blocks.2.1.transformer_blocks.3.norm3",
        "output_blocks.2.1.transformer_blocks.4.norm1",
        "output_blocks.2.1.transformer_blocks.4.attn1.to_q",
        "output_blocks.2.1.transformer_blocks.4.attn1.to_k",
        "output_blocks.2.1.transformer_blocks.4.attn1.to_v",
        "output_blocks.2.1.transformer_blocks.4.attn1.to_out",
        "output_blocks.2.1.transformer_blocks.4.ff.net",
        "output_blocks.2.1.transformer_blocks.4.norm2",
        "output_blocks.2.1.transformer_blocks.4.attn2.to_q",
        "output_blocks.2.1.transformer_blocks.4.attn2.to_k",
        "output_blocks.2.1.transformer_blocks.4.attn2.to_v",
        "output_blocks.2.1.transformer_blocks.4.attn2.to_out",
        "output_blocks.2.1.transformer_blocks.4.norm3",
        "output_blocks.2.1.transformer_blocks.5.norm1",
        "output_blocks.2.1.transformer_blocks.5.attn1.to_q",
        "output_blocks.2.1.transformer_blocks.5.attn1.to_k",
        "output_blocks.2.1.transformer_blocks.5.attn1.to_v",
        "output_blocks.2.1.transformer_blocks.5.attn1.to_out",
        "output_blocks.2.1.transformer_blocks.5.ff.net",
        "output_blocks.2.1.transformer_blocks.5.norm2",
        "output_blocks.2.1.transformer_blocks.5.attn2.to_q",
        "output_blocks.2.1.transformer_blocks.5.attn2.to_k",
        "output_blocks.2.1.transformer_blocks.5.attn2.to_v",
        "output_blocks.2.1.transformer_blocks.5.attn2.to_out",
        "output_blocks.2.1.transformer_blocks.5.norm3",
        "output_blocks.2.1.transformer_blocks.6.norm1",
        "output_blocks.2.1.transformer_blocks.6.attn1.to_q",
        "output_blocks.2.1.transformer_blocks.6.attn1.to_k",
        "output_blocks.2.1.transformer_blocks.6.attn1.to_v",
        "output_blocks.2.1.transformer_blocks.6.attn1.to_out",
        "output_blocks.2.1.transformer_blocks.6.ff.net",
        "output_blocks.2.1.transformer_blocks.6.norm2",
        "output_blocks.2.1.transformer_blocks.6.attn2.to_q",
        "output_blocks.2.1.transformer_blocks.6.attn2.to_k",
        "output_blocks.2.1.transformer_blocks.6.attn2.to_v",
        "output_blocks.2.1.transformer_blocks.6.attn2.to_out",
        "output_blocks.2.1.transformer_blocks.6.norm3",
        "output_blocks.2.1.transformer_blocks.7.norm1",
        "output_blocks.2.1.transformer_blocks.7.attn1.to_q",
        "output_blocks.2.1.transformer_blocks.7.attn1.to_k",
        "output_blocks.2.1.transformer_blocks.7.attn1.to_v",
        "output_blocks.2.1.transformer_blocks.7.attn1.to_out",
        "output_blocks.2.1.transformer_blocks.7.ff.net",
        "output_blocks.2.1.transformer_blocks.7.norm2",
        "output_blocks.2.1.transformer_blocks.7.attn2.to_q",
        "output_blocks.2.1.transformer_blocks.7.attn2.to_k",
        "output_blocks.2.1.transformer_blocks.7.attn2.to_v",
        "output_blocks.2.1.transformer_blocks.7.attn2.to_out",
        "output_blocks.2.1.transformer_blocks.7.norm3",
        "output_blocks.2.1.transformer_blocks.8.norm1",
        "output_blocks.2.1.transformer_blocks.8.attn1.to_q",
        "output_blocks.2.1.transformer_blocks.8.attn1.to_k",
        "output_blocks.2.1.transformer_blocks.8.attn1.to_v",
        "output_blocks.2.1.transformer_blocks.8.attn1.to_out",
        "output_blocks.2.1.transformer_blocks.8.ff.net",
        "output_blocks.2.1.transformer_blocks.8.norm2",
        "output_blocks.2.1.transformer_blocks.8.attn2.to_q",
        "output_blocks.2.1.transformer_blocks.8.attn2.to_k",
        "output_blocks.2.1.transformer_blocks.8.attn2.to_v",
        "output_blocks.2.1.transformer_blocks.8.attn2.to_out",
        "output_blocks.2.1.transformer_blocks.8.norm3",
        "output_blocks.2.1.transformer_blocks.9.norm1",
        "output_blocks.2.1.transformer_blocks.9.attn1.to_q",
        "output_blocks.2.1.transformer_blocks.9.attn1.to_k",
        "output_blocks.2.1.transformer_blocks.9.attn1.to_v",
        "output_blocks.2.1.transformer_blocks.9.attn1.to_out",
        "output_blocks.2.1.transformer_blocks.9.ff.net",
        "output_blocks.2.1.transformer_blocks.9.norm2",
        "output_blocks.2.1.transformer_blocks.9.attn2.to_q",
        "output_blocks.2.1.transformer_blocks.9.attn2.to_k",
        "output_blocks.2.1.transformer_blocks.9.attn2.to_v",
        "output_blocks.2.1.transformer_blocks.9.attn2.to_out",
        "output_blocks.2.1.transformer_blocks.9.norm3",
        "output_blocks.3.0.",
        "output_blocks.3.1.",
        "output_blocks.3.1.transformer_blocks.0.norm1",
        "output_blocks.3.1.transformer_blocks.0.attn1.to_q",
        "output_blocks.3.1.transformer_blocks.0.attn1.to_k",
        "output_blocks.3.1.transformer_blocks.0.attn1.to_v",
        "output_blocks.3.1.transformer_blocks.0.attn1.to_out",
        "output_blocks.3.1.transformer_blocks.0.ff.net",
        "output_blocks.3.1.transformer_blocks.0.norm2",
        "output_blocks.3.1.transformer_blocks.0.attn2.to_q",
        "output_blocks.3.1.transformer_blocks.0.attn2.to_k",
        "output_blocks.3.1.transformer_blocks.0.attn2.to_v",
        "output_blocks.3.1.transformer_blocks.0.attn2.to_out",
        "output_blocks.3.1.transformer_blocks.0.norm3",
        "output_blocks.3.1.transformer_blocks.1.norm1",
        "output_blocks.3.1.transformer_blocks.1.attn1.to_q",
        "output_blocks.3.1.transformer_blocks.1.attn1.to_k",
        "output_blocks.3.1.transformer_blocks.1.attn1.to_v",
        "output_blocks.3.1.transformer_blocks.1.attn1.to_out",
        "output_blocks.3.1.transformer_blocks.1.ff.net",
        "output_blocks.3.1.transformer_blocks.1.norm2",
        "output_blocks.3.1.transformer_blocks.1.attn2.to_q",
        "output_blocks.3.1.transformer_blocks.1.attn2.to_k",
        "output_blocks.3.1.transformer_blocks.1.attn2.to_v",
        "output_blocks.3.1.transformer_blocks.1.attn2.to_out",
        "output_blocks.3.1.transformer_blocks.1.norm3",
        "output_blocks.4.0.",
        "output_blocks.4.1.",
        "output_blocks.4.1.transformer_blocks.0.norm1",
        "output_blocks.4.1.transformer_blocks.0.attn1.to_q",
        "output_blocks.4.1.transformer_blocks.0.attn1.to_k",
        "output_blocks.4.1.transformer_blocks.0.attn1.to_v",
        "output_blocks.4.1.transformer_blocks.0.attn1.to_out",
        "output_blocks.4.1.transformer_blocks.0.ff.net",
        "output_blocks.4.1.transformer_blocks.0.norm2",
        "output_blocks.4.1.transformer_blocks.0.attn2.to_q",
        "output_blocks.4.1.transformer_blocks.0.attn2.to_k",
        "output_blocks.4.1.transformer_blocks.0.attn2.to_v",
        "output_blocks.4.1.transformer_blocks.0.attn2.to_out",
        "output_blocks.4.1.transformer_blocks.0.norm3",
        "output_blocks.4.1.transformer_blocks.1.norm1",
        "output_blocks.4.1.transformer_blocks.1.attn1.to_q",
        "output_blocks.4.1.transformer_blocks.1.attn1.to_k",
        "output_blocks.4.1.transformer_blocks.1.attn1.to_v",
        "output_blocks.4.1.transformer_blocks.1.attn1.to_out",
        "output_blocks.4.1.transformer_blocks.1.ff.net",
        "output_blocks.4.1.transformer_blocks.1.norm2",
        "output_blocks.4.1.transformer_blocks.1.attn2.to_q",
        "output_blocks.4.1.transformer_blocks.1.attn2.to_k",
        "output_blocks.4.1.transformer_blocks.1.attn2.to_v",
        "output_blocks.4.1.transformer_blocks.1.attn2.to_out",
        "output_blocks.4.1.transformer_blocks.1.norm3",
        "output_blocks.5.0.",
        "output_blocks.5.1.",
        "output_blocks.5.1.transformer_blocks.0.norm1",
        "output_blocks.5.1.transformer_blocks.0.attn1.to_q",
        "output_blocks.5.1.transformer_blocks.0.attn1.to_k",
        "output_blocks.5.1.transformer_blocks.0.attn1.to_v",
        "output_blocks.5.1.transformer_blocks.0.attn1.to_out",
        "output_blocks.5.1.transformer_blocks.0.ff.net",
        "output_blocks.5.1.transformer_blocks.0.norm2",
        "output_blocks.5.1.transformer_blocks.0.attn2.to_q",
        "output_blocks.5.1.transformer_blocks.0.attn2.to_k",
        "output_blocks.5.1.transformer_blocks.0.attn2.to_v",
        "output_blocks.5.1.transformer_blocks.0.attn2.to_out",
        "output_blocks.5.1.transformer_blocks.0.norm3",
        "output_blocks.5.1.transformer_blocks.1.norm1",
        "output_blocks.5.1.transformer_blocks.1.attn1.to_q",
        "output_blocks.5.1.transformer_blocks.1.attn1.to_k",
        "output_blocks.5.1.transformer_blocks.1.attn1.to_v",
        "output_blocks.5.1.transformer_blocks.1.attn1.to_out",
        "output_blocks.5.1.transformer_blocks.1.ff.net",
        "output_blocks.5.1.transformer_blocks.1.norm2",
        "output_blocks.5.1.transformer_blocks.1.attn2.to_q",
        "output_blocks.5.1.transformer_blocks.1.attn2.to_k",
        "output_blocks.5.1.transformer_blocks.1.attn2.to_v",
        "output_blocks.5.1.transformer_blocks.1.attn2.to_out",
        "output_blocks.5.1.transformer_blocks.1.norm3",
        "output_blocks.6.0.",
        "output_blocks.7.0.",
        "output_blocks.8.0.",
        "out."
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "Inference_Core_ModelMergeSDXLDetailedTransformers",
    "display_name": "Inference_Core_ModelMergeSDXLDetailedTransformers",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "advanced/model_merging",
    "output_node": false
  },
  "Inference_Core_Zoe-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_Zoe-DepthMapPreprocessor",
    "display_name": "[Inference.Core] Zoe Depth Map",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Inference_Core_Unimatch_OptFlowPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "ckpt_name": [
          [
            "gmflow-scale1-mixdata.pth",
            "gmflow-scale2-mixdata.pth",
            "gmflow-scale2-regrefine6-mixdata.pth"
          ],
          {
            "default": "gmflow-scale2-regrefine6-mixdata.pth"
          }
        ],
        "backward_flow": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "bidirectional_flow": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "ckpt_name",
        "backward_flow",
        "bidirectional_flow"
      ]
    },
    "output": [
      "OPTICAL_FLOW",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "OPTICAL_FLOW",
      "PREVIEW_IMAGE"
    ],
    "name": "Inference_Core_Unimatch_OptFlowPreprocessor",
    "display_name": "[Inference.Core] Unimatch Optical Flow",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Optical Flow",
    "output_node": false
  },
  "Inference_Core_MaskOptFlow": {
    "input": {
      "required": {
        "optical_flow": [
          "OPTICAL_FLOW"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "optical_flow",
        "mask"
      ]
    },
    "output": [
      "OPTICAL_FLOW",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "OPTICAL_FLOW",
      "PREVIEW_IMAGE"
    ],
    "name": "Inference_Core_MaskOptFlow",
    "display_name": "[Inference.Core] Mask Optical Flow (DragNUWA)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Optical Flow",
    "output_node": false
  },
  "Inference_Core_UniFormer-SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_UniFormer-SemSegPreprocessor",
    "display_name": "[Inference.Core] UniFormer Segmentor",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "Inference_Core_SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_SemSegPreprocessor",
    "display_name": "[Inference.Core] Semantic Segmentor (legacy, alias for UniFormer)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "Inference_Core_TilePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "pyrUp_iters": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "pyrUp_iters",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_TilePreprocessor",
    "display_name": "[Inference.Core] Tile",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/tile",
    "output_node": false
  },
  "Inference_Core_TTPlanet_TileGF_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "scale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 1.0,
            "max": 8.0,
            "step": 0.01
          }
        ],
        "blur_strength": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 1.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "radius": [
          "INT",
          {
            "default": 7,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "eps": [
          "FLOAT",
          {
            "default": 0.01,
            "min": 0.001,
            "max": 0.1,
            "step": 0.001
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "scale_factor",
        "blur_strength",
        "radius",
        "eps",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_TTPlanet_TileGF_Preprocessor",
    "display_name": "[Inference.Core] TTPlanet Tile GuidedFilter",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/tile",
    "output_node": false
  },
  "Inference_Core_TTPlanet_TileSimple_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "scale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 1.0,
            "max": 8.0,
            "step": 0.01
          }
        ],
        "blur_strength": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 1.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "scale_factor",
        "blur_strength"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_TTPlanet_TileSimple_Preprocessor",
    "display_name": "[Inference.Core] TTPlanet Tile Simple",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/tile",
    "output_node": false
  },
  "Inference_Core_TEEDPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe_steps": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 10,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe_steps",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_TEEDPreprocessor",
    "display_name": "Inference_Core_TEEDPreprocessor",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Inference_Core_ShufflePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_ShufflePreprocessor",
    "display_name": "[Inference.Core] Content Shuffle",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/T2IAdapter-only",
    "output_node": false
  },
  "Inference_Core_SAMPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_SAMPreprocessor",
    "display_name": "[Inference.Core] SAM Segmentor",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/others",
    "output_node": false
  },
  "Inference_Core_ScribblePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_ScribblePreprocessor",
    "display_name": "[Inference.Core] Scribble Lines",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Inference_Core_Scribble_XDoG_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "threshold": [
          "INT",
          {
            "default": 32,
            "min": 1,
            "max": 64,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_Scribble_XDoG_Preprocessor",
    "display_name": "[Inference.Core] Scribble XDoG Lines",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Inference_Core_Scribble_PiDiNet_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe": [
          [
            "enable",
            "disable"
          ]
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_Scribble_PiDiNet_Preprocessor",
    "display_name": "[Inference.Core] Scribble PiDiNet Lines",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Inference_Core_ImageLuminanceDetector": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "gamma_correction": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 2.0,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "gamma_correction",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_ImageLuminanceDetector",
    "display_name": "[Inference.Core] Image Luminance",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Recolor",
    "output_node": false
  },
  "Inference_Core_ImageIntensityDetector": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "gamma_correction": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 2.0,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "gamma_correction",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_ImageIntensityDetector",
    "display_name": "[Inference.Core] Image Intensity",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Recolor",
    "output_node": false
  },
  "Inference_Core_PyraCannyPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "low_threshold": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "high_threshold": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "low_threshold",
        "high_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_PyraCannyPreprocessor",
    "display_name": "[Inference.Core] PyraCanny",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Inference_Core_SavePoseKpsAsJsonFile": {
    "input": {
      "required": {
        "pose_kps": [
          "POSE_KEYPOINT"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "PoseKeypoint"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pose_kps",
        "filename_prefix"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Inference_Core_SavePoseKpsAsJsonFile",
    "display_name": "[Inference.Core] Save Pose Keypoints",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": true
  },
  "Inference_Core_FacialPartColoringFromPoseKps": {
    "input": {
      "required": {
        "pose_kps": [
          "POSE_KEYPOINT"
        ],
        "mode": [
          [
            "point",
            "polygon"
          ],
          {
            "default": "polygon"
          }
        ],
        "skin": [
          "STRING",
          {
            "default": "rgb(0, 153, 255)",
            "multiline": false
          }
        ],
        "left_eye": [
          "STRING",
          {
            "default": "rgb(0, 204, 153)",
            "multiline": false
          }
        ],
        "right_eye": [
          "STRING",
          {
            "default": "rgb(255, 153, 0)",
            "multiline": false
          }
        ],
        "nose": [
          "STRING",
          {
            "default": "rgb(255, 102, 255)",
            "multiline": false
          }
        ],
        "upper_lip": [
          "STRING",
          {
            "default": "rgb(102, 0, 51)",
            "multiline": false
          }
        ],
        "inner_mouth": [
          "STRING",
          {
            "default": "rgb(255, 204, 255)",
            "multiline": false
          }
        ],
        "lower_lip": [
          "STRING",
          {
            "default": "rgb(255, 0, 102)",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pose_kps",
        "mode",
        "skin",
        "left_eye",
        "right_eye",
        "nose",
        "upper_lip",
        "inner_mouth",
        "lower_lip"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_FacialPartColoringFromPoseKps",
    "display_name": "[Inference.Core] Colorize Facial Parts from PoseKPS",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": false
  },
  "Inference_Core_UpperBodyTrackingFromPoseKps": {
    "input": {
      "required": {
        "pose_kps": [
          "POSE_KEYPOINT"
        ],
        "id_include": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "Head_width_height": [
          "STRING",
          {
            "default": "256, 256",
            "multiline": false
          }
        ],
        "Neck_width_height": [
          "STRING",
          {
            "default": "100, 100",
            "multiline": false
          }
        ],
        "Shoulder_width_height": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "Torso_width_height": [
          "STRING",
          {
            "default": "350, 450",
            "multiline": false
          }
        ],
        "RArm_width_height": [
          "STRING",
          {
            "default": "128, 256",
            "multiline": false
          }
        ],
        "RForearm_width_height": [
          "STRING",
          {
            "default": "128, 256",
            "multiline": false
          }
        ],
        "LArm_width_height": [
          "STRING",
          {
            "default": "128, 256",
            "multiline": false
          }
        ],
        "LForearm_width_height": [
          "STRING",
          {
            "default": "128, 256",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pose_kps",
        "id_include",
        "Head_width_height",
        "Neck_width_height",
        "Shoulder_width_height",
        "Torso_width_height",
        "RArm_width_height",
        "RForearm_width_height",
        "LArm_width_height",
        "LForearm_width_height"
      ]
    },
    "output": [
      "TRACKING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "tracking",
      "prompt"
    ],
    "name": "Inference_Core_UpperBodyTrackingFromPoseKps",
    "display_name": "[Inference.Core] Upper Body Tracking From PoseKps (InstanceDiffusion)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": false
  },
  "Inference_Core_RenderPeopleKps": {
    "input": {
      "required": {
        "kps": [
          "POSE_KEYPOINT"
        ],
        "render_body": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "render_hand": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "render_face": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "kps",
        "render_body",
        "render_hand",
        "render_face"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_RenderPeopleKps",
    "display_name": "[Inference.Core] Render Pose JSON (Human)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": false
  },
  "Inference_Core_RenderAnimalKps": {
    "input": {
      "required": {
        "kps": [
          "POSE_KEYPOINT"
        ]
      }
    },
    "input_order": {
      "required": [
        "kps"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_RenderAnimalKps",
    "display_name": "[Inference.Core] Render Pose JSON (Animal)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Pose Keypoint Postprocess",
    "output_node": false
  },
  "Inference_Core_PiDiNetPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_PiDiNetPreprocessor",
    "display_name": "[Inference.Core] PiDiNet Soft-Edge Lines",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Inference_Core_OpenposePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "detect_hand": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "detect_body": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "detect_face": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "scale_stick_for_xinsr_cn": [
          [
            "disable",
            "enable"
          ],
          {
            "default": "disable"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "detect_hand",
        "detect_body",
        "detect_face",
        "resolution",
        "scale_stick_for_xinsr_cn"
      ]
    },
    "output": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "name": "Inference_Core_OpenposePreprocessor",
    "display_name": "[Inference.Core] OpenPose Pose",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "Inference_Core_OneFormer-COCO-SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_OneFormer-COCO-SemSegPreprocessor",
    "display_name": "[Inference.Core] OneFormer COCO Segmentor",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "Inference_Core_OneFormer-ADE20K-SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_OneFormer-ADE20K-SemSegPreprocessor",
    "display_name": "[Inference.Core] OneFormer ADE20K Segmentor",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "Inference_Core_BAE-NormalMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_BAE-NormalMapPreprocessor",
    "display_name": "[Inference.Core] BAE Normal Map",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Inference_Core_M-LSDPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "score_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.01,
            "max": 2.0,
            "step": 0.01
          }
        ],
        "dist_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.01,
            "max": 20.0,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "score_threshold",
        "dist_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_M-LSDPreprocessor",
    "display_name": "[Inference.Core] M-LSD Lines",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Inference_Core_MiDaS-NormalMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "a": [
          "FLOAT",
          {
            "default": 6.283185307179586,
            "min": 0.0,
            "max": 15.707963267948966,
            "step": 0.01
          }
        ],
        "bg_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "a",
        "bg_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_MiDaS-NormalMapPreprocessor",
    "display_name": "[Inference.Core] MiDaS Normal Map",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Inference_Core_MiDaS-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "a": [
          "FLOAT",
          {
            "default": 6.283185307179586,
            "min": 0.0,
            "max": 15.707963267948966,
            "step": 0.01
          }
        ],
        "bg_threshold": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "a",
        "bg_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_MiDaS-DepthMapPreprocessor",
    "display_name": "[Inference.Core] MiDaS Depth Map",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Inference_Core_Metric3D-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "backbone": [
          [
            "vit-small",
            "vit-large",
            "vit-giant2"
          ],
          {
            "default": "vit-small"
          }
        ],
        "fx": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "fy": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "backbone",
        "fx",
        "fy",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_Metric3D-DepthMapPreprocessor",
    "display_name": "[Inference.Core] Metric3D Depth Map",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Inference_Core_Metric3D-NormalMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "backbone": [
          [
            "vit-small",
            "vit-large",
            "vit-giant2"
          ],
          {
            "default": "vit-small"
          }
        ],
        "fx": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "fy": [
          "INT",
          {
            "default": 1000,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "backbone",
        "fx",
        "fy",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_Metric3D-NormalMapPreprocessor",
    "display_name": "[Inference.Core] Metric3D Normal Map",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Inference_Core_MeshGraphormer-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "mask_bbox_padding": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 100
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "mask_type": [
          [
            "based_on_depth",
            "tight_bboxes",
            "original"
          ],
          {
            "default": "based_on_depth"
          }
        ],
        "mask_expand": [
          "INT",
          {
            "default": 5,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "rand_seed": [
          "INT",
          {
            "default": 88,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ],
        "detect_thr": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0.1,
            "max": 1,
            "step": 0.01
          }
        ],
        "presence_thr": [
          "FLOAT",
          {
            "default": 0.6,
            "min": 0.1,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "mask_bbox_padding",
        "resolution",
        "mask_type",
        "mask_expand",
        "rand_seed",
        "detect_thr",
        "presence_thr"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "INPAINTING_MASK"
    ],
    "name": "Inference_Core_MeshGraphormer-DepthMapPreprocessor",
    "display_name": "[Inference.Core] MeshGraphormer Hand Refiner",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Inference_Core_MeshGraphormer+ImpactDetector-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "bbox_detector": [
          "BBOX_DETECTOR"
        ]
      },
      "optional": {
        "bbox_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.1,
            "max": 1,
            "step": 0.01
          }
        ],
        "bbox_dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "bbox_crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "drop_size": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "mask_bbox_padding": [
          "INT",
          {
            "default": 30,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "mask_type": [
          [
            "based_on_depth",
            "tight_bboxes",
            "original"
          ],
          {
            "default": "based_on_depth"
          }
        ],
        "mask_expand": [
          "INT",
          {
            "default": 5,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "rand_seed": [
          "INT",
          {
            "default": 88,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "bbox_detector"
      ],
      "optional": [
        "bbox_threshold",
        "bbox_dilation",
        "bbox_crop_factor",
        "drop_size",
        "mask_bbox_padding",
        "mask_type",
        "mask_expand",
        "rand_seed",
        "resolution"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "INPAINTING_MASK"
    ],
    "name": "Inference_Core_MeshGraphormer+ImpactDetector-DepthMapPreprocessor",
    "display_name": "[Inference.Core] MeshGraphormer Hand Refiner With External Detector",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Inference_Core_MediaPipe-FaceMeshPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "max_faces": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 50,
            "step": 1
          }
        ],
        "min_confidence": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.1,
            "max": 1,
            "step": 0.01
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "max_faces",
        "min_confidence",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_MediaPipe-FaceMeshPreprocessor",
    "display_name": "[Inference.Core] MediaPipe Face Mesh",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "Inference_Core_Manga2Anime_LineArt_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_Manga2Anime_LineArt_Preprocessor",
    "display_name": "[Inference.Core] Manga Lineart (aka lineart_anime_denoise)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Inference_Core_LineartStandardPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "guassian_sigma": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "intensity_threshold": [
          "INT",
          {
            "default": 8,
            "min": 0,
            "max": 16,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "guassian_sigma",
        "intensity_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_LineartStandardPreprocessor",
    "display_name": "[Inference.Core] Standard Lineart",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Inference_Core_AnimeLineArtPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_AnimeLineArtPreprocessor",
    "display_name": "[Inference.Core] Anime Lineart",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Inference_Core_LineArtPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "coarse": [
          [
            "disable",
            "enable"
          ],
          {
            "default": "disable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "coarse",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_LineArtPreprocessor",
    "display_name": "[Inference.Core] Realistic Lineart",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Inference_Core_LeReS-DepthMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "rm_nearest": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "rm_background": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "boost": [
          [
            "disable",
            "enable"
          ],
          {
            "default": "disable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "rm_nearest",
        "rm_background",
        "boost",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_LeReS-DepthMapPreprocessor",
    "display_name": "[Inference.Core] LeReS Depth Map (enable boost for leres++)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Inference_Core_InpaintPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      },
      "optional": {
        "black_pixel_for_xinsir_cn": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask"
      ],
      "optional": [
        "black_pixel_for_xinsir_cn"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_InpaintPreprocessor",
    "display_name": "[Inference.Core] Inpaint Preprocessor",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/others",
    "output_node": false
  },
  "Inference_Core_HEDPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_HEDPreprocessor",
    "display_name": "[Inference.Core] HED Soft-Edge Lines",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Inference_Core_FakeScribblePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "safe": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "safe",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_FakeScribblePreprocessor",
    "display_name": "[Inference.Core] Fake Scribble Lines (aka scribble_hed)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Inference_Core_DWPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "detect_hand": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "detect_body": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "detect_face": [
          [
            "enable",
            "disable"
          ],
          {
            "default": "enable"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ],
        "bbox_detector": [
          [
            "yolox_l.torchscript.pt",
            "yolox_l.onnx",
            "yolo_nas_l_fp16.onnx",
            "yolo_nas_m_fp16.onnx",
            "yolo_nas_s_fp16.onnx"
          ],
          {
            "default": "yolox_l.onnx"
          }
        ],
        "pose_estimator": [
          [
            "dw-ll_ucoco_384_bs5.torchscript.pt",
            "dw-ll_ucoco_384.onnx",
            "dw-ll_ucoco.onnx"
          ],
          {
            "default": "dw-ll_ucoco_384_bs5.torchscript.pt"
          }
        ],
        "scale_stick_for_xinsr_cn": [
          [
            "disable",
            "enable"
          ],
          {
            "default": "disable"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "detect_hand",
        "detect_body",
        "detect_face",
        "resolution",
        "bbox_detector",
        "pose_estimator",
        "scale_stick_for_xinsr_cn"
      ]
    },
    "output": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "name": "Inference_Core_DWPreprocessor",
    "display_name": "[Inference.Core] DWPose Estimator",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "Inference_Core_AnimalPosePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "bbox_detector": [
          [
            "yolox_l.torchscript.pt",
            "yolox_l.onnx",
            "yolo_nas_l_fp16.onnx",
            "yolo_nas_m_fp16.onnx",
            "yolo_nas_s_fp16.onnx"
          ],
          {
            "default": "yolox_l.torchscript.pt"
          }
        ],
        "pose_estimator": [
          [
            "rtmpose-m_ap10k_256_bs5.torchscript.pt",
            "rtmpose-m_ap10k_256.onnx"
          ],
          {
            "default": "rtmpose-m_ap10k_256_bs5.torchscript.pt"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "bbox_detector",
        "pose_estimator",
        "resolution"
      ]
    },
    "output": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "POSE_KEYPOINT"
    ],
    "name": "Inference_Core_AnimalPosePreprocessor",
    "display_name": "[Inference.Core] AnimalPose Estimator (AP10K)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "Inference_Core_DSINE-NormalMapPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "fov": [
          "FLOAT",
          {
            "default": 60.0,
            "min": 0,
            "max": 365.0,
            "step": 0.01
          }
        ],
        "iterations": [
          "INT",
          {
            "default": 5,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "fov",
        "iterations",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_DSINE-NormalMapPreprocessor",
    "display_name": "[Inference.Core] DSINE Normal Map",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Inference_Core_DiffusionEdge_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "environment": [
          [
            "indoor",
            "urban",
            "natrual"
          ],
          {
            "default": "indoor"
          }
        ],
        "patch_batch_size": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 16,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "environment",
        "patch_batch_size",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_DiffusionEdge_Preprocessor",
    "display_name": "[Inference.Core] Diffusion Edge (batch size \u2191 => speed \u2191, VRAM \u2191)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Inference_Core_DepthAnythingV2Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "ckpt_name": [
          [
            "depth_anything_v2_vitg.pth",
            "depth_anything_v2_vitl.pth",
            "depth_anything_v2_vitb.pth",
            "depth_anything_v2_vits.pth"
          ],
          {
            "default": "depth_anything_v2_vitl.pth"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "ckpt_name",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_DepthAnythingV2Preprocessor",
    "display_name": "[Inference.Core] Depth Anything V2 - Relative",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Inference_Core_DepthAnythingPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "ckpt_name": [
          [
            "depth_anything_vitl14.pth",
            "depth_anything_vitb14.pth",
            "depth_anything_vits14.pth"
          ],
          {
            "default": "depth_anything_vitl14.pth"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "ckpt_name",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_DepthAnythingPreprocessor",
    "display_name": "[Inference.Core] Depth Anything",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Inference_Core_Zoe_DepthAnythingPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "environment": [
          [
            "indoor",
            "outdoor"
          ],
          {
            "default": "indoor"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "environment",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_Zoe_DepthAnythingPreprocessor",
    "display_name": "[Inference.Core] Zoe Depth Anything",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Normal and Depth Estimators",
    "output_node": false
  },
  "Inference_Core_DensePosePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "model": [
          [
            "densepose_r50_fpn_dl.torchscript",
            "densepose_r101_fpn_dl.torchscript"
          ],
          {
            "default": "densepose_r50_fpn_dl.torchscript"
          }
        ],
        "cmap": [
          [
            "Viridis (MagicAnimate)",
            "Parula (CivitAI)"
          ],
          {
            "default": "Viridis (MagicAnimate)"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "model",
        "cmap",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_DensePosePreprocessor",
    "display_name": "[Inference.Core] DensePose Estimator",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Faces and Poses Estimators",
    "output_node": false
  },
  "Inference_Core_ColorPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_ColorPreprocessor",
    "display_name": "[Inference.Core] Color Pallete",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/T2IAdapter-only",
    "output_node": false
  },
  "Inference_Core_CannyEdgePreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "low_threshold": [
          "INT",
          {
            "default": 100,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "high_threshold": [
          "INT",
          {
            "default": 200,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "low_threshold",
        "high_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_CannyEdgePreprocessor",
    "display_name": "[Inference.Core] Canny Edge",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Inference_Core_BinaryPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "bin_threshold": [
          "INT",
          {
            "default": 100,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "bin_threshold",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_BinaryPreprocessor",
    "display_name": "[Inference.Core] Binary Lines",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Inference_Core_AnyLineArtPreprocessor_aux": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "merge_with_lineart": [
          [
            "lineart_standard",
            "lineart_realisitic",
            "lineart_anime",
            "manga_line"
          ],
          {
            "default": "lineart_standard"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 1280,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "lineart_lower_bound": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "lineart_upper_bound": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ],
        "object_min_size": [
          "INT",
          {
            "default": 36,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "object_connectivity": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "merge_with_lineart",
        "resolution",
        "lineart_lower_bound",
        "lineart_upper_bound",
        "object_min_size",
        "object_connectivity"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Inference_Core_AnyLineArtPreprocessor_aux",
    "display_name": "[Inference.Core] AnyLine Lineart",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Line Extractors",
    "output_node": false
  },
  "Inference_Core_AnimeFace_SemSegPreprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "remove_background_using_abg": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 512,
            "max": 512,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "remove_background_using_abg",
        "resolution"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "ABG_CHARACTER_MASK (MASK)"
    ],
    "name": "Inference_Core_AnimeFace_SemSegPreprocessor",
    "display_name": "[Inference.Core] Anime Face Segmentor",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors/Semantic Segmentation",
    "output_node": false
  },
  "Inference_Core_AIO_Preprocessor": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "preprocessor": [
          [
            "none",
            "Zoe-DepthMapPreprocessor",
            "UniFormer-SemSegPreprocessor",
            "SemSegPreprocessor",
            "TilePreprocessor",
            "TTPlanet_TileGF_Preprocessor",
            "TTPlanet_TileSimple_Preprocessor",
            "TEEDPreprocessor",
            "ShufflePreprocessor",
            "SAMPreprocessor",
            "ScribblePreprocessor",
            "Scribble_XDoG_Preprocessor",
            "Scribble_PiDiNet_Preprocessor",
            "ImageLuminanceDetector",
            "ImageIntensityDetector",
            "PyraCannyPreprocessor",
            "PiDiNetPreprocessor",
            "OpenposePreprocessor",
            "OneFormer-COCO-SemSegPreprocessor",
            "OneFormer-ADE20K-SemSegPreprocessor",
            "BAE-NormalMapPreprocessor",
            "M-LSDPreprocessor",
            "MiDaS-NormalMapPreprocessor",
            "MiDaS-DepthMapPreprocessor",
            "Metric3D-DepthMapPreprocessor",
            "Metric3D-NormalMapPreprocessor",
            "MeshGraphormer-DepthMapPreprocessor",
            "MediaPipe-FaceMeshPreprocessor",
            "Manga2Anime_LineArt_Preprocessor",
            "LineartStandardPreprocessor",
            "AnimeLineArtPreprocessor",
            "LineArtPreprocessor",
            "LeReS-DepthMapPreprocessor",
            "HEDPreprocessor",
            "FakeScribblePreprocessor",
            "DWPreprocessor",
            "AnimalPosePreprocessor",
            "DSINE-NormalMapPreprocessor",
            "DepthAnythingV2Preprocessor",
            "DepthAnythingPreprocessor",
            "Zoe_DepthAnythingPreprocessor",
            "DensePosePreprocessor",
            "ColorPreprocessor",
            "CannyEdgePreprocessor",
            "BinaryPreprocessor",
            "AnyLineArtPreprocessor_aux",
            "AnimeFace_SemSegPreprocessor"
          ],
          {
            "default": "none"
          }
        ],
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "preprocessor",
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_AIO_Preprocessor",
    "display_name": "[Inference.Core] AIO Aux Preprocessor",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "Inference_Core_ControlNetPreprocessorSelector": {
    "input": {
      "required": {
        "preprocessor": [
          [
            "none",
            "Zoe-DepthMapPreprocessor",
            "UniFormer-SemSegPreprocessor",
            "SemSegPreprocessor",
            "TilePreprocessor",
            "TTPlanet_TileGF_Preprocessor",
            "TTPlanet_TileSimple_Preprocessor",
            "TEEDPreprocessor",
            "ShufflePreprocessor",
            "SAMPreprocessor",
            "ScribblePreprocessor",
            "Scribble_XDoG_Preprocessor",
            "Scribble_PiDiNet_Preprocessor",
            "ImageLuminanceDetector",
            "ImageIntensityDetector",
            "PyraCannyPreprocessor",
            "PiDiNetPreprocessor",
            "OpenposePreprocessor",
            "OneFormer-COCO-SemSegPreprocessor",
            "OneFormer-ADE20K-SemSegPreprocessor",
            "BAE-NormalMapPreprocessor",
            "M-LSDPreprocessor",
            "MiDaS-NormalMapPreprocessor",
            "MiDaS-DepthMapPreprocessor",
            "Metric3D-DepthMapPreprocessor",
            "Metric3D-NormalMapPreprocessor",
            "MeshGraphormer-DepthMapPreprocessor",
            "MediaPipe-FaceMeshPreprocessor",
            "Manga2Anime_LineArt_Preprocessor",
            "LineartStandardPreprocessor",
            "AnimeLineArtPreprocessor",
            "LineArtPreprocessor",
            "LeReS-DepthMapPreprocessor",
            "HEDPreprocessor",
            "FakeScribblePreprocessor",
            "DWPreprocessor",
            "AnimalPosePreprocessor",
            "DSINE-NormalMapPreprocessor",
            "DepthAnythingV2Preprocessor",
            "DepthAnythingPreprocessor",
            "Zoe_DepthAnythingPreprocessor",
            "DensePosePreprocessor",
            "ColorPreprocessor",
            "CannyEdgePreprocessor",
            "BinaryPreprocessor",
            "AnyLineArtPreprocessor_aux",
            "AnimeFace_SemSegPreprocessor"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "preprocessor"
      ]
    },
    "output": [
      [
        "none",
        "Zoe-DepthMapPreprocessor",
        "UniFormer-SemSegPreprocessor",
        "SemSegPreprocessor",
        "TilePreprocessor",
        "TTPlanet_TileGF_Preprocessor",
        "TTPlanet_TileSimple_Preprocessor",
        "TEEDPreprocessor",
        "ShufflePreprocessor",
        "SAMPreprocessor",
        "ScribblePreprocessor",
        "Scribble_XDoG_Preprocessor",
        "Scribble_PiDiNet_Preprocessor",
        "ImageLuminanceDetector",
        "ImageIntensityDetector",
        "PyraCannyPreprocessor",
        "PiDiNetPreprocessor",
        "OpenposePreprocessor",
        "OneFormer-COCO-SemSegPreprocessor",
        "OneFormer-ADE20K-SemSegPreprocessor",
        "BAE-NormalMapPreprocessor",
        "M-LSDPreprocessor",
        "MiDaS-NormalMapPreprocessor",
        "MiDaS-DepthMapPreprocessor",
        "Metric3D-DepthMapPreprocessor",
        "Metric3D-NormalMapPreprocessor",
        "MeshGraphormer-DepthMapPreprocessor",
        "MediaPipe-FaceMeshPreprocessor",
        "Manga2Anime_LineArt_Preprocessor",
        "LineartStandardPreprocessor",
        "AnimeLineArtPreprocessor",
        "LineArtPreprocessor",
        "LeReS-DepthMapPreprocessor",
        "HEDPreprocessor",
        "FakeScribblePreprocessor",
        "DWPreprocessor",
        "AnimalPosePreprocessor",
        "DSINE-NormalMapPreprocessor",
        "DepthAnythingV2Preprocessor",
        "DepthAnythingPreprocessor",
        "Zoe_DepthAnythingPreprocessor",
        "DensePosePreprocessor",
        "ColorPreprocessor",
        "CannyEdgePreprocessor",
        "BinaryPreprocessor",
        "AnyLineArtPreprocessor_aux",
        "AnimeFace_SemSegPreprocessor"
      ]
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "preprocessor"
    ],
    "name": "Inference_Core_ControlNetPreprocessorSelector",
    "display_name": "[Inference.Core] Preprocessor Selector",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "Inference_Core_PixelPerfectResolution": {
    "input": {
      "required": {
        "original_image": [
          "IMAGE"
        ],
        "image_gen_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "image_gen_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "resize_mode": [
          [
            "Just Resize",
            "Crop and Resize",
            "Resize and Fill"
          ],
          {
            "default": "Just Resize"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "original_image",
        "image_gen_width",
        "image_gen_height",
        "resize_mode"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "RESOLUTION (INT)"
    ],
    "name": "Inference_Core_PixelPerfectResolution",
    "display_name": "[Inference.Core] Pixel Perfect Resolution",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "Inference_Core_ImageGenResolutionFromImage": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE_GEN_WIDTH (INT)",
      "IMAGE_GEN_HEIGHT (INT)"
    ],
    "name": "Inference_Core_ImageGenResolutionFromImage",
    "display_name": "[Inference.Core] Generation Resolution From Image",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "Inference_Core_ImageGenResolutionFromLatent": {
    "input": {
      "required": {
        "latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "latent"
      ]
    },
    "output": [
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE_GEN_WIDTH (INT)",
      "IMAGE_GEN_HEIGHT (INT)"
    ],
    "name": "Inference_Core_ImageGenResolutionFromLatent",
    "display_name": "[Inference.Core] Generation Resolution From Latent",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "Inference_Core_HintImageEnchance": {
    "input": {
      "required": {
        "hint_image": [
          "IMAGE"
        ],
        "image_gen_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "image_gen_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 8192,
            "step": 8
          }
        ],
        "resize_mode": [
          [
            "Just Resize",
            "Crop and Resize",
            "Resize and Fill"
          ],
          {
            "default": "Just Resize"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "hint_image",
        "image_gen_width",
        "image_gen_height",
        "resize_mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_HintImageEnchance",
    "display_name": "[Inference.Core] Enchance And Resize Hint Images",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "Inference_Core_ExecuteAllControlNetPreprocessors": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      },
      "optional": {
        "resolution": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ],
      "optional": [
        "resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_ExecuteAllControlNetPreprocessors",
    "display_name": "[Inference.Core] Execute All ControlNet Preprocessors",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "Inference_Core_ControlNetAuxSimpleAddText": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "text"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_ControlNetAuxSimpleAddText",
    "display_name": "Inference_Core_ControlNetAuxSimpleAddText",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "ControlNet Preprocessors",
    "output_node": false
  },
  "Inference_Core_LayeredDiffusionApply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "config": [
          [
            "SDXL, Attention Injection",
            "SDXL, Conv Injection",
            "SD15, Attention Injection, attn_sharing"
          ]
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "config",
        "weight"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "Inference_Core_LayeredDiffusionApply",
    "display_name": "[Inference.Core] Layer Diffuse Apply",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "layer_diffuse",
    "output_node": false
  },
  "Inference_Core_LayeredDiffusionJointApply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "config": [
          [
            "SD15, attn_sharing, Batch size (3N)"
          ]
        ]
      },
      "optional": {
        "fg_cond": [
          "CONDITIONING"
        ],
        "bg_cond": [
          "CONDITIONING"
        ],
        "blended_cond": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "config"
      ],
      "optional": [
        "fg_cond",
        "bg_cond",
        "blended_cond"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "Inference_Core_LayeredDiffusionJointApply",
    "display_name": "[Inference.Core] Layer Diffuse Joint Apply",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "layer_diffuse",
    "output_node": false
  },
  "Inference_Core_LayeredDiffusionCondApply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "cond": [
          "CONDITIONING"
        ],
        "uncond": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ],
        "config": [
          [
            "SDXL, Foreground",
            "SDXL, Background"
          ]
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "cond",
        "uncond",
        "latent",
        "config",
        "weight"
      ]
    },
    "output": [
      "MODEL",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "name": "Inference_Core_LayeredDiffusionCondApply",
    "display_name": "[Inference.Core] Layer Diffuse Cond Apply",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "layer_diffuse",
    "output_node": false
  },
  "Inference_Core_LayeredDiffusionCondJointApply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "image": [
          "IMAGE"
        ],
        "config": [
          [
            "SD15, Foreground, attn_sharing, Batch size (2N)",
            "SD15, Background, attn_sharing, Batch size (2N)"
          ]
        ]
      },
      "optional": {
        "cond": [
          "CONDITIONING"
        ],
        "blended_cond": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "image",
        "config"
      ],
      "optional": [
        "cond",
        "blended_cond"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "Inference_Core_LayeredDiffusionCondJointApply",
    "display_name": "[Inference.Core] Layer Diffuse Cond Joint Apply",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "layer_diffuse",
    "output_node": false
  },
  "Inference_Core_LayeredDiffusionDiffApply": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "cond": [
          "CONDITIONING"
        ],
        "uncond": [
          "CONDITIONING"
        ],
        "blended_latent": [
          "LATENT"
        ],
        "latent": [
          "LATENT"
        ],
        "config": [
          [
            "SDXL, Foreground",
            "SDXL, Background"
          ]
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "cond",
        "uncond",
        "blended_latent",
        "latent",
        "config",
        "weight"
      ]
    },
    "output": [
      "MODEL",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "name": "Inference_Core_LayeredDiffusionDiffApply",
    "display_name": "[Inference.Core] Layer Diffuse Diff Apply",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "layer_diffuse",
    "output_node": false
  },
  "Inference_Core_LayeredDiffusionDecode": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "images": [
          "IMAGE"
        ],
        "sd_version": [
          [
            "SD15",
            "SDXL"
          ],
          {
            "default": "SDXL"
          }
        ],
        "sub_batch_size": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "images",
        "sd_version",
        "sub_batch_size"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "Inference_Core_LayeredDiffusionDecode",
    "display_name": "[Inference.Core] Layer Diffuse Decode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "layer_diffuse",
    "output_node": false
  },
  "Inference_Core_LayeredDiffusionDecodeRGBA": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "images": [
          "IMAGE"
        ],
        "sd_version": [
          [
            "SD15",
            "SDXL"
          ],
          {
            "default": "SDXL"
          }
        ],
        "sub_batch_size": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "images",
        "sd_version",
        "sub_batch_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Inference_Core_LayeredDiffusionDecodeRGBA",
    "display_name": "[Inference.Core] Layer Diffuse Decode (RGBA)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "layer_diffuse",
    "output_node": false
  },
  "Inference_Core_LayeredDiffusionDecodeSplit": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "images": [
          "IMAGE"
        ],
        "frames": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 3,
            "step": 1
          }
        ],
        "sd_version": [
          [
            "SD15",
            "SDXL"
          ],
          {
            "default": "SDXL"
          }
        ],
        "sub_batch_size": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "images",
        "frames",
        "sd_version",
        "sub_batch_size"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "name": "Inference_Core_LayeredDiffusionDecodeSplit",
    "display_name": "[Inference.Core] Layer Diffuse Decode (Split)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "layer_diffuse",
    "output_node": false
  },
  "Inference_Core_PromptExpansion": {
    "input": {
      "required": {
        "model_name": [
          []
        ],
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4294967295
          }
        ],
        "log_prompt": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name",
        "text",
        "seed",
        "log_prompt"
      ]
    },
    "output": [
      "STRING",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "expanded_prompt",
      "seed"
    ],
    "name": "Inference_Core_PromptExpansion",
    "display_name": "[Inference.Core] [Inference.Core] Prompt Expansion",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-Inference-Core-Nodes",
    "category": "utils",
    "output_node": false
  },
  "WanVideoSampler": {
    "input": {
      "required": {
        "model": [
          "WANVIDEOMODEL"
        ],
        "text_embeds": [
          "WANVIDEOTEXTEMBEDS"
        ],
        "image_embeds": [
          "WANVIDIMAGE_EMBEDS"
        ],
        "steps": [
          "INT",
          {
            "default": 30,
            "min": 1
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.0,
            "max": 30.0,
            "step": 0.01
          }
        ],
        "shift": [
          "FLOAT",
          {
            "default": 5.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "force_offload": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Moves the model to the offload device after sampling"
          }
        ],
        "scheduler": [
          [
            "unipc",
            "unipc/beta",
            "dpm++",
            "dpm++/beta",
            "dpm++_sde",
            "dpm++_sde/beta",
            "euler",
            "euler/beta",
            "deis",
            "lcm",
            "lcm/beta"
          ],
          {
            "default": "unipc"
          }
        ],
        "riflex_freq_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1,
            "tooltip": "Frequency index for RIFLEX, disabled when 0, default 6. Allows for new frames to be generated after without looping"
          }
        ]
      },
      "optional": {
        "samples": [
          "LATENT",
          {
            "tooltip": "init Latents to use for video2video process"
          }
        ],
        "denoise_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "feta_args": [
          "FETAARGS"
        ],
        "context_options": [
          "WANVIDCONTEXT"
        ],
        "teacache_args": [
          "TEACACHEARGS"
        ],
        "flowedit_args": [
          "FLOWEDITARGS"
        ],
        "batched_cfg": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Batc cond and uncond for faster sampling, possibly faster on some hardware, uses more memory"
          }
        ],
        "slg_args": [
          "SLGARGS"
        ],
        "rope_function": [
          [
            "default",
            "comfy"
          ],
          {
            "default": "comfy",
            "tooltip": "Comfy's RoPE implementation doesn't use complex numbers and can thus be compiled, that should be a lot faster when using torch.compile"
          }
        ],
        "loop_args": [
          "LOOPARGS"
        ],
        "experimental_args": [
          "EXPERIMENTALARGS"
        ],
        "sigmas": [
          "SIGMAS"
        ],
        "unianimate_poses": [
          "UNIANIMATE_POSE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "text_embeds",
        "image_embeds",
        "steps",
        "cfg",
        "shift",
        "seed",
        "force_offload",
        "scheduler",
        "riflex_freq_index"
      ],
      "optional": [
        "samples",
        "denoise_strength",
        "feta_args",
        "context_options",
        "teacache_args",
        "flowedit_args",
        "batched_cfg",
        "slg_args",
        "rope_function",
        "loop_args",
        "experimental_args",
        "sigmas",
        "unianimate_poses"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "samples"
    ],
    "name": "WanVideoSampler",
    "display_name": "WanVideo Sampler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoDecode": {
    "input": {
      "required": {
        "vae": [
          "WANVAE"
        ],
        "samples": [
          "LATENT"
        ],
        "enable_vae_tiling": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Drastically reduces memory use but will introduce seams at tile stride boundaries. The location and number of seams is dictated by the tile stride size. The visibility of seams can be controlled by increasing the tile size. Seams become less obvious at 1.5x stride and are barely noticeable at 2x stride size. Which is to say if you use a stride width of 160, the seams are barely noticeable with a tile width of 320."
          }
        ],
        "tile_x": [
          "INT",
          {
            "default": 272,
            "min": 40,
            "max": 2048,
            "step": 8,
            "tooltip": "Tile width in pixels. Smaller values use less VRAM but will make seams more obvious."
          }
        ],
        "tile_y": [
          "INT",
          {
            "default": 272,
            "min": 40,
            "max": 2048,
            "step": 8,
            "tooltip": "Tile height in pixels. Smaller values use less VRAM but will make seams more obvious."
          }
        ],
        "tile_stride_x": [
          "INT",
          {
            "default": 144,
            "min": 32,
            "max": 2040,
            "step": 8,
            "tooltip": "Tile stride width in pixels. Smaller values use less VRAM but will introduce more seams."
          }
        ],
        "tile_stride_y": [
          "INT",
          {
            "default": 128,
            "min": 32,
            "max": 2040,
            "step": 8,
            "tooltip": "Tile stride height in pixels. Smaller values use less VRAM but will introduce more seams."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "vae",
        "samples",
        "enable_vae_tiling",
        "tile_x",
        "tile_y",
        "tile_stride_x",
        "tile_stride_y"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "WanVideoDecode",
    "display_name": "WanVideo Decode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoTextEncode": {
    "input": {
      "required": {
        "t5": [
          "WANTEXTENCODER"
        ],
        "positive_prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ]
      },
      "optional": {
        "force_offload": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "model_to_offload": [
          "WANVIDEOMODEL",
          {
            "tooltip": "Model to move to offload_device before encoding"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "t5",
        "positive_prompt",
        "negative_prompt"
      ],
      "optional": [
        "force_offload",
        "model_to_offload"
      ]
    },
    "output": [
      "WANVIDEOTEXTEMBEDS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "text_embeds"
    ],
    "name": "WanVideoTextEncode",
    "display_name": "WanVideo TextEncode",
    "description": "Encodes text prompts into text embeddings. For rudimentary prompt travel you can input multiple prompts separated by '|', they will be equally spread over the video length",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoModelLoader": {
    "input": {
      "required": {
        "model": [
          [
            "Wan2.1-Fun-1.3B-Control.safetensors",
            "Wan2_1-I2V-14B-480P_fp8_e4m3fn.safetensors",
            "Wan2_1_VACE_1_3B_preview_bf16.safetensors",
            "clip_l.safetensors",
            "flux1-dev.safetensors",
            "wan2.1_fun_inp_1.3B_bf16.safetensors",
            "wan2.1_i2v_480p_14B_bf16.safetensors",
            "wan2.1_i2v_720p_14B_bf16.safetensors"
          ],
          {
            "tooltip": "These models are loaded from the 'ComfyUI/models/diffusion_models' -folder"
          }
        ],
        "base_precision": [
          [
            "fp32",
            "bf16",
            "fp16",
            "fp16_fast"
          ],
          {
            "default": "bf16"
          }
        ],
        "quantization": [
          [
            "disabled",
            "fp8_e4m3fn",
            "fp8_e4m3fn_fast",
            "fp8_e5m2",
            "fp8_e4m3fn_fast_no_ffn",
            "torchao_fp8dq",
            "torchao_fp8dqrow",
            "torchao_int8dq",
            "torchao_fp6",
            "torchao_int4",
            "torchao_int8"
          ],
          {
            "default": "disabled",
            "tooltip": "optional quantization method"
          }
        ],
        "load_device": [
          [
            "main_device",
            "offload_device"
          ],
          {
            "default": "main_device",
            "tooltip": "Initial device to load the model to, NOT recommended with the larger models unless you have 48GB+ VRAM"
          }
        ]
      },
      "optional": {
        "attention_mode": [
          [
            "sdpa",
            "flash_attn_2",
            "flash_attn_3",
            "sageattn"
          ],
          {
            "default": "sdpa"
          }
        ],
        "compile_args": [
          "WANCOMPILEARGS"
        ],
        "block_swap_args": [
          "BLOCKSWAPARGS"
        ],
        "lora": [
          "WANVIDLORA",
          {
            "default": null
          }
        ],
        "vram_management_args": [
          "VRAM_MANAGEMENTARGS",
          {
            "default": null,
            "tooltip": "Alternative offloading method from DiffSynth-Studio, more aggressive in reducing memory use than block swapping, but can be slower"
          }
        ],
        "vace_model": [
          "VACEPATH",
          {
            "default": null,
            "tooltip": "VACE model to use when not using model that has it included"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "base_precision",
        "quantization",
        "load_device"
      ],
      "optional": [
        "attention_mode",
        "compile_args",
        "block_swap_args",
        "lora",
        "vram_management_args",
        "vace_model"
      ]
    },
    "output": [
      "WANVIDEOMODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "model"
    ],
    "name": "WanVideoModelLoader",
    "display_name": "WanVideo Model Loader",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoVAELoader": {
    "input": {
      "required": {
        "model_name": [
          [
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ],
          {
            "tooltip": "These models are loaded from 'ComfyUI/models/vae'"
          }
        ]
      },
      "optional": {
        "precision": [
          [
            "fp16",
            "fp32",
            "bf16"
          ],
          {
            "default": "bf16"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name"
      ],
      "optional": [
        "precision"
      ]
    },
    "output": [
      "WANVAE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "vae"
    ],
    "name": "WanVideoVAELoader",
    "display_name": "WanVideo VAE Loader",
    "description": "Loads Wan VAE model from 'ComfyUI/models/vae'",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "LoadWanVideoT5TextEncoder": {
    "input": {
      "required": {
        "model_name": [
          [
            "clip_l.safetensors",
            "open-clip-xlm-roberta-large-vit-huge-14_visual_fp32.safetensors",
            "t5xxl_fp16.safetensors",
            "umt5-xxl-enc-bf16.safetensors",
            "umt5_xxl_fp16.safetensors",
            "umt5_xxl_fp8_e4m3fn_scaled.safetensors"
          ],
          {
            "tooltip": "These models are loaded from 'ComfyUI/models/text_encoders'"
          }
        ],
        "precision": [
          [
            "fp32",
            "bf16"
          ],
          {
            "default": "bf16"
          }
        ]
      },
      "optional": {
        "load_device": [
          [
            "main_device",
            "offload_device"
          ],
          {
            "default": "offload_device"
          }
        ],
        "quantization": [
          [
            "disabled",
            "fp8_e4m3fn"
          ],
          {
            "default": "disabled",
            "tooltip": "optional quantization method"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name",
        "precision"
      ],
      "optional": [
        "load_device",
        "quantization"
      ]
    },
    "output": [
      "WANTEXTENCODER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "wan_t5_model"
    ],
    "name": "LoadWanVideoT5TextEncoder",
    "display_name": "Load WanVideo T5 TextEncoder",
    "description": "Loads Wan text_encoder model from 'ComfyUI/models/LLM'",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoImageClipEncode": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "image": [
          "IMAGE",
          {
            "tooltip": "Image to encode"
          }
        ],
        "vae": [
          "WANVAE"
        ],
        "generation_width": [
          "INT",
          {
            "default": 832,
            "min": 64,
            "max": 2048,
            "step": 8,
            "tooltip": "Width of the image to encode"
          }
        ],
        "generation_height": [
          "INT",
          {
            "default": 480,
            "min": 64,
            "max": 29048,
            "step": 8,
            "tooltip": "Height of the image to encode"
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 10000,
            "step": 4,
            "tooltip": "Number of frames to encode"
          }
        ]
      },
      "optional": {
        "force_offload": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "noise_aug_strength": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001,
            "tooltip": "Strength of noise augmentation, helpful for I2V where some noise can add motion and give sharper results"
          }
        ],
        "latent_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001,
            "tooltip": "Additional latent multiplier, helpful for I2V where lower values allow for more motion"
          }
        ],
        "clip_embed_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001,
            "tooltip": "Additional clip embed multiplier"
          }
        ],
        "adjust_resolution": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Performs the same resolution adjustment as in the original code"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "image",
        "vae",
        "generation_width",
        "generation_height",
        "num_frames"
      ],
      "optional": [
        "force_offload",
        "noise_aug_strength",
        "latent_strength",
        "clip_embed_strength",
        "adjust_resolution"
      ]
    },
    "output": [
      "WANVIDIMAGE_EMBEDS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image_embeds"
    ],
    "name": "WanVideoImageClipEncode",
    "display_name": "WanVideo ImageClip Encode (Deprecated)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false,
    "deprecated": true
  },
  "WanVideoClipVisionEncode": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "image_1": [
          "IMAGE",
          {
            "tooltip": "Image to encode"
          }
        ],
        "strength_1": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001,
            "tooltip": "Additional clip embed multiplier"
          }
        ],
        "strength_2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001,
            "tooltip": "Additional clip embed multiplier"
          }
        ],
        "crop": [
          [
            "center",
            "disabled"
          ],
          {
            "default": "center",
            "tooltip": "Crop image to 224x224 before encoding"
          }
        ],
        "combine_embeds": [
          [
            "average",
            "sum",
            "concat",
            "batch"
          ],
          {
            "default": "average",
            "tooltip": "Method to combine multiple clip embeds"
          }
        ],
        "force_offload": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "image_2": [
          "IMAGE"
        ],
        "negative_image": [
          "IMAGE",
          {
            "tooltip": "image to use for uncond"
          }
        ],
        "tiles": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16,
            "step": 2,
            "tooltip": "Use matteo's tiled image encoding for improved accuracy"
          }
        ],
        "ratio": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "Ratio of the tile average"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "image_1",
        "strength_1",
        "strength_2",
        "crop",
        "combine_embeds",
        "force_offload"
      ],
      "optional": [
        "image_2",
        "negative_image",
        "tiles",
        "ratio"
      ]
    },
    "output": [
      "WANVIDIMAGE_CLIPEMBEDS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image_embeds"
    ],
    "name": "WanVideoClipVisionEncode",
    "display_name": "WanVideo ClipVision Encode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoImageToVideoEncode": {
    "input": {
      "required": {
        "vae": [
          "WANVAE"
        ],
        "width": [
          "INT",
          {
            "default": 832,
            "min": 64,
            "max": 2048,
            "step": 8,
            "tooltip": "Width of the image to encode"
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 64,
            "max": 29048,
            "step": 8,
            "tooltip": "Height of the image to encode"
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 10000,
            "step": 4,
            "tooltip": "Number of frames to encode"
          }
        ],
        "clip_embeds": [
          "WANVIDIMAGE_CLIPEMBEDS",
          {
            "tooltip": "Clip vision encoded image"
          }
        ],
        "noise_aug_strength": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001,
            "tooltip": "Strength of noise augmentation, helpful for I2V where some noise can add motion and give sharper results"
          }
        ],
        "start_latent_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001,
            "tooltip": "Additional latent multiplier, helpful for I2V where lower values allow for more motion"
          }
        ],
        "end_latent_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001,
            "tooltip": "Additional latent multiplier, helpful for I2V where lower values allow for more motion"
          }
        ],
        "force_offload": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "start_image": [
          "IMAGE",
          {
            "tooltip": "Image to encode"
          }
        ],
        "end_image": [
          "IMAGE",
          {
            "tooltip": "end frame"
          }
        ],
        "control_embeds": [
          "WANVIDIMAGE_EMBEDS",
          {
            "tooltip": "Control signal for the Fun -model"
          }
        ],
        "fun_or_fl2v_model": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Enable when using official FLF2V or Fun model"
          }
        ],
        "temporal_mask": [
          "MASK",
          {
            "tooltip": "mask"
          }
        ],
        "extra_latents": [
          "LATENT",
          {
            "tooltip": "Extra latents to add to the input front, used for Skyreels A2 reference images"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "vae",
        "width",
        "height",
        "num_frames",
        "clip_embeds",
        "noise_aug_strength",
        "start_latent_strength",
        "end_latent_strength",
        "force_offload"
      ],
      "optional": [
        "start_image",
        "end_image",
        "control_embeds",
        "fun_or_fl2v_model",
        "temporal_mask",
        "extra_latents"
      ]
    },
    "output": [
      "WANVIDIMAGE_EMBEDS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image_embeds"
    ],
    "name": "WanVideoImageToVideoEncode",
    "display_name": "WanVideo ImageToVideo Encode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "LoadWanVideoClipTextEncoder": {
    "input": {
      "required": {
        "model_name": [
          [
            "CLIP-ViT-H-14-laion2B-s32B-b79K.safetensors",
            "clip_vision_h.safetensors",
            "clip_l.safetensors",
            "open-clip-xlm-roberta-large-vit-huge-14_visual_fp32.safetensors",
            "t5xxl_fp16.safetensors",
            "umt5-xxl-enc-bf16.safetensors",
            "umt5_xxl_fp16.safetensors",
            "umt5_xxl_fp8_e4m3fn_scaled.safetensors"
          ],
          {
            "tooltip": "These models are loaded from 'ComfyUI/models/clip_vision'"
          }
        ],
        "precision": [
          [
            "fp16",
            "fp32",
            "bf16"
          ],
          {
            "default": "fp16"
          }
        ]
      },
      "optional": {
        "load_device": [
          [
            "main_device",
            "offload_device"
          ],
          {
            "default": "offload_device"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name",
        "precision"
      ],
      "optional": [
        "load_device"
      ]
    },
    "output": [
      "CLIP_VISION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "wan_clip_vision"
    ],
    "name": "LoadWanVideoClipTextEncoder",
    "display_name": "Load WanVideo Clip Encoder",
    "description": "Loads Wan clip_vision model from 'ComfyUI/models/clip_vision'",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoEncode": {
    "input": {
      "required": {
        "vae": [
          "WANVAE"
        ],
        "image": [
          "IMAGE"
        ],
        "enable_vae_tiling": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Drastically reduces memory use but may introduce seams"
          }
        ],
        "tile_x": [
          "INT",
          {
            "default": 272,
            "min": 64,
            "max": 2048,
            "step": 1,
            "tooltip": "Tile size in pixels, smaller values use less VRAM, may introduce more seams"
          }
        ],
        "tile_y": [
          "INT",
          {
            "default": 272,
            "min": 64,
            "max": 2048,
            "step": 1,
            "tooltip": "Tile size in pixels, smaller values use less VRAM, may introduce more seams"
          }
        ],
        "tile_stride_x": [
          "INT",
          {
            "default": 144,
            "min": 32,
            "max": 2048,
            "step": 32,
            "tooltip": "Tile stride in pixels, smaller values use less VRAM, may introduce more seams"
          }
        ],
        "tile_stride_y": [
          "INT",
          {
            "default": 128,
            "min": 32,
            "max": 2048,
            "step": 32,
            "tooltip": "Tile stride in pixels, smaller values use less VRAM, may introduce more seams"
          }
        ]
      },
      "optional": {
        "noise_aug_strength": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001,
            "tooltip": "Strength of noise augmentation, helpful for leapfusion I2V where some noise can add motion and give sharper results"
          }
        ],
        "latent_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001,
            "tooltip": "Additional latent multiplier, helpful for leapfusion I2V where lower values allow for more motion"
          }
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "vae",
        "image",
        "enable_vae_tiling",
        "tile_x",
        "tile_y",
        "tile_stride_x",
        "tile_stride_y"
      ],
      "optional": [
        "noise_aug_strength",
        "latent_strength",
        "mask"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "samples"
    ],
    "name": "WanVideoEncode",
    "display_name": "WanVideo Encode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoBlockSwap": {
    "input": {
      "required": {
        "blocks_to_swap": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 40,
            "step": 1,
            "tooltip": "Number of transformer blocks to swap, the 14B model has 40, while the 1.3B model has 30 blocks"
          }
        ],
        "offload_img_emb": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Offload img_emb to offload_device"
          }
        ],
        "offload_txt_emb": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Offload time_emb to offload_device"
          }
        ]
      },
      "optional": {
        "use_non_blocking": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Use non-blocking memory transfer for offloading, reserves more RAM but is faster"
          }
        ],
        "vace_blocks_to_swap": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 15,
            "step": 1,
            "tooltip": "Number of VACE blocks to swap, the VACE model has 15 blocks"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "blocks_to_swap",
        "offload_img_emb",
        "offload_txt_emb"
      ],
      "optional": [
        "use_non_blocking",
        "vace_blocks_to_swap"
      ]
    },
    "output": [
      "BLOCKSWAPARGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "block_swap_args"
    ],
    "name": "WanVideoBlockSwap",
    "display_name": "WanVideo BlockSwap",
    "description": "Settings for block swapping, reduces VRAM use by swapping blocks to CPU memory",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoTorchCompileSettings": {
    "input": {
      "required": {
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ],
          {
            "default": "inductor"
          }
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ],
        "dynamic": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable dynamic mode"
          }
        ],
        "dynamo_cache_size_limit": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 1024,
            "step": 1,
            "tooltip": "torch._dynamo.config.cache_size_limit"
          }
        ],
        "compile_transformer_blocks_only": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Compile only the transformer blocks, usually enough and can make compilation faster and less error prone"
          }
        ]
      },
      "optional": {
        "dynamo_recompile_limit": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 1024,
            "step": 1,
            "tooltip": "torch._dynamo.config.recompile_limit"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "backend",
        "fullgraph",
        "mode",
        "dynamic",
        "dynamo_cache_size_limit",
        "compile_transformer_blocks_only"
      ],
      "optional": [
        "dynamo_recompile_limit"
      ]
    },
    "output": [
      "WANCOMPILEARGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "torch_compile_args"
    ],
    "name": "WanVideoTorchCompileSettings",
    "display_name": "WanVideo Torch Compile Settings",
    "description": "torch.compile settings, when connected to the model loader, torch.compile of the selected layers is attempted. Requires Triton and torch 2.5.0 is recommended",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoEmptyEmbeds": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 832,
            "min": 64,
            "max": 2048,
            "step": 8,
            "tooltip": "Width of the image to encode"
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 64,
            "max": 29048,
            "step": 8,
            "tooltip": "Height of the image to encode"
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 10000,
            "step": 4,
            "tooltip": "Number of frames to encode"
          }
        ]
      },
      "optional": {
        "control_embeds": [
          "WANVIDIMAGE_EMBEDS",
          {
            "tooltip": "control signal for the Fun -model"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "num_frames"
      ],
      "optional": [
        "control_embeds"
      ]
    },
    "output": [
      "WANVIDIMAGE_EMBEDS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image_embeds"
    ],
    "name": "WanVideoEmptyEmbeds",
    "display_name": "WanVideo Empty Embeds",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoLoraSelect": {
    "input": {
      "required": {
        "lora": [
          [],
          {
            "tooltip": "LORA models are expected to be in ComfyUI/models/loras with .safetensors extension"
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.0001,
            "tooltip": "LORA strength, set to 0.0 to unmerge the LORA"
          }
        ]
      },
      "optional": {
        "prev_lora": [
          "WANVIDLORA",
          {
            "default": null,
            "tooltip": "For loading multiple LoRAs"
          }
        ],
        "blocks": [
          "SELECTEDBLOCKS"
        ],
        "low_mem_load": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Load the LORA model with less VRAM usage, slower loading"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "lora",
        "strength"
      ],
      "optional": [
        "prev_lora",
        "blocks",
        "low_mem_load"
      ]
    },
    "output": [
      "WANVIDLORA"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "lora"
    ],
    "name": "WanVideoLoraSelect",
    "display_name": "WanVideo Lora Select",
    "description": "Select a LoRA model from ComfyUI/models/loras",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoLoraBlockEdit": {
    "input": {
      "required": {
        "blocks.0.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.1.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.2.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.3.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.4.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.5.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.6.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.7.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.8.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.9.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.10.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.11.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.12.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.13.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.14.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.15.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.16.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.17.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.18.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.19.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.20.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.21.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.22.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.23.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.24.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.25.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.26.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.27.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.28.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.29.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.30.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.31.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.32.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.33.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.34.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.35.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.36.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.37.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.38.": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blocks.39.": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "blocks.0.",
        "blocks.1.",
        "blocks.2.",
        "blocks.3.",
        "blocks.4.",
        "blocks.5.",
        "blocks.6.",
        "blocks.7.",
        "blocks.8.",
        "blocks.9.",
        "blocks.10.",
        "blocks.11.",
        "blocks.12.",
        "blocks.13.",
        "blocks.14.",
        "blocks.15.",
        "blocks.16.",
        "blocks.17.",
        "blocks.18.",
        "blocks.19.",
        "blocks.20.",
        "blocks.21.",
        "blocks.22.",
        "blocks.23.",
        "blocks.24.",
        "blocks.25.",
        "blocks.26.",
        "blocks.27.",
        "blocks.28.",
        "blocks.29.",
        "blocks.30.",
        "blocks.31.",
        "blocks.32.",
        "blocks.33.",
        "blocks.34.",
        "blocks.35.",
        "blocks.36.",
        "blocks.37.",
        "blocks.38.",
        "blocks.39."
      ]
    },
    "output": [
      "SELECTEDBLOCKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "blocks"
    ],
    "name": "WanVideoLoraBlockEdit",
    "display_name": "WanVideo Lora Block Edit",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false,
    "output_tooltips": [
      "The modified lora model"
    ]
  },
  "WanVideoEnhanceAVideo": {
    "input": {
      "required": {
        "weight": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0,
            "max": 100,
            "step": 0.01,
            "tooltip": "The feta Weight of the Enhance-A-Video"
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "Start percentage of the steps to apply Enhance-A-Video"
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "End percentage of the steps to apply Enhance-A-Video"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "weight",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "FETAARGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "feta_args"
    ],
    "name": "WanVideoEnhanceAVideo",
    "display_name": "WanVideo Enhance-A-Video",
    "description": "https://github.com/NUS-HPC-AI-Lab/Enhance-A-Video",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoContextOptions": {
    "input": {
      "required": {
        "context_schedule": [
          [
            "uniform_standard",
            "uniform_looped",
            "static_standard"
          ]
        ],
        "context_frames": [
          "INT",
          {
            "default": 81,
            "min": 2,
            "max": 1000,
            "step": 1,
            "tooltip": "Number of pixel frames in the context, NOTE: the latent space has 4 frames in 1"
          }
        ],
        "context_stride": [
          "INT",
          {
            "default": 4,
            "min": 4,
            "max": 100,
            "step": 1,
            "tooltip": "Context stride as pixel frames, NOTE: the latent space has 4 frames in 1"
          }
        ],
        "context_overlap": [
          "INT",
          {
            "default": 16,
            "min": 4,
            "max": 100,
            "step": 1,
            "tooltip": "Context overlap as pixel frames, NOTE: the latent space has 4 frames in 1"
          }
        ],
        "freenoise": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Shuffle the noise"
          }
        ],
        "verbose": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Print debug output"
          }
        ]
      },
      "optional": {
        "image_cond_start_step": [
          "INT",
          {
            "default": 6,
            "min": 0,
            "max": 10000,
            "step": 1,
            "tooltip": "!EXPERIMENTAL! Start step of using previous window results as input instead of the init image"
          }
        ],
        "image_cond_window_count": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 10000,
            "step": 1,
            "tooltip": "!EXPERIMENTAL! Number of image 'prompt windows'"
          }
        ],
        "vae": [
          "WANVAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "context_schedule",
        "context_frames",
        "context_stride",
        "context_overlap",
        "freenoise",
        "verbose"
      ],
      "optional": [
        "image_cond_start_step",
        "image_cond_window_count",
        "vae"
      ]
    },
    "output": [
      "WANVIDCONTEXT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "context_options"
    ],
    "name": "WanVideoContextOptions",
    "display_name": "WanVideo Context Options",
    "description": "Context options for WanVideo, allows splitting the video into context windows and attemps blending them for longer generations than the model and memory otherwise would allow.",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoTeaCache": {
    "input": {
      "required": {
        "rel_l1_thresh": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001,
            "tooltip": "Higher values will make TeaCache more aggressive, faster, but may cause artifacts. Good value range for 1.3B: 0.05 - 0.08, for other models 0.15-0.30"
          }
        ],
        "start_step": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 9999,
            "step": 1,
            "tooltip": "Start percentage of the steps to apply TeaCache"
          }
        ],
        "end_step": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 9999,
            "step": 1,
            "tooltip": "End steps to apply TeaCache"
          }
        ],
        "cache_device": [
          [
            "main_device",
            "offload_device"
          ],
          {
            "default": "offload_device",
            "tooltip": "Device to cache to"
          }
        ],
        "use_coefficients": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Use calculated coefficients for more accuracy. When enabled therel_l1_thresh should be about 10 times higher than without"
          }
        ]
      },
      "optional": {
        "mode": [
          [
            "e",
            "e0"
          ],
          {
            "default": "e",
            "tooltip": "Choice between using e (time embeds, default) or e0 (modulated time embeds)"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "rel_l1_thresh",
        "start_step",
        "end_step",
        "cache_device",
        "use_coefficients"
      ],
      "optional": [
        "mode"
      ]
    },
    "output": [
      "TEACACHEARGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "teacache_args"
    ],
    "name": "WanVideoTeaCache",
    "display_name": "WanVideo TeaCache",
    "description": "\nPatch WanVideo model to use TeaCache. Speeds up inference by caching the output and  \napplying it instead of doing the step.  Best results are achieved by choosing the  \nappropriate coefficients for the model. Early steps should never be skipped, with too  \naggressive values this can happen and the motion suffers. Starting later can help with that too.   \nWhen NOT using coefficients, the threshold value should be  \nabout 10 times smaller than the value used with coefficients.  \n\nOfficial recommended values https://github.com/ali-vilab/TeaCache/tree/main/TeaCache4Wan2.1:\n\n\n<pre style='font-family:monospace'>\n+-------------------+--------+---------+--------+\n|       Model       |  Low   | Medium  |  High  |\n+-------------------+--------+---------+--------+\n| Wan2.1 t2v 1.3B  |  0.05  |  0.07   |  0.08  |\n| Wan2.1 t2v 14B   |  0.14  |  0.15   |  0.20  |\n| Wan2.1 i2v 480P  |  0.13  |  0.19   |  0.26  |\n| Wan2.1 i2v 720P  |  0.18  |  0.20   |  0.30  |\n+-------------------+--------+---------+--------+\n</pre> \n",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false,
    "experimental": true
  },
  "WanVideoVRAMManagement": {
    "input": {
      "required": {
        "offload_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "Percentage of parameters to offload"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "offload_percent"
      ]
    },
    "output": [
      "VRAM_MANAGEMENTARGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "vram_management_args"
    ],
    "name": "WanVideoVRAMManagement",
    "display_name": "WanVideo VRAM Management",
    "description": "Alternative offloading method from DiffSynth-Studio, more aggressive in reducing memory use than block swapping, but can be slower",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoTextEmbedBridge": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative"
      ]
    },
    "output": [
      "WANVIDEOTEXTEMBEDS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "text_embeds"
    ],
    "name": "WanVideoTextEmbedBridge",
    "display_name": "WanVideo TextEmbed Bridge",
    "description": "Bridge between ComfyUI native text embedding and WanVideoWrapper text embedding",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoFlowEdit": {
    "input": {
      "required": {
        "source_embeds": [
          "WANVIDEOTEXTEMBEDS"
        ],
        "skip_steps": [
          "INT",
          {
            "default": 4,
            "min": 0
          }
        ],
        "drift_steps": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "drift_flow_shift": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 30.0,
            "step": 0.01
          }
        ],
        "source_cfg": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.0,
            "max": 30.0,
            "step": 0.01
          }
        ],
        "drift_cfg": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.0,
            "max": 30.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "source_image_embeds": [
          "WANVIDIMAGE_EMBEDS"
        ]
      }
    },
    "input_order": {
      "required": [
        "source_embeds",
        "skip_steps",
        "drift_steps",
        "drift_flow_shift",
        "source_cfg",
        "drift_cfg"
      ],
      "optional": [
        "source_image_embeds"
      ]
    },
    "output": [
      "FLOWEDITARGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "flowedit_args"
    ],
    "name": "WanVideoFlowEdit",
    "display_name": "WanVideo FlowEdit",
    "description": "Flowedit options for WanVideo",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoControlEmbeds": {
    "input": {
      "required": {
        "latents": [
          "LATENT",
          {
            "tooltip": "Encoded latents to use as control signals"
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "Start percent of the control signal"
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "End percent of the control signal"
          }
        ]
      },
      "optional": {
        "fun_ref_image": [
          "LATENT",
          {
            "tooltip": "Reference latent for the Fun 1.1 -model"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latents",
        "start_percent",
        "end_percent"
      ],
      "optional": [
        "fun_ref_image"
      ]
    },
    "output": [
      "WANVIDIMAGE_EMBEDS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image_embeds"
    ],
    "name": "WanVideoControlEmbeds",
    "display_name": "WanVideo Control Embeds",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoSLG": {
    "input": {
      "required": {
        "blocks": [
          "STRING",
          {
            "default": "10",
            "tooltip": "Blocks to skip uncond on, separated by comma, index starts from 0"
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "Start percent of the control signal"
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "End percent of the control signal"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "blocks",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "SLGARGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "slg_args"
    ],
    "name": "WanVideoSLG",
    "display_name": "WanVideo SLG",
    "description": "Skips uncond on the selected blocks",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoTinyVAELoader": {
    "input": {
      "required": {
        "model_name": [
          [],
          {
            "tooltip": "These models are loaded from 'ComfyUI/models/vae_approx'"
          }
        ]
      },
      "optional": {
        "precision": [
          [
            "fp16",
            "fp32",
            "bf16"
          ],
          {
            "default": "fp16"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name"
      ],
      "optional": [
        "precision"
      ]
    },
    "output": [
      "WANVAE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "vae"
    ],
    "name": "WanVideoTinyVAELoader",
    "display_name": "WanVideo Tiny VAE Loader",
    "description": "Loads Wan VAE model from 'ComfyUI/models/vae'",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoLoopArgs": {
    "input": {
      "required": {
        "shift_skip": [
          "INT",
          {
            "default": 6,
            "min": 0,
            "tooltip": "Skip step of latent shift"
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "Start percent of the looping effect"
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "End percent of the looping effect"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "shift_skip",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "LOOPARGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "loop_args"
    ],
    "name": "WanVideoLoopArgs",
    "display_name": "WanVideo Loop Args",
    "description": "Looping through latent shift as shown in https://github.com/YisuiTT/Mobius/",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoImageResizeToClosest": {
    "input": {
      "required": {
        "image": [
          "IMAGE",
          {
            "tooltip": "Image to resize"
          }
        ],
        "generation_width": [
          "INT",
          {
            "default": 832,
            "min": 64,
            "max": 2048,
            "step": 8,
            "tooltip": "Width of the image to encode"
          }
        ],
        "generation_height": [
          "INT",
          {
            "default": 480,
            "min": 64,
            "max": 29048,
            "step": 8,
            "tooltip": "Height of the image to encode"
          }
        ],
        "aspect_ratio_preservation": [
          [
            "keep_input",
            "stretch_to_new",
            "crop_to_new"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "generation_width",
        "generation_height",
        "aspect_ratio_preservation"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "width",
      "height"
    ],
    "name": "WanVideoImageResizeToClosest",
    "display_name": "WanVideo Image Resize To Closest",
    "description": "Resizes image to the closest supported resolution based on aspect ratio and max pixels, according to the original code",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoSetBlockSwap": {
    "input": {
      "required": {
        "model": [
          "WANVIDEOMODEL"
        ],
        "block_swap_args": [
          "BLOCKSWAPARGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "block_swap_args"
      ]
    },
    "output": [
      "WANVIDEOMODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "model"
    ],
    "name": "WanVideoSetBlockSwap",
    "display_name": "WanVideo Set BlockSwap",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoExperimentalArgs": {
    "input": {
      "required": {
        "video_attention_split_steps": [
          "STRING",
          {
            "default": "",
            "tooltip": "Steps to split self attention when using multiple prompts"
          }
        ],
        "cfg_zero_star": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "https://github.com/WeichenFan/CFG-Zero-star"
          }
        ],
        "use_zero_init": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "zero_star_steps": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "tooltip": "Steps to split self attention when using multiple prompts"
          }
        ],
        "use_fresca": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "https://github.com/WikiChao/FreSca"
          }
        ],
        "fresca_scale_low": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "fresca_scale_high": [
          "FLOAT",
          {
            "default": 1.25,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "fresca_freq_cutoff": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 10000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "video_attention_split_steps",
        "cfg_zero_star",
        "use_zero_init",
        "zero_star_steps",
        "use_fresca",
        "fresca_scale_low",
        "fresca_scale_high",
        "fresca_freq_cutoff"
      ]
    },
    "output": [
      "EXPERIMENTALARGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "exp_args"
    ],
    "name": "WanVideoExperimentalArgs",
    "display_name": "WanVideo Experimental Args",
    "description": "Experimental stuff",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false,
    "experimental": true
  },
  "WanVideoVACEEncode": {
    "input": {
      "required": {
        "vae": [
          "WANVAE"
        ],
        "width": [
          "INT",
          {
            "default": 832,
            "min": 64,
            "max": 2048,
            "step": 8,
            "tooltip": "Width of the image to encode"
          }
        ],
        "height": [
          "INT",
          {
            "default": 480,
            "min": 64,
            "max": 29048,
            "step": 8,
            "tooltip": "Height of the image to encode"
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 10000,
            "step": 4,
            "tooltip": "Number of frames to encode"
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "vace_start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "Start percent of the steps to apply VACE"
          }
        ],
        "vace_end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "End percent of the steps to apply VACE"
          }
        ]
      },
      "optional": {
        "input_frames": [
          "IMAGE"
        ],
        "ref_images": [
          "IMAGE"
        ],
        "input_masks": [
          "MASK"
        ],
        "prev_vace_embeds": [
          "WANVIDIMAGE_EMBEDS"
        ],
        "tiled_vae": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Use tiled VAE encoding for reduced memory use"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "vae",
        "width",
        "height",
        "num_frames",
        "strength",
        "vace_start_percent",
        "vace_end_percent"
      ],
      "optional": [
        "input_frames",
        "ref_images",
        "input_masks",
        "prev_vace_embeds",
        "tiled_vae"
      ]
    },
    "output": [
      "WANVIDIMAGE_EMBEDS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "vace_embeds"
    ],
    "name": "WanVideoVACEEncode",
    "display_name": "WanVideo VACE Encode",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoVACEStartToEndFrame": {
    "input": {
      "required": {
        "num_frames": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 10000,
            "step": 4,
            "tooltip": "Number of frames to encode"
          }
        ],
        "empty_frame_level": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "White level of empty frame to use"
          }
        ]
      },
      "optional": {
        "start_image": [
          "IMAGE"
        ],
        "end_image": [
          "IMAGE"
        ],
        "control_images": [
          "IMAGE"
        ],
        "inpaint_mask": [
          "MASK",
          {
            "tooltip": "Inpaint mask to use for the empty frames"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "num_frames",
        "empty_frame_level"
      ],
      "optional": [
        "start_image",
        "end_image",
        "control_images",
        "inpaint_mask"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "images",
      "masks"
    ],
    "name": "WanVideoVACEStartToEndFrame",
    "display_name": "WanVideo VACE Start To End Frame",
    "description": "Helper node to create start/end frame batch and masks for VACE",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoVACEModelSelect": {
    "input": {
      "required": {
        "vace_model": [
          [
            "Wan2.1-Fun-1.3B-Control.safetensors",
            "Wan2_1-I2V-14B-480P_fp8_e4m3fn.safetensors",
            "Wan2_1_VACE_1_3B_preview_bf16.safetensors",
            "clip_l.safetensors",
            "flux1-dev.safetensors",
            "wan2.1_fun_inp_1.3B_bf16.safetensors",
            "wan2.1_i2v_480p_14B_bf16.safetensors",
            "wan2.1_i2v_720p_14B_bf16.safetensors"
          ],
          {
            "tooltip": "These models are loaded from the 'ComfyUI/models/diffusion_models' VACE model to use when not using model that has it included"
          }
        ],
        "vace_blocks": [
          "STRING",
          {
            "default": "0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28",
            "multiline": true,
            "tooltip": "Blocks to apply VACE to, default is for 1.3B model"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "vace_model",
        "vace_blocks"
      ]
    },
    "output": [
      "VACEPATH"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "vace_model"
    ],
    "name": "WanVideoVACEModelSelect",
    "display_name": "WanVideo VACE Model Select",
    "description": "VACE model to use when not using model that has it included, loaded from 'ComfyUI/models/diffusion_models'",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoPhantomEmbeds": {
    "input": {
      "required": {
        "num_frames": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 10000,
            "step": 4,
            "tooltip": "Number of frames to encode"
          }
        ],
        "phantom_latent_1": [
          "LATENT",
          {
            "tooltip": "reference latents for the phantom model"
          }
        ],
        "phantom_cfg_scale": [
          "FLOAT",
          {
            "default": 5.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01,
            "tooltip": "CFG scale for the extra phantom cond pass"
          }
        ],
        "phantom_start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "Start percent of the phantom model"
          }
        ],
        "phantom_end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "End percent of the phantom model"
          }
        ]
      },
      "optional": {
        "phantom_latent_2": [
          "LATENT",
          {
            "tooltip": "reference latents for the phantom model"
          }
        ],
        "phantom_latent_3": [
          "LATENT",
          {
            "tooltip": "reference latents for the phantom model"
          }
        ],
        "phantom_latent_4": [
          "LATENT",
          {
            "tooltip": "reference latents for the phantom model"
          }
        ],
        "vace_embeds": [
          "WANVIDIMAGE_EMBEDS",
          {
            "tooltip": "VACE embeds"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "num_frames",
        "phantom_latent_1",
        "phantom_cfg_scale",
        "phantom_start_percent",
        "phantom_end_percent"
      ],
      "optional": [
        "phantom_latent_2",
        "phantom_latent_3",
        "phantom_latent_4",
        "vace_embeds"
      ]
    },
    "output": [
      "WANVIDIMAGE_EMBEDS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image_embeds"
    ],
    "name": "WanVideoPhantomEmbeds",
    "display_name": "WanVideo Phantom Embeds",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoReCamMasterCameraEmbed": {
    "input": {
      "required": {
        "camera_poses": [
          "CAMERAPOSES"
        ],
        "latents": [
          "LATENT",
          {
            "tooltip": "source video"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "camera_poses",
        "latents"
      ]
    },
    "output": [
      "WANVIDIMAGE_EMBEDS",
      "CAMERAPOSES"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "camera_embeds",
      "camera_poses"
    ],
    "name": "WanVideoReCamMasterCameraEmbed",
    "display_name": "WanVideo ReCamMaster Camera Embed",
    "description": "https://github.com/KwaiVGI/ReCamMaster",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "ReCamMasterPoseVisualizer": {
    "input": {
      "required": {
        "camera_poses": [
          "CAMERAPOSES"
        ],
        "base_xval": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "zval": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "scale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "arrow_length": [
          "FLOAT",
          {
            "default": 1,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "camera_poses",
        "base_xval",
        "zval",
        "scale",
        "arrow_length"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ReCamMasterPoseVisualizer",
    "display_name": "ReCamMaster Pose Visualizer",
    "description": "\nVisualizes the camera poses, from Animatediff-Evolved CameraCtrl Pose  \nor a .txt file with RealEstate camera intrinsics and coordinates, in a 3D plot. \n",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoReCamMasterGenerateOrbitCamera": {
    "input": {
      "required": {
        "num_frames": [
          "INT",
          {
            "default": 81,
            "min": 1,
            "max": 1000,
            "step": 1,
            "tooltip": "Number of frames to generate"
          }
        ],
        "degrees": [
          "INT",
          {
            "default": 90,
            "min": -180,
            "max": 180,
            "step": 1,
            "tooltip": "Degrees to orbit"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "num_frames",
        "degrees"
      ]
    },
    "output": [
      "CAMERAPOSES"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "camera_poses"
    ],
    "name": "WanVideoReCamMasterGenerateOrbitCamera",
    "display_name": "WanVideo ReCamMaster Generate Orbit Camera",
    "description": "https://github.com/KwaiVGI/ReCamMaster",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoReCamMasterDefaultCamera": {
    "input": {
      "required": {
        "camera_type": [
          [
            "pan_right",
            "pan_left",
            "tilt_up",
            "tilt_down",
            "zoom_in",
            "zoom_out",
            "translate_up",
            "translate_down",
            "arc_left",
            "arc_right"
          ],
          {
            "default": "pan_right",
            "tooltip": "Camera type to use"
          }
        ],
        "latents": [
          "LATENT",
          {
            "tooltip": "source video"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "camera_type",
        "latents"
      ]
    },
    "output": [
      "CAMERAPOSES"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "camera_poses"
    ],
    "name": "WanVideoReCamMasterDefaultCamera",
    "display_name": "WanVideo ReCamMaster Default Camera",
    "description": "https://github.com/KwaiVGI/ReCamMaster",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoUniAnimatePoseInput": {
    "input": {
      "required": {
        "pose_images": [
          "IMAGE",
          {
            "tooltip": "Pose images"
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "Strength of the pose control"
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "Start percentage for the pose control"
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "End percentage for the pose control"
          }
        ]
      },
      "optional": {
        "reference_pose_image": [
          "IMAGE",
          {
            "tooltip": "Reference pose image"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pose_images",
        "strength",
        "start_percent",
        "end_percent"
      ],
      "optional": [
        "reference_pose_image"
      ]
    },
    "output": [
      "UNIANIMATE_POSE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "unianimate_poses"
    ],
    "name": "WanVideoUniAnimatePoseInput",
    "display_name": "WanVideo UniAnimate Pose Input",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoUniAnimateDWPoseDetector": {
    "input": {
      "required": {
        "pose_images": [
          "IMAGE",
          {
            "tooltip": "Pose images"
          }
        ],
        "score_threshold": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "Score threshold for pose detection"
          }
        ],
        "stick_width": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 100,
            "step": 1,
            "tooltip": "Stick width for drawing keypoints"
          }
        ],
        "draw_body": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Draw body keypoints"
          }
        ],
        "body_keypoint_size": [
          "INT",
          {
            "default": 4,
            "min": 0,
            "max": 100,
            "step": 1,
            "tooltip": "Body keypoint size"
          }
        ],
        "draw_feet": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Draw feet keypoints"
          }
        ],
        "draw_hands": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Draw hand keypoints"
          }
        ],
        "hand_keypoint_size": [
          "INT",
          {
            "default": 4,
            "min": 0,
            "max": 100,
            "step": 1,
            "tooltip": "Hand keypoint size"
          }
        ],
        "colorspace": [
          [
            "RGB",
            "BGR"
          ],
          {
            "tooltip": "Color space for the output image"
          }
        ],
        "handle_not_detected": [
          [
            "empty",
            "repeat"
          ],
          {
            "default": "empty",
            "tooltip": "How to handle undetected poses, empty inserts black and repeat inserts previous detection"
          }
        ]
      },
      "optional": {
        "reference_pose_image": [
          "IMAGE",
          {
            "tooltip": "Reference pose image"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pose_images",
        "score_threshold",
        "stick_width",
        "draw_body",
        "body_keypoint_size",
        "draw_feet",
        "draw_hands",
        "hand_keypoint_size",
        "colorspace",
        "handle_not_detected"
      ],
      "optional": [
        "reference_pose_image"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "poses",
      "reference_pose"
    ],
    "name": "WanVideoUniAnimateDWPoseDetector",
    "display_name": "WanVideo UniAnimate DWPose Detector",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "WanVideoDiffusionForcingSampler": {
    "input": {
      "required": {
        "model": [
          "WANVIDEOMODEL"
        ],
        "text_embeds": [
          "WANVIDEOTEXTEMBEDS"
        ],
        "image_embeds": [
          "WANVIDIMAGE_EMBEDS"
        ],
        "addnoise_condition": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 1000,
            "tooltip": "Improves consistency in long video generation"
          }
        ],
        "fps": [
          "FLOAT",
          {
            "default": 24.0,
            "min": 1.0,
            "max": 120.0,
            "step": 0.01
          }
        ],
        "steps": [
          "INT",
          {
            "default": 30,
            "min": 1
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.0,
            "max": 30.0,
            "step": 0.01
          }
        ],
        "shift": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "force_offload": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Moves the model to the offload device after sampling"
          }
        ],
        "scheduler": [
          [
            "unipc",
            "unipc/beta",
            "euler",
            "euler/beta",
            "lcm",
            "lcm/beta"
          ],
          {
            "default": "unipc"
          }
        ]
      },
      "optional": {
        "samples": [
          "LATENT",
          {
            "tooltip": "init Latents to use for video2video process"
          }
        ],
        "prefix_samples": [
          "LATENT",
          {
            "tooltip": "prefix latents"
          }
        ],
        "denoise_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "teacache_args": [
          "TEACACHEARGS"
        ],
        "slg_args": [
          "SLGARGS"
        ],
        "rope_function": [
          [
            "default",
            "comfy"
          ],
          {
            "default": "comfy",
            "tooltip": "Comfy's RoPE implementation doesn't use complex numbers and can thus be compiled, that should be a lot faster when using torch.compile"
          }
        ],
        "experimental_args": [
          "EXPERIMENTALARGS"
        ],
        "unianimate_poses": [
          "UNIANIMATE_POSE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "text_embeds",
        "image_embeds",
        "addnoise_condition",
        "fps",
        "steps",
        "cfg",
        "shift",
        "seed",
        "force_offload",
        "scheduler"
      ],
      "optional": [
        "samples",
        "prefix_samples",
        "denoise_strength",
        "teacache_args",
        "slg_args",
        "rope_function",
        "experimental_args",
        "unianimate_poses"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "samples"
    ],
    "name": "WanVideoDiffusionForcingSampler",
    "display_name": "WanVideo Diffusion Forcing Sampler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-WanVideoWrapper",
    "category": "WanVideoWrapper",
    "output_node": false
  },
  "ConfigureModifiedHY": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ConfigureModifiedHY",
    "display_name": "Modify Hunyuan Model",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanLoom",
    "category": "hunyuanloom",
    "output_node": false
  },
  "HYInverseModelSamplingPred": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "shift": [
          "FLOAT",
          {
            "default": 7,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "shift"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "HYInverseModelSamplingPred",
    "display_name": "HY Inverse Model Pred",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanLoom",
    "category": "hunyuanloom",
    "output_node": false
  },
  "HYReverseModelSamplingPred": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "shift": [
          "FLOAT",
          {
            "default": 7,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "shift"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "HYReverseModelSamplingPred",
    "display_name": "HY Reverse Model Pred",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanLoom",
    "category": "hunyuanloom",
    "output_node": false
  },
  "HYForwardODESampler": {
    "input": {
      "required": {
        "gamma": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "start_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "end_step": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "gamma_trend": [
          [
            "constant",
            "linear_increase",
            "linear_decrease"
          ]
        ]
      },
      "optional": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "gamma",
        "start_step",
        "end_step",
        "gamma_trend"
      ],
      "optional": [
        "seed"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "HYForwardODESampler",
    "display_name": "HY RF-Inv Forward Sampler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanLoom",
    "category": "hunyuanloom",
    "output_node": false
  },
  "HYReverseODESampler": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "latent_image": [
          "LATENT"
        ],
        "eta": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "start_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "end_step": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ]
      },
      "optional": {
        "eta_trend": [
          [
            "constant",
            "linear_increase",
            "linear_decrease"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "latent_image",
        "eta",
        "start_step",
        "end_step"
      ],
      "optional": [
        "eta_trend"
      ]
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "HYReverseODESampler",
    "display_name": "HY RF-Inv Reverse Sampler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanLoom",
    "category": "hunyuanloom",
    "output_node": false
  },
  "HYFlowEditGuider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "source_cond": [
          "CONDITIONING"
        ],
        "target_cond": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "source_cond",
        "target_cond"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GUIDER"
    ],
    "name": "HYFlowEditGuider",
    "display_name": "HY FlowEdit Guider",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanLoom",
    "category": "hunyuanloom",
    "output_node": false
  },
  "HYFlowEditGuiderAdv": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "source_cond": [
          "CONDITIONING"
        ],
        "target_cond": [
          "CONDITIONING"
        ],
        "num_repeats": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "source_cond",
        "target_cond",
        "num_repeats"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GUIDER"
    ],
    "name": "HYFlowEditGuiderAdv",
    "display_name": "HYFlowEditGuiderAdv",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanLoom",
    "category": "hunyuanloom",
    "output_node": false
  },
  "HYFlowEditGuiderCFG": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "source_cond": [
          "CONDITIONING"
        ],
        "source_uncond": [
          "CONDITIONING"
        ],
        "target_cond": [
          "CONDITIONING"
        ],
        "target_uncond": [
          "CONDITIONING"
        ],
        "source_cfg": [
          "FLOAT",
          {
            "default": 2,
            "min": 0,
            "max": 18446744073709551615,
            "step": 0.01
          }
        ],
        "target_cfg": [
          "FLOAT",
          {
            "default": 4.5,
            "min": 0,
            "max": 18446744073709551615,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "source_cond",
        "source_uncond",
        "target_cond",
        "target_uncond",
        "source_cfg",
        "target_cfg"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GUIDER"
    ],
    "name": "HYFlowEditGuiderCFG",
    "display_name": "HY FlowEdit Guider CFG",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanLoom",
    "category": "hunyuanloom",
    "output_node": false
  },
  "HYFlowEditGuiderCFGAdv": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "source_cond": [
          "CONDITIONING"
        ],
        "source_uncond": [
          "CONDITIONING"
        ],
        "target_cond": [
          "CONDITIONING"
        ],
        "target_uncond": [
          "CONDITIONING"
        ],
        "source_cfg": [
          "FLOAT",
          {
            "default": 2,
            "min": 0,
            "max": 18446744073709551615,
            "step": 0.01
          }
        ],
        "target_cfg": [
          "FLOAT",
          {
            "default": 4.5,
            "min": 0,
            "max": 18446744073709551615,
            "step": 0.01
          }
        ],
        "num_repeats": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "source_cond",
        "source_uncond",
        "target_cond",
        "target_uncond",
        "source_cfg",
        "target_cfg",
        "num_repeats"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GUIDER"
    ],
    "name": "HYFlowEditGuiderCFGAdv",
    "display_name": "HY FlowEdit Guider CFG Adv.",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanLoom",
    "category": "hunyuanloom",
    "output_node": false
  },
  "HYFlowEditSampler": {
    "input": {
      "required": {
        "skip_steps": [
          "INT",
          {
            "default": 4,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "drift_steps": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      },
      "optional": {}
    },
    "input_order": {
      "required": [
        "skip_steps",
        "drift_steps",
        "seed"
      ],
      "optional": []
    },
    "output": [
      "SAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAMPLER"
    ],
    "name": "HYFlowEditSampler",
    "display_name": "HY FlowEdit Sampler",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanLoom",
    "category": "hunyuanloom",
    "output_node": false
  },
  "HYApplyRegionalConds": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "cond": [
          "CONDITIONING"
        ],
        "region_conds": [
          "REGION_COND"
        ],
        "latent": [
          "LATENT"
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "round": 0.01
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "round": 0.01
          }
        ],
        "main_cond_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01,
            "round": 0.01
          }
        ],
        "always_included": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Whether to keep the prompts always but allow them to affect the entire video (unmasked) outside of end/start percents."
          }
        ]
      },
      "optional": {
        "attn_override": [
          "ATTN_OVERRIDE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "cond",
        "region_conds",
        "latent",
        "start_percent",
        "end_percent",
        "main_cond_strength",
        "always_included"
      ],
      "optional": [
        "attn_override"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "HYApplyRegionalConds",
    "display_name": "HY Apply Regional Conds",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanLoom",
    "category": "hunyuanloom",
    "output_node": false
  },
  "HYCreateRegionalCond": {
    "input": {
      "required": {
        "cond": [
          "CONDITIONING"
        ],
        "mask": [
          "MASK"
        ],
        "cond_strength": [
          "FLOAT",
          {
            "default": 1,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01,
            "round": 0.01
          }
        ],
        "mask_consolidation": [
          [
            "first_only",
            "select_first",
            "select_last",
            "union"
          ],
          {
            "tooltip": "How to choose the masking when they are compressed for the latents temporally."
          }
        ]
      },
      "optional": {
        "prev_regions": [
          "REGION_COND"
        ]
      }
    },
    "input_order": {
      "required": [
        "cond",
        "mask",
        "cond_strength",
        "mask_consolidation"
      ],
      "optional": [
        "prev_regions"
      ]
    },
    "output": [
      "REGION_COND"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "REGION_COND"
    ],
    "name": "HYCreateRegionalCond",
    "display_name": "HY Create Regional Cond",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanLoom",
    "category": "hunyuanloom",
    "output_node": false
  },
  "HYAttnOverride": {
    "input": {
      "required": {
        "double_blocks": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "single_blocks": [
          "STRING",
          {
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "double_blocks",
        "single_blocks"
      ]
    },
    "output": [
      "ATTN_OVERRIDE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "ATTN_OVERRIDE"
    ],
    "name": "HYAttnOverride",
    "display_name": "HY Attention Override",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanLoom",
    "category": "hunyuanloom/attn",
    "output_node": false
  },
  "HYFetaEnhance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "feta_weight": [
          "FLOAT",
          {
            "default": 2,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "attn_override": [
          "ATTN_OVERRIDE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "feta_weight"
      ],
      "optional": [
        "attn_override"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "HYFetaEnhance",
    "display_name": "HY Feta Enhance",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanLoom",
    "category": "hunyuanloom",
    "output_node": false
  },
  "HyVideoFlowEditSamplerWrapper": {
    "input": {
      "required": {
        "model": [
          "HYVIDEOMODEL"
        ],
        "source_embeds": [
          "HYVIDEMBEDS"
        ],
        "target_embeds": [
          "HYVIDEMBEDS"
        ],
        "samples": [
          "LATENT",
          {
            "tooltip": "init Latents to use for video2video process"
          }
        ],
        "steps": [
          "INT",
          {
            "default": 30,
            "min": 1
          }
        ],
        "skip_steps": [
          "INT",
          {
            "default": 4,
            "min": 0
          }
        ],
        "drift_steps": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "source_guidance_scale": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.0,
            "max": 30.0,
            "step": 0.01
          }
        ],
        "target_guidance_scale": [
          "FLOAT",
          {
            "default": 12.0,
            "min": 0.0,
            "max": 30.0,
            "step": 0.01
          }
        ],
        "drift_guidance_scale": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.0,
            "max": 30.0,
            "step": 0.01
          }
        ],
        "flow_shift": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 1.0,
            "max": 30.0,
            "step": 0.01
          }
        ],
        "drift_flow_shift": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 30.0,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "force_offload": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "source_embeds",
        "target_embeds",
        "samples",
        "steps",
        "skip_steps",
        "drift_steps",
        "source_guidance_scale",
        "target_guidance_scale",
        "drift_guidance_scale",
        "flow_shift",
        "drift_flow_shift",
        "seed",
        "force_offload"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "samples"
    ],
    "name": "HyVideoFlowEditSamplerWrapper",
    "display_name": "HunyuanVideo Flow Edit Sampler (Wrapper)",
    "description": "",
    "python_module": "custom_nodes.ComfyUI-HunyuanLoom",
    "category": "hunyuanloom",
    "output_node": false
  },
  "InpaintCropImproved": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "downscale_algorithm": [
          [
            "nearest",
            "bilinear",
            "bicubic",
            "lanczos",
            "box",
            "hamming"
          ],
          {
            "default": "bilinear"
          }
        ],
        "upscale_algorithm": [
          [
            "nearest",
            "bilinear",
            "bicubic",
            "lanczos",
            "box",
            "hamming"
          ],
          {
            "default": "bicubic"
          }
        ],
        "preresize": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Resize the original image before processing."
          }
        ],
        "preresize_mode": [
          [
            "ensure minimum resolution",
            "ensure maximum resolution",
            "ensure minimum and maximum resolution"
          ],
          {
            "default": "ensure minimum resolution"
          }
        ],
        "preresize_min_width": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "preresize_min_height": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "preresize_max_width": [
          "INT",
          {
            "default": 16384,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "preresize_max_height": [
          "INT",
          {
            "default": 16384,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "mask_fill_holes": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Mark as masked any areas fully enclosed by mask."
          }
        ],
        "mask_expand_pixels": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1,
            "tooltip": "Expand the mask by a certain amount of pixels before processing."
          }
        ],
        "mask_invert": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Invert mask so that anything masked will be kept."
          }
        ],
        "mask_blend_pixels": [
          "INT",
          {
            "default": 32,
            "min": 0,
            "max": 64,
            "step": 1,
            "tooltip": "How many pixels to blend into the original image."
          }
        ],
        "mask_hipass_filter": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0,
            "max": 1,
            "step": 0.01,
            "tooltip": "Ignore mask values lower than this value."
          }
        ],
        "extend_for_outpainting": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Extend the image for outpainting."
          }
        ],
        "extend_up_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "extend_down_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "extend_left_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "extend_right_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "context_from_mask_extend_factor": [
          "FLOAT",
          {
            "default": 1.2,
            "min": 1.0,
            "max": 100.0,
            "step": 0.01,
            "tooltip": "Grow the context area from the mask by a certain factor in every direction. For example, 1.5 grabs extra 50% up, down, left, and right as context."
          }
        ],
        "output_resize_to_target_size": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Force a specific resolution for sampling."
          }
        ],
        "output_target_width": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 1
          }
        ],
        "output_target_height": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 1
          }
        ],
        "output_padding": [
          [
            "0",
            "8",
            "16",
            "32",
            "64",
            "128",
            "256",
            "512"
          ],
          {
            "default": "32"
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "optional_context_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "downscale_algorithm",
        "upscale_algorithm",
        "preresize",
        "preresize_mode",
        "preresize_min_width",
        "preresize_min_height",
        "preresize_max_width",
        "preresize_max_height",
        "mask_fill_holes",
        "mask_expand_pixels",
        "mask_invert",
        "mask_blend_pixels",
        "mask_hipass_filter",
        "extend_for_outpainting",
        "extend_up_factor",
        "extend_down_factor",
        "extend_left_factor",
        "extend_right_factor",
        "context_from_mask_extend_factor",
        "output_resize_to_target_size",
        "output_target_width",
        "output_target_height",
        "output_padding"
      ],
      "optional": [
        "mask",
        "optional_context_mask"
      ]
    },
    "output": [
      "STITCHER",
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "stitcher",
      "cropped_image",
      "cropped_mask"
    ],
    "name": "InpaintCropImproved",
    "display_name": "\u2702\ufe0f Inpaint Crop (Improved)",
    "description": "Crops an image around a mask for inpainting, the optional context mask defines an extra area to keep for the context.",
    "python_module": "custom_nodes.comfyui-inpaint-cropandstitch",
    "category": "inpaint",
    "output_node": false
  },
  "InpaintStitchImproved": {
    "input": {
      "required": {
        "stitcher": [
          "STITCHER"
        ],
        "inpainted_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "stitcher",
        "inpainted_image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "InpaintStitchImproved",
    "display_name": "\u2702\ufe0f Inpaint Stitch (Improved)",
    "description": "Stitches an image cropped with Inpaint Crop back into the original image",
    "python_module": "custom_nodes.comfyui-inpaint-cropandstitch",
    "category": "inpaint",
    "output_node": false
  },
  "InpaintCrop": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "context_expand_pixels": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "context_expand_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 1.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "fill_mask_holes": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "blur_mask_pixels": [
          "FLOAT",
          {
            "default": 16.0,
            "min": 0.0,
            "max": 256.0,
            "step": 0.1
          }
        ],
        "invert_mask": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "blend_pixels": [
          "FLOAT",
          {
            "default": 16.0,
            "min": 0.0,
            "max": 32.0,
            "step": 0.1
          }
        ],
        "rescale_algorithm": [
          [
            "nearest",
            "bilinear",
            "bicubic",
            "bislerp",
            "lanczos",
            "box",
            "hamming"
          ],
          {
            "default": "bicubic"
          }
        ],
        "mode": [
          [
            "ranged size",
            "forced size",
            "free size"
          ],
          {
            "default": "ranged size"
          }
        ],
        "force_width": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "force_height": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "rescale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "min_width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "min_height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "max_width": [
          "INT",
          {
            "default": 768,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "max_height": [
          "INT",
          {
            "default": 768,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "padding": [
          [
            8,
            16,
            32,
            64,
            128,
            256,
            512
          ],
          {
            "default": 32
          }
        ]
      },
      "optional": {
        "optional_context_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask",
        "context_expand_pixels",
        "context_expand_factor",
        "fill_mask_holes",
        "blur_mask_pixels",
        "invert_mask",
        "blend_pixels",
        "rescale_algorithm",
        "mode",
        "force_width",
        "force_height",
        "rescale_factor",
        "min_width",
        "min_height",
        "max_width",
        "max_height",
        "padding"
      ],
      "optional": [
        "optional_context_mask"
      ]
    },
    "output": [
      "STITCH",
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "stitch",
      "cropped_image",
      "cropped_mask"
    ],
    "name": "InpaintCrop",
    "display_name": "(OLD \ud83d\udc80, use the new \u2702\ufe0f Inpaint Crop node)",
    "description": "",
    "python_module": "custom_nodes.comfyui-inpaint-cropandstitch",
    "category": "inpaint",
    "output_node": false
  },
  "InpaintStitch": {
    "input": {
      "required": {
        "stitch": [
          "STITCH"
        ],
        "inpainted_image": [
          "IMAGE"
        ],
        "rescale_algorithm": [
          [
            "nearest",
            "bilinear",
            "bicubic",
            "bislerp",
            "lanczos",
            "box",
            "hamming"
          ],
          {
            "default": "bislerp"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "stitch",
        "inpainted_image",
        "rescale_algorithm"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "InpaintStitch",
    "display_name": "(OLD \ud83d\udc80, use the new \u2702\ufe0f Inpaint Stitch node)",
    "description": "",
    "python_module": "custom_nodes.comfyui-inpaint-cropandstitch",
    "category": "inpaint",
    "output_node": false
  },
  "InpaintExtendOutpaint": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "mode": [
          [
            "factors",
            "pixels"
          ],
          {
            "default": "factors"
          }
        ],
        "expand_up_pixels": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "expand_up_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 1.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "expand_down_pixels": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "expand_down_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 1.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "expand_left_pixels": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "expand_left_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 1.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "expand_right_pixels": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "expand_right_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 1.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "optional_context_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask",
        "mode",
        "expand_up_pixels",
        "expand_up_factor",
        "expand_down_pixels",
        "expand_down_factor",
        "expand_left_pixels",
        "expand_left_factor",
        "expand_right_pixels",
        "expand_right_factor"
      ],
      "optional": [
        "optional_context_mask"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "MASK"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "context_mask"
    ],
    "name": "InpaintExtendOutpaint",
    "display_name": "(OLD \ud83d\udc80 use Crop instead) Extend Image for Outpainting",
    "description": "",
    "python_module": "custom_nodes.comfyui-inpaint-cropandstitch",
    "category": "inpaint",
    "output_node": false
  },
  "InpaintResize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "rescale_algorithm": [
          [
            "nearest",
            "bilinear",
            "bicubic",
            "bislerp",
            "lanczos",
            "box",
            "hamming"
          ],
          {
            "default": "bicubic"
          }
        ],
        "mode": [
          [
            "ensure minimum size",
            "factor"
          ],
          {
            "default": "ensure minimum size"
          }
        ],
        "min_width": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "min_height": [
          "INT",
          {
            "default": 1024,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "rescale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 100.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "optional_context_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask",
        "rescale_algorithm",
        "mode",
        "min_width",
        "min_height",
        "rescale_factor"
      ],
      "optional": [
        "optional_context_mask"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "MASK"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "context_mask"
    ],
    "name": "InpaintResize",
    "display_name": "(OLD \ud83d\udc80 use Crop instead) Resize Image Before Inpainting",
    "description": "",
    "python_module": "custom_nodes.comfyui-inpaint-cropandstitch",
    "category": "inpaint",
    "output_node": false
  },
  "KSampler Gradually Adding More Denoise (efficient)": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "start_denoise": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "denoise_increment": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.1
          }
        ],
        "denoise_increment_steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ]
      },
      "optional": {
        "optional_vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "negative",
        "latent_image",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "start_denoise",
        "denoise_increment",
        "denoise_increment_steps"
      ],
      "optional": [
        "optional_vae"
      ]
    },
    "output": [
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CONDITIONING+",
      "CONDITIONING-",
      "LATENT",
      "VAE"
    ],
    "name": "KSampler Gradually Adding More Denoise (efficient)",
    "display_name": "KSampler Gradually Adding More Denoise (efficient)",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/others",
    "output_node": true
  },
  "GMFSS Fortuna VFI": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "GMFSS_fortuna_union",
            "GMFSS_fortuna"
          ]
        ],
        "frames": [
          "IMAGE"
        ],
        "clear_cache_after_n_frames": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 1000
          }
        ],
        "multiplier": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000
          }
        ]
      },
      "optional": {
        "optional_interpolation_states": [
          "INTERPOLATION_STATES"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "frames",
        "clear_cache_after_n_frames",
        "multiplier"
      ],
      "optional": [
        "optional_interpolation_states"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "GMFSS Fortuna VFI",
    "display_name": "GMFSS Fortuna VFI",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/VFI",
    "output_node": false
  },
  "IFRNet VFI": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "IFRNet_S_Vimeo90K.pth",
            "IFRNet_L_Vimeo90K.pth",
            "IFRNet_S_GoPro.pth",
            "IFRNet_L_GoPro.pth"
          ]
        ],
        "frames": [
          "IMAGE"
        ],
        "clear_cache_after_n_frames": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 1000
          }
        ],
        "multiplier": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000
          }
        ],
        "scale_factor": [
          [
            0.25,
            0.5,
            1.0,
            2.0,
            4.0
          ],
          {
            "default": 1.0
          }
        ]
      },
      "optional": {
        "optional_interpolation_states": [
          "INTERPOLATION_STATES"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "frames",
        "clear_cache_after_n_frames",
        "multiplier",
        "scale_factor"
      ],
      "optional": [
        "optional_interpolation_states"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "IFRNet VFI",
    "display_name": "IFRNet VFI",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/VFI",
    "output_node": false
  },
  "IFUnet VFI": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "IFUNet.pth"
          ]
        ],
        "frames": [
          "IMAGE"
        ],
        "clear_cache_after_n_frames": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 1000
          }
        ],
        "multiplier": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000
          }
        ],
        "scale_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.1,
            "max": 100,
            "step": 0.1
          }
        ],
        "ensemble": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "optional_interpolation_states": [
          "INTERPOLATION_STATES"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "frames",
        "clear_cache_after_n_frames",
        "multiplier",
        "scale_factor",
        "ensemble"
      ],
      "optional": [
        "optional_interpolation_states"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "IFUnet VFI",
    "display_name": "IFUnet VFI",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/VFI",
    "output_node": false
  },
  "M2M VFI": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "M2M.pth"
          ]
        ],
        "frames": [
          "IMAGE"
        ],
        "clear_cache_after_n_frames": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 1000
          }
        ],
        "multiplier": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000
          }
        ]
      },
      "optional": {
        "optional_interpolation_states": [
          "INTERPOLATION_STATES"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "frames",
        "clear_cache_after_n_frames",
        "multiplier"
      ],
      "optional": [
        "optional_interpolation_states"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "M2M VFI",
    "display_name": "M2M VFI",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/VFI",
    "output_node": false
  },
  "RIFE VFI": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "rife40.pth",
            "rife41.pth",
            "sudo_rife4_269.662_testV1_scale1.pth",
            "rife42.pth",
            "rife43.pth",
            "rife44.pth",
            "rife45.pth",
            "rife46.pth",
            "rife47.pth",
            "rife48.pth",
            "rife49.pth"
          ],
          {
            "default": "rife47.pth"
          }
        ],
        "frames": [
          "IMAGE"
        ],
        "clear_cache_after_n_frames": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 1000
          }
        ],
        "multiplier": [
          "INT",
          {
            "default": 2,
            "min": 1
          }
        ],
        "fast_mode": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "ensemble": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "scale_factor": [
          [
            0.25,
            0.5,
            1.0,
            2.0,
            4.0
          ],
          {
            "default": 1.0
          }
        ]
      },
      "optional": {
        "optional_interpolation_states": [
          "INTERPOLATION_STATES"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "frames",
        "clear_cache_after_n_frames",
        "multiplier",
        "fast_mode",
        "ensemble",
        "scale_factor"
      ],
      "optional": [
        "optional_interpolation_states"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "RIFE VFI",
    "display_name": "RIFE VFI (recommend rife47 and rife49)",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/VFI",
    "output_node": false
  },
  "Sepconv VFI": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "sepconv.pth"
          ]
        ],
        "frames": [
          "IMAGE"
        ],
        "clear_cache_after_n_frames": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 1000
          }
        ],
        "multiplier": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000
          }
        ]
      },
      "optional": {
        "optional_interpolation_states": [
          "INTERPOLATION_STATES"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "frames",
        "clear_cache_after_n_frames",
        "multiplier"
      ],
      "optional": [
        "optional_interpolation_states"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Sepconv VFI",
    "display_name": "Sepconv VFI",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/VFI",
    "output_node": false
  },
  "AMT VFI": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "amt-s.pth",
            "amt-l.pth",
            "amt-g.pth",
            "gopro_amt-s.pth"
          ]
        ],
        "frames": [
          "IMAGE"
        ],
        "clear_cache_after_n_frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 100
          }
        ],
        "multiplier": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000
          }
        ]
      },
      "optional": {
        "optional_interpolation_states": [
          "INTERPOLATION_STATES"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "frames",
        "clear_cache_after_n_frames",
        "multiplier"
      ],
      "optional": [
        "optional_interpolation_states"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "AMT VFI",
    "display_name": "AMT VFI",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/VFI",
    "output_node": false
  },
  "FILM VFI": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "film_net_fp32.pt"
          ]
        ],
        "frames": [
          "IMAGE"
        ],
        "clear_cache_after_n_frames": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 1000
          }
        ],
        "multiplier": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000
          }
        ]
      },
      "optional": {
        "optional_interpolation_states": [
          "INTERPOLATION_STATES"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "frames",
        "clear_cache_after_n_frames",
        "multiplier"
      ],
      "optional": [
        "optional_interpolation_states"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FILM VFI",
    "display_name": "FILM VFI",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/VFI",
    "output_node": false
  },
  "Make Interpolation State List": {
    "input": {
      "required": {
        "frame_indices": [
          "STRING",
          {
            "multiline": true,
            "default": "1,2,3"
          }
        ],
        "is_skip_list": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "frame_indices",
        "is_skip_list"
      ]
    },
    "output": [
      "INTERPOLATION_STATES"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INTERPOLATION_STATES"
    ],
    "name": "Make Interpolation State List",
    "display_name": "Make Interpolation State List",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/VFI",
    "output_node": false
  },
  "STMFNet VFI": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "stmfnet.pth"
          ]
        ],
        "frames": [
          "IMAGE"
        ],
        "clear_cache_after_n_frames": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 1000
          }
        ],
        "multiplier": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 2
          }
        ],
        "duplicate_first_last_frames": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "optional_interpolation_states": [
          "INTERPOLATION_STATES"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "frames",
        "clear_cache_after_n_frames",
        "multiplier",
        "duplicate_first_last_frames"
      ],
      "optional": [
        "optional_interpolation_states"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "STMFNet VFI",
    "display_name": "STMFNet VFI",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/VFI",
    "output_node": false
  },
  "FLAVR VFI": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "FLAVR_2x.pth",
            "FLAVR_4x.pth",
            "FLAVR_8x.pth"
          ]
        ],
        "frames": [
          "IMAGE"
        ],
        "clear_cache_after_n_frames": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 1000
          }
        ],
        "multiplier": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 2
          }
        ],
        "duplicate_first_last_frames": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "optional_interpolation_states": [
          "INTERPOLATION_STATES"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "frames",
        "clear_cache_after_n_frames",
        "multiplier",
        "duplicate_first_last_frames"
      ],
      "optional": [
        "optional_interpolation_states"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "FLAVR VFI",
    "display_name": "FLAVR VFI",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/VFI",
    "output_node": false
  },
  "CAIN VFI": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "pretrained_cain.pth"
          ]
        ],
        "frames": [
          "IMAGE"
        ],
        "clear_cache_after_n_frames": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 1000
          }
        ],
        "multiplier": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000
          }
        ]
      },
      "optional": {
        "optional_interpolation_states": [
          "INTERPOLATION_STATES"
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "frames",
        "clear_cache_after_n_frames",
        "multiplier"
      ],
      "optional": [
        "optional_interpolation_states"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "CAIN VFI",
    "display_name": "CAIN VFI",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation/VFI",
    "output_node": false
  },
  "VFI FloatToInt": {
    "input": {
      "required": {
        "float": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "float"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "VFI FloatToInt",
    "display_name": "VFI FloatToInt",
    "description": "",
    "python_module": "custom_nodes.comfyui-frame-interpolation",
    "category": "ComfyUI-Frame-Interpolation",
    "output_node": false
  },
  "CLIPTextEncodeSDXL+": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "size_cond_factor": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 16
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "default": ""
          }
        ],
        "clip": [
          "CLIP"
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "size_cond_factor",
        "text",
        "clip"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "CLIPTextEncodeSDXL+",
    "display_name": "\ud83d\udd27 SDXL CLIPTextEncode",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/conditioning",
    "output_node": false
  },
  "ConditioningCombineMultiple+": {
    "input": {
      "required": {
        "conditioning_1": [
          "CONDITIONING"
        ],
        "conditioning_2": [
          "CONDITIONING"
        ]
      },
      "optional": {
        "conditioning_3": [
          "CONDITIONING"
        ],
        "conditioning_4": [
          "CONDITIONING"
        ],
        "conditioning_5": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_1",
        "conditioning_2"
      ],
      "optional": [
        "conditioning_3",
        "conditioning_4",
        "conditioning_5"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ConditioningCombineMultiple+",
    "display_name": "\ud83d\udd27 Cond Combine Multiple",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/conditioning",
    "output_node": false
  },
  "SD3NegativeConditioning+": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "end": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "end"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "SD3NegativeConditioning+",
    "display_name": "\ud83d\udd27 SD3 Negative Conditioning",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/conditioning",
    "output_node": false
  },
  "ImageEnhanceDifference+": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "exponent": [
          "FLOAT",
          {
            "default": 0.75,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2",
        "exponent"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageEnhanceDifference+",
    "display_name": "\ud83d\udd27 Image Enhance Difference",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image analysis",
    "output_node": false
  },
  "ImageBatchMultiple+": {
    "input": {
      "required": {
        "image_1": [
          "IMAGE"
        ],
        "method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ],
          {
            "default": "lanczos"
          }
        ]
      },
      "optional": {
        "image_2": [
          "IMAGE"
        ],
        "image_3": [
          "IMAGE"
        ],
        "image_4": [
          "IMAGE"
        ],
        "image_5": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image_1",
        "method"
      ],
      "optional": [
        "image_2",
        "image_3",
        "image_4",
        "image_5"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBatchMultiple+",
    "display_name": "\ud83d\udd27 Images Batch Multiple",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image batch",
    "output_node": false
  },
  "ImageExpandBatch+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "size": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "step": 1
          }
        ],
        "method": [
          [
            "expand",
            "repeat all",
            "repeat first",
            "repeat last"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "size",
        "method"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageExpandBatch+",
    "display_name": "\ud83d\udd27 Image Expand Batch",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image batch",
    "output_node": false
  },
  "ImageFromBatch+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "start": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "length": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "start",
        "length"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageFromBatch+",
    "display_name": "\ud83d\udd27 Image From Batch",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image batch",
    "output_node": false
  },
  "ImageListToBatch+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageListToBatch+",
    "display_name": "\ud83d\udd27 Image List To Batch",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image batch",
    "output_node": false
  },
  "ImageCompositeFromMaskBatch+": {
    "input": {
      "required": {
        "image_from": [
          "IMAGE"
        ],
        "image_to": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image_from",
        "image_to",
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageCompositeFromMaskBatch+",
    "display_name": "\ud83d\udd27 Image Composite From Mask Batch",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageComposite+": {
    "input": {
      "required": {
        "destination": [
          "IMAGE"
        ],
        "source": [
          "IMAGE"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "offset_x": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "offset_y": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "x",
        "y",
        "offset_x",
        "offset_y"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageComposite+",
    "display_name": "\ud83d\udd27 Image Composite",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageCrop+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "position": [
          [
            "top-left",
            "top-center",
            "top-right",
            "right-center",
            "bottom-right",
            "bottom-center",
            "bottom-left",
            "left-center",
            "center"
          ]
        ],
        "x_offset": [
          "INT",
          {
            "default": 0,
            "min": -99999,
            "step": 1
          }
        ],
        "y_offset": [
          "INT",
          {
            "default": 0,
            "min": -99999,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "position",
        "x_offset",
        "y_offset"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "x",
      "y"
    ],
    "name": "ImageCrop+",
    "display_name": "\ud83d\udd27 Image Crop",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageFlip+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "axis": [
          [
            "x",
            "y",
            "xy"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "axis"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageFlip+",
    "display_name": "\ud83d\udd27 Image Flip",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageRandomTransform+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "repeat": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "variation": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "seed",
        "repeat",
        "variation"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageRandomTransform+",
    "display_name": "\ud83d\udd27 Image Random Transform",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageRemoveAlpha+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageRemoveAlpha+",
    "display_name": "\ud83d\udd27 Image Remove Alpha",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image utils",
    "output_node": false
  },
  "ImageRemoveBackground+": {
    "input": {
      "required": {
        "rembg_session": [
          "REMBG_SESSION"
        ],
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "rembg_session",
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ImageRemoveBackground+",
    "display_name": "\ud83d\udd27 Image Remove Background",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageResize+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "interpolation": [
          [
            "nearest",
            "bilinear",
            "bicubic",
            "area",
            "nearest-exact",
            "lanczos"
          ]
        ],
        "method": [
          [
            "stretch",
            "keep proportion",
            "fill / crop",
            "pad"
          ]
        ],
        "condition": [
          [
            "always",
            "downscale if bigger",
            "upscale if smaller",
            "if bigger area",
            "if smaller area"
          ]
        ],
        "multiple_of": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 512,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "interpolation",
        "method",
        "condition",
        "multiple_of"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "width",
      "height"
    ],
    "name": "ImageResize+",
    "display_name": "\ud83d\udd27 Image Resize",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageSeamCarving+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "energy": [
          [
            "backward",
            "forward"
          ]
        ],
        "order": [
          [
            "width-first",
            "height-first"
          ]
        ]
      },
      "optional": {
        "keep_mask": [
          "MASK"
        ],
        "drop_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "energy",
        "order"
      ],
      "optional": [
        "keep_mask",
        "drop_mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageSeamCarving+",
    "display_name": "\ud83d\udd27 Image Seam Carving",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageTile+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "rows": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "cols": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "overlap": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 0.5,
            "step": 0.01
          }
        ],
        "overlap_x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 1
          }
        ],
        "overlap_y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "rows",
        "cols",
        "overlap",
        "overlap_x",
        "overlap_y"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "tile_width",
      "tile_height",
      "overlap_x",
      "overlap_y"
    ],
    "name": "ImageTile+",
    "display_name": "\ud83d\udd27 Image Tile",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageUntile+": {
    "input": {
      "required": {
        "tiles": [
          "IMAGE"
        ],
        "overlap_x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 1
          }
        ],
        "overlap_y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 1
          }
        ],
        "rows": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ],
        "cols": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 256,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "tiles",
        "overlap_x",
        "overlap_y",
        "rows",
        "cols"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageUntile+",
    "display_name": "\ud83d\udd27 Image Untile",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "RemBGSession+": {
    "input": {
      "required": {
        "model": [
          [
            "u2net: general purpose",
            "u2netp: lightweight general purpose",
            "u2net_human_seg: human segmentation",
            "u2net_cloth_seg: cloths Parsing",
            "silueta: very small u2net",
            "isnet-general-use: general purpose",
            "isnet-anime: anime illustrations",
            "sam: general purpose"
          ]
        ],
        "providers": [
          [
            "CPU",
            "CUDA",
            "ROCM",
            "DirectML",
            "OpenVINO",
            "CoreML",
            "Tensorrt",
            "Azure"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "providers"
      ]
    },
    "output": [
      "REMBG_SESSION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "REMBG_SESSION"
    ],
    "name": "RemBGSession+",
    "display_name": "\ud83d\udd27 RemBG Session",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "TransparentBGSession+": {
    "input": {
      "required": {
        "mode": [
          [
            "base",
            "fast",
            "base-nightly"
          ]
        ],
        "use_jit": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "use_jit"
      ]
    },
    "output": [
      "REMBG_SESSION"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "REMBG_SESSION"
    ],
    "name": "TransparentBGSession+",
    "display_name": "\ud83d\udd27 InSPyReNet TransparentBG",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image manipulation",
    "output_node": false
  },
  "ImageApplyLUT+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "lut_file": [
          []
        ],
        "gamma_correction": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "clip_values": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "lut_file",
        "gamma_correction",
        "clip_values",
        "strength"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageApplyLUT+",
    "display_name": "\ud83d\udd27 Image Apply LUT",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImageCASharpening+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "amount": [
          "FLOAT",
          {
            "default": 0.8,
            "min": 0,
            "max": 1,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "amount"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageCASharpening+",
    "display_name": "\ud83d\udd27 Image Contrast Adaptive Sharpening",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImageDesaturate+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "method": [
          [
            "luminance (Rec.709)",
            "luminance (Rec.601)",
            "average",
            "lightness"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "factor",
        "method"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageDesaturate+",
    "display_name": "\ud83d\udd27 Image Desaturate",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "PixelOEPixelize+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "downscale_mode": [
          [
            "contrast",
            "bicubic",
            "nearest",
            "center",
            "k-centroid"
          ]
        ],
        "target_size": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "patch_size": [
          "INT",
          {
            "default": 16,
            "min": 4,
            "max": 32,
            "step": 2
          }
        ],
        "thickness": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 16,
            "step": 1
          }
        ],
        "color_matching": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "upscale": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "downscale_mode",
        "target_size",
        "patch_size",
        "thickness",
        "color_matching",
        "upscale"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "PixelOEPixelize+",
    "display_name": "\ud83d\udd27 Pixelize",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImagePosterize+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "threshold"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImagePosterize+",
    "display_name": "\ud83d\udd27 Image Posterize",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImageColorMatch+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "reference": [
          "IMAGE"
        ],
        "color_space": [
          [
            "LAB",
            "YCbCr",
            "RGB",
            "LUV",
            "YUV",
            "XYZ"
          ]
        ],
        "factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "device": [
          [
            "auto",
            "cpu",
            "gpu"
          ]
        ],
        "batch_size": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1024,
            "step": 1
          }
        ]
      },
      "optional": {
        "reference_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "reference",
        "color_space",
        "factor",
        "device",
        "batch_size"
      ],
      "optional": [
        "reference_mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageColorMatch+",
    "display_name": "\ud83d\udd27 Image Color Match",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImageColorMatchAdobe+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "reference": [
          "IMAGE"
        ],
        "color_space": [
          [
            "RGB",
            "LAB"
          ]
        ],
        "luminance_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 2.0,
            "step": 0.05
          }
        ],
        "color_intensity_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 2.0,
            "step": 0.05
          }
        ],
        "fade_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "neutralization_factor": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "device": [
          [
            "auto",
            "cpu",
            "gpu"
          ]
        ]
      },
      "optional": {
        "reference_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "reference",
        "color_space",
        "luminance_factor",
        "color_intensity_factor",
        "fade_factor",
        "neutralization_factor",
        "device"
      ],
      "optional": [
        "reference_mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageColorMatchAdobe+",
    "display_name": "\ud83d\udd27 Image Color Match Adobe",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "ImageHistogramMatch+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "reference": [
          "IMAGE"
        ],
        "method": [
          [
            "pytorch",
            "skimage"
          ]
        ],
        "factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "device": [
          [
            "auto",
            "cpu",
            "gpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "reference",
        "method",
        "factor",
        "device"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageHistogramMatch+",
    "display_name": "\ud83d\udd27 Image Histogram Match",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image processing",
    "output_node": false
  },
  "GetImageSize+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "width",
      "height",
      "count"
    ],
    "name": "GetImageSize+",
    "display_name": "\ud83d\udd27 Get Image Size",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image utils",
    "output_node": false
  },
  "ImageToDevice+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "device": [
          [
            "auto",
            "cpu",
            "gpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "device"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageToDevice+",
    "display_name": "\ud83d\udd27 Image To Device",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image utils",
    "output_node": false
  },
  "ImagePreviewFromLatent+": {
    "input": {
      "required": {
        "latent": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 64
          }
        ]
      },
      "optional": {
        "image": [
          [
            "none"
          ],
          {
            "image_upload": false
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "latent",
        "vae",
        "tile_size"
      ],
      "optional": [
        "image"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK",
      "width",
      "height"
    ],
    "name": "ImagePreviewFromLatent+",
    "display_name": "\ud83d\udd27 Image Preview From Latent",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image utils",
    "output_node": true
  },
  "NoiseFromImage+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "noise_strenght": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "noise_size": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "color_noise": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "mask_strength": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "mask_scale_diff": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "mask_contrast": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "saturation": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "contrast": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "blur": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.1
          }
        ]
      },
      "optional": {
        "noise_mask": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "noise_strenght",
        "noise_size",
        "color_noise",
        "mask_strength",
        "mask_scale_diff",
        "mask_contrast",
        "saturation",
        "contrast",
        "blur"
      ],
      "optional": [
        "noise_mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "NoiseFromImage+",
    "display_name": "\ud83d\udd27 Noise From Image",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/image utils",
    "output_node": false
  },
  "MaskBlur+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "amount": [
          "INT",
          {
            "default": 6,
            "min": 0,
            "max": 256,
            "step": 1
          }
        ],
        "device": [
          [
            "auto",
            "cpu",
            "gpu"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "amount",
        "device"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskBlur+",
    "display_name": "\ud83d\udd27 Mask Blur",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskBoundingBox+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "padding": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "blur": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 256,
            "step": 1
          }
        ]
      },
      "optional": {
        "image_optional": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "padding",
        "blur"
      ],
      "optional": [
        "image_optional"
      ]
    },
    "output": [
      "MASK",
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MASK",
      "IMAGE",
      "x",
      "y",
      "width",
      "height"
    ],
    "name": "MaskBoundingBox+",
    "display_name": "\ud83d\udd27 Mask Bounding Box",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskFix+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "erode_dilate": [
          "INT",
          {
            "default": 0,
            "min": -256,
            "max": 256,
            "step": 1
          }
        ],
        "fill_holes": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 128,
            "step": 1
          }
        ],
        "remove_isolated_pixels": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 32,
            "step": 1
          }
        ],
        "smooth": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 256,
            "step": 1
          }
        ],
        "blur": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 256,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "erode_dilate",
        "fill_holes",
        "remove_isolated_pixels",
        "smooth",
        "blur"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskFix+",
    "display_name": "\ud83d\udd27 Mask Fix",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskFlip+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "axis": [
          [
            "x",
            "y",
            "xy"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "axis"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskFlip+",
    "display_name": "\ud83d\udd27 Mask Flip",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskFromColor+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "red": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "green": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "blue": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "threshold": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 127,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "red",
        "green",
        "blue",
        "threshold"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskFromColor+",
    "display_name": "\ud83d\udd27 Mask From Color",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskFromList+": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 32,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 32,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      },
      "optional": {
        "values": [
          "INT,FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0
          }
        ],
        "str_values": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "placeholder": "0.0, 0.5, 1.0"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height"
      ],
      "optional": [
        "values",
        "str_values"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskFromList+",
    "display_name": "\ud83d\udd27 Mask From List",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskFromRGBCMYBW+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "threshold_r": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0.0,
            "max": 1,
            "step": 0.01
          }
        ],
        "threshold_g": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0.0,
            "max": 1,
            "step": 0.01
          }
        ],
        "threshold_b": [
          "FLOAT",
          {
            "default": 0.15,
            "min": 0.0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "threshold_r",
        "threshold_g",
        "threshold_b"
      ]
    },
    "output": [
      "MASK",
      "MASK",
      "MASK",
      "MASK",
      "MASK",
      "MASK",
      "MASK",
      "MASK"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "red",
      "green",
      "blue",
      "cyan",
      "magenta",
      "yellow",
      "black",
      "white"
    ],
    "name": "MaskFromRGBCMYBW+",
    "display_name": "\ud83d\udd27 Mask From RGB/CMY/BW",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskFromSegmentation+": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "segments": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 16,
            "step": 1
          }
        ],
        "remove_isolated_pixels": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 32,
            "step": 1
          }
        ],
        "remove_small_masks": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "fill_holes": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "segments",
        "remove_isolated_pixels",
        "remove_small_masks",
        "fill_holes"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskFromSegmentation+",
    "display_name": "\ud83d\udd27 Mask From Segmentation",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskPreview+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "mask"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "MaskPreview+",
    "display_name": "\ud83d\udd27 Mask Preview",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/mask",
    "output_node": true
  },
  "MaskSmooth+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "amount": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 127,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "amount"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskSmooth+",
    "display_name": "\ud83d\udd27 Mask Smooth",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "TransitionMask+": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "frames": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "max": 9999,
            "step": 1
          }
        ],
        "start_frame": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "end_frame": [
          "INT",
          {
            "default": 9999,
            "min": 0,
            "step": 1
          }
        ],
        "transition_type": [
          [
            "horizontal slide",
            "vertical slide",
            "horizontal bar",
            "vertical bar",
            "center box",
            "horizontal door",
            "vertical door",
            "circle",
            "fade"
          ]
        ],
        "timing_function": [
          [
            "linear",
            "in",
            "out",
            "in-out"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "frames",
        "start_frame",
        "end_frame",
        "transition_type",
        "timing_function"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "TransitionMask+",
    "display_name": "\ud83d\udd27 Transition Mask",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/mask",
    "output_node": false
  },
  "MaskBatch+": {
    "input": {
      "required": {
        "mask1": [
          "MASK"
        ],
        "mask2": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask1",
        "mask2"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskBatch+",
    "display_name": "\ud83d\udd27 Mask Batch",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/mask batch",
    "output_node": false
  },
  "MaskExpandBatch+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "size": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "step": 1
          }
        ],
        "method": [
          [
            "expand",
            "repeat all",
            "repeat first",
            "repeat last"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "size",
        "method"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskExpandBatch+",
    "display_name": "\ud83d\udd27 Mask Expand Batch",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/mask batch",
    "output_node": false
  },
  "MaskFromBatch+": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "start": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "length": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "start",
        "length"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskFromBatch+",
    "display_name": "\ud83d\udd27 Mask From Batch",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/mask batch",
    "output_node": false
  },
  "KSamplerVariationsStochastic+": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "latent_image": [
          "LATENT"
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 25,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 7.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "sampler": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "variation_seed": [
          "INT:seed",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "variation_strength": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05,
            "round": 0.01
          }
        ],
        "cfg_scale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "latent_image",
        "noise_seed",
        "steps",
        "cfg",
        "sampler",
        "scheduler",
        "positive",
        "negative",
        "variation_seed",
        "variation_strength",
        "cfg_scale"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "KSamplerVariationsStochastic+",
    "display_name": "\ud83d\udd27 KSampler Stochastic Variations",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "KSamplerVariationsWithNoise+": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "latent_image": [
          "LATENT"
        ],
        "main_seed": [
          "INT:seed",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1,
            "round": 0.01
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "variation_strength": [
          "FLOAT",
          {
            "default": 0.17,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "round": 0.01
          }
        ],
        "variation_seed": [
          "INT:seed",
          {
            "default": 12345,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "latent_image",
        "main_seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "variation_strength",
        "variation_seed",
        "denoise"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "KSamplerVariationsWithNoise+",
    "display_name": "\ud83d\udd27 KSampler Variations with Noise Injection",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "InjectLatentNoise+": {
    "input": {
      "required": {
        "latent": [
          "LATENT"
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "noise_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -20.0,
            "max": 20.0,
            "step": 0.01,
            "round": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latent",
        "noise_seed",
        "noise_strength"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "InjectLatentNoise+",
    "display_name": "\ud83d\udd27 Inject Latent Noise",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "FluxSamplerParams+": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "conditioning": [
          "CONDITIONING"
        ],
        "latent_image": [
          "LATENT"
        ],
        "noise": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "?"
          }
        ],
        "sampler": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "ipndm"
          }
        ],
        "scheduler": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "simple"
          }
        ],
        "steps": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "20"
          }
        ],
        "guidance": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "3.5"
          }
        ],
        "max_shift": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "1.15"
          }
        ],
        "base_shift": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "0.5"
          }
        ],
        "split_sigmas": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "1.0"
          }
        ],
        "denoise": [
          "STRING",
          {
            "multiline": false,
            "dynamicPrompts": false,
            "default": "1.0"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "conditioning",
        "latent_image",
        "noise",
        "sampler",
        "scheduler",
        "steps",
        "guidance",
        "max_shift",
        "base_shift",
        "split_sigmas",
        "denoise"
      ]
    },
    "output": [
      "LATENT",
      "SAMPLER_PARAMS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "latent",
      "params"
    ],
    "name": "FluxSamplerParams+",
    "display_name": "\ud83d\udd27 Flux Sampler Parameters",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "PlotParameters+": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "params": [
          "SAMPLER_PARAMS"
        ],
        "order_by": [
          [
            "none",
            "time",
            "seed",
            "steps",
            "denoise",
            "sampler",
            "scheduler"
          ]
        ],
        "cols_value": [
          [
            "none",
            "time",
            "seed",
            "steps",
            "denoise",
            "sampler",
            "scheduler"
          ]
        ],
        "cols_num": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 1024
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "params",
        "order_by",
        "cols_value",
        "cols_num"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "PlotParameters+",
    "display_name": "\ud83d\udd27 Plot Sampler Parameters",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/sampling",
    "output_node": false
  },
  "ApplyCLIPSeg+": {
    "input": {
      "required": {
        "clip_seg": [
          "CLIP_SEG"
        ],
        "image": [
          "IMAGE"
        ],
        "prompt": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.4,
            "min": 0.0,
            "max": 1.0,
            "step": 0.05
          }
        ],
        "smooth": [
          "INT",
          {
            "default": 9,
            "min": 0,
            "max": 32,
            "step": 1
          }
        ],
        "dilate": [
          "INT",
          {
            "default": 0,
            "min": -32,
            "max": 32,
            "step": 1
          }
        ],
        "blur": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 64,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_seg",
        "image",
        "prompt",
        "threshold",
        "smooth",
        "dilate",
        "blur"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ApplyCLIPSeg+",
    "display_name": "\ud83d\udd27 Apply CLIPSeg",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/segmentation",
    "output_node": false
  },
  "LoadCLIPSegModels+": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "CLIP_SEG"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CLIP_SEG"
    ],
    "name": "LoadCLIPSegModels+",
    "display_name": "\ud83d\udd27 Load CLIPSeg Models",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/segmentation",
    "output_node": false
  },
  "DrawText+": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "default": "Hello, World!"
          }
        ],
        "font": [
          [
            "ShareTechMono-Regular.ttf"
          ]
        ],
        "size": [
          "INT",
          {
            "default": 56,
            "min": 1,
            "max": 9999,
            "step": 1
          }
        ],
        "color": [
          "STRING",
          {
            "multiline": false,
            "default": "#FFFFFF"
          }
        ],
        "background_color": [
          "STRING",
          {
            "multiline": false,
            "default": "#00000000"
          }
        ],
        "shadow_distance": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "shadow_blur": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "shadow_color": [
          "STRING",
          {
            "multiline": false,
            "default": "#000000"
          }
        ],
        "horizontal_align": [
          [
            "left",
            "center",
            "right"
          ]
        ],
        "vertical_align": [
          [
            "top",
            "center",
            "bottom"
          ]
        ],
        "offset_x": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "offset_y": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ]
      },
      "optional": {
        "img_composite": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "font",
        "size",
        "color",
        "background_color",
        "shadow_distance",
        "shadow_blur",
        "shadow_color",
        "horizontal_align",
        "vertical_align",
        "offset_x",
        "offset_y"
      ],
      "optional": [
        "img_composite"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "DrawText+",
    "display_name": "\ud83d\udd27 Draw Text",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/text",
    "output_node": false
  },
  "BatchCount+": {
    "input": {
      "required": {
        "batch": [
          "*",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "batch"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "BatchCount+",
    "display_name": "\ud83d\udd27 Batch Count",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "ConsoleDebug+": {
    "input": {
      "required": {
        "value": [
          "*",
          {}
        ]
      },
      "optional": {
        "prefix": [
          "STRING",
          {
            "multiline": false,
            "default": "Value:"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ],
      "optional": [
        "prefix"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ConsoleDebug+",
    "display_name": "\ud83d\udd27 Console Debug",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/utilities",
    "output_node": true
  },
  "DebugTensorShape+": {
    "input": {
      "required": {
        "tensor": [
          "*",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "tensor"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "DebugTensorShape+",
    "display_name": "\ud83d\udd27 Debug Tensor Shape",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/utilities",
    "output_node": true
  },
  "ModelCompile+": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "dynamic": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "mode": [
          [
            "default",
            "reduce-overhead",
            "max-autotune",
            "max-autotune-no-cudagraphs"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "fullgraph",
        "dynamic",
        "mode"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ModelCompile+",
    "display_name": "\ud83d\udd27 Model Compile",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "RemoveLatentMask+": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "RemoveLatentMask+",
    "display_name": "\ud83d\udd27 Remove Latent Mask",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SDXLEmptyLatentSizePicker+": {
    "input": {
      "required": {
        "resolution": [
          [
            "704x1408 (0.5)",
            "704x1344 (0.52)",
            "768x1344 (0.57)",
            "768x1280 (0.6)",
            "832x1216 (0.68)",
            "832x1152 (0.72)",
            "896x1152 (0.78)",
            "896x1088 (0.82)",
            "960x1088 (0.88)",
            "960x1024 (0.94)",
            "1024x1024 (1.0)",
            "1024x960 (1.07)",
            "1088x960 (1.13)",
            "1088x896 (1.21)",
            "1152x896 (1.29)",
            "1152x832 (1.38)",
            "1216x832 (1.46)",
            "1280x768 (1.67)",
            "1344x768 (1.75)",
            "1344x704 (1.91)",
            "1408x704 (2.0)",
            "1472x704 (2.09)",
            "1536x640 (2.4)",
            "1600x640 (2.5)",
            "1664x576 (2.89)",
            "1728x576 (3.0)"
          ],
          {
            "default": "1024x1024 (1.0)"
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "width_override": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "height_override": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "resolution",
        "batch_size",
        "width_override",
        "height_override"
      ]
    },
    "output": [
      "LATENT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "width",
      "height"
    ],
    "name": "SDXLEmptyLatentSizePicker+",
    "display_name": "\ud83d\udd27 SDXL Empty Latent Size Picker",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "SimpleMath+": {
    "input": {
      "optional": {
        "a": [
          "INT,FLOAT",
          {
            "default": 0.0,
            "step": 0.1
          }
        ],
        "b": [
          "INT,FLOAT",
          {
            "default": 0.0,
            "step": 0.1
          }
        ]
      },
      "required": {
        "value": [
          "STRING",
          {
            "multiline": false,
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "optional": [
        "a",
        "b"
      ],
      "required": [
        "value"
      ]
    },
    "output": [
      "INT",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "FLOAT"
    ],
    "name": "SimpleMath+",
    "display_name": "\ud83d\udd27 Simple Math",
    "description": "",
    "python_module": "custom_nodes.comfyui_essentials",
    "category": "essentials/utilities",
    "output_node": false
  },
  "VHS_VideoCombine": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "frame_rate": [
          "FLOAT",
          {
            "default": 8,
            "min": 1,
            "step": 1
          }
        ],
        "loop_count": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "AnimateDiff"
          }
        ],
        "format": [
          [
            "image/gif",
            "image/webp",
            "video/webm",
            "video/nvenc_hevc-mp4",
            "video/nvenc_h264-mp4",
            "video/nvenc_av1-mp4",
            "video/h265-mp4",
            "video/h264-mp4",
            "video/ffmpeg-gif",
            "video/av1-webm",
            "video/ProRes",
            "video/8bit-png",
            "video/16bit-png"
          ],
          {
            "formats": {
              "video/webm": [
                [
                  "pix_fmt",
                  [
                    "yuv420p",
                    "yuva420p"
                  ]
                ],
                [
                  "crf",
                  "INT",
                  {
                    "default": 20,
                    "min": 0,
                    "max": 100,
                    "step": 1
                  }
                ],
                [
                  "save_metadata",
                  "BOOLEAN",
                  {
                    "default": true
                  }
                ],
                [
                  "trim_to_audio",
                  "BOOLEAN",
                  {
                    "default": false
                  }
                ]
              ],
              "video/nvenc_hevc-mp4": [
                [
                  "pix_fmt",
                  [
                    "yuv420p",
                    "p010le"
                  ]
                ],
                [
                  "bitrate",
                  "INT",
                  {
                    "default": 10,
                    "min": 1,
                    "max": 999,
                    "step": 1
                  }
                ],
                [
                  "megabit",
                  "BOOLEAN",
                  {
                    "default": true
                  }
                ],
                [
                  "save_metadata",
                  "BOOLEAN",
                  {
                    "default": true
                  }
                ]
              ],
              "video/nvenc_h264-mp4": [
                [
                  "pix_fmt",
                  [
                    "yuv420p",
                    "p010le"
                  ]
                ],
                [
                  "bitrate",
                  "INT",
                  {
                    "default": 10,
                    "min": 1,
                    "max": 999,
                    "step": 1
                  }
                ],
                [
                  "megabit",
                  "BOOLEAN",
                  {
                    "default": true
                  }
                ],
                [
                  "save_metadata",
                  "BOOLEAN",
                  {
                    "default": true
                  }
                ]
              ],
              "video/nvenc_av1-mp4": [
                [
                  "pix_fmt",
                  [
                    "yuv420p",
                    "p010le"
                  ]
                ],
                [
                  "bitrate",
                  "INT",
                  {
                    "default": 10,
                    "min": 1,
                    "max": 999,
                    "step": 1
                  }
                ],
                [
                  "megabit",
                  "BOOLEAN",
                  {
                    "default": true
                  }
                ],
                [
                  "save_metadata",
                  "BOOLEAN",
                  {
                    "default": true
                  }
                ]
              ],
              "video/h265-mp4": [
                [
                  "pix_fmt",
                  [
                    "yuv420p10le",
                    "yuv420p"
                  ]
                ],
                [
                  "crf",
                  "INT",
                  {
                    "default": 22,
                    "min": 0,
                    "max": 100,
                    "step": 1
                  }
                ],
                [
                  "save_metadata",
                  "BOOLEAN",
                  {
                    "default": true
                  }
                ]
              ],
              "video/h264-mp4": [
                [
                  "pix_fmt",
                  [
                    "yuv420p",
                    "yuv420p10le"
                  ]
                ],
                [
                  "crf",
                  "INT",
                  {
                    "default": 19,
                    "min": 0,
                    "max": 100,
                    "step": 1
                  }
                ],
                [
                  "save_metadata",
                  "BOOLEAN",
                  {
                    "default": true
                  }
                ],
                [
                  "trim_to_audio",
                  "BOOLEAN",
                  {
                    "default": false
                  }
                ]
              ],
              "video/ffmpeg-gif": [
                [
                  "dither",
                  [
                    "bayer",
                    "heckbert",
                    "floyd_steinberg",
                    "sierra2",
                    "sierra2_4a",
                    "sierra3",
                    "burkes",
                    "atkinson",
                    "none"
                  ],
                  {
                    "default": "sierra2_4a"
                  },
                  "[0:v] split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse=dither=$val"
                ]
              ],
              "video/av1-webm": [
                [
                  "pix_fmt",
                  [
                    "yuv420p10le",
                    "yuv420p"
                  ]
                ],
                [
                  "crf",
                  "INT",
                  {
                    "default": 23,
                    "min": 0,
                    "max": 100,
                    "step": 1
                  }
                ],
                [
                  "input_color_depth",
                  [
                    "8bit",
                    "16bit"
                  ]
                ],
                [
                  "save_metadata",
                  "BOOLEAN",
                  {
                    "default": true
                  }
                ]
              ],
              "video/ProRes": [
                [
                  "profile",
                  [
                    "lt",
                    "standard",
                    "hq",
                    "4444",
                    "4444xq"
                  ],
                  {
                    "default": "hq"
                  }
                ]
              ],
              "image/webp": [
                [
                  "lossless",
                  "BOOLEAN",
                  {
                    "default": true
                  }
                ]
              ]
            }
          }
        ],
        "pingpong": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "save_output": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "audio": [
          "AUDIO"
        ],
        "meta_batch": [
          "VHS_BatchManager"
        ],
        "vae": [
          "VAE"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "images",
        "frame_rate",
        "loop_count",
        "filename_prefix",
        "format",
        "pingpong",
        "save_output"
      ],
      "optional": [
        "audio",
        "meta_batch",
        "vae"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [
      "VHS_FILENAMES"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "Filenames"
    ],
    "name": "VHS_VideoCombine",
    "display_name": "Video Combine \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Video Combine \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Combine an image sequence into a video</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"images\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">images: The images to be turned into a video</div></div><div vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">audio: (optional) audio to add to the video</div></div><div vhs_title=\"meta_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">meta_batch: (optional) Connect to a Meta Batch manager to divide extremely long image sequences into sub batches. See the documentation for Meta Batch Manager</div></div><div vhs_title=\"vae\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">vae: (optional) If provided, the node will take latents as input instead of images. This drastically reduces the required RAM (not VRAM) when working with long (100+ frames) sequences<div style=\"font-size: 1em\">Unlike on Load Video, this isn't always a strict upgrade over using a standalone VAE Decode.</div><div style=\"font-size: 1em\">If you have multiple Video Combine outputs, then the VAE decode will be performed for each output node increasing execution time</div><div style=\"font-size: 1em\">If you make any change to output settings on the Video Combine (such as changing the output format), the VAE decode will be performed again as the decoded result is (by design) not cached</div></div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"frame_rate\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">frame_rate: The frame rate which will be used for the output video. Consider converting this to an input and connecting this to a Load Video with Video Info(Loaded)->fps. When including audio, failure to properly set this will result in audio desync</div></div><div vhs_title=\"loop_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">loop_count: The number of additional times the video should repeat. Can cause performance issues when used with long (100+ frames) sequences</div></div><div vhs_title=\"filename_prefix\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">filename_prefix: A prefix to add to the name of the output filename. This can include subfolders or format strings.</div></div><div vhs_title=\"format\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">format: The output format to use. Formats starting with, 'image' are saved with PIL, but formats starting with 'video' utilize the video_formats system. 'video' options require ffmpeg and selecting one frequently adds additional options to the node.</div></div><div vhs_title=\"pingpong\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">pingpong: Play the video normally, then repeat the video in reverse so that it 'pingpongs' back and forth. This is frequently used to minimize the appearance of skips on very short animations.</div></div><div vhs_title=\"save_output\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">save_output: Specifies if output files should be saved to the output folder, or the temporary output folder</div></div><div vhs_title=\"videopreview\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">videopreview: Displays a preview for the processed result. If advanced previews is enabled, the output is always converted to a format viewable from the browser. If the video has audio, it will also be previewed when moused over. Additional preview options can be accessed with right click.</div></div></div></div><div vhs_title=\"Common Format Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Common Format Widgets: <div vhs_title=\"crf\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">crf: Determines how much to prioritize quality over filesize. Numbers vary between formats, but on each format that includes it, the default value provides visually loss less output</div></div><div vhs_title=\"pix_fmt\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">pix_fmt: The pixel format to use for output. Alternative options will often have higher quality at the cost of increased file size and reduced compatibility with external software.<div style=\"font-size: 1em\"><div vhs_title=\"yuv420p\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">yuv420p: The most common and default format</div></div><div vhs_title=\"yuv420p10le\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">yuv420p10le: Use 10 bit color depth. This can improve color quality when combined with 16bit input color depth</div></div><div vhs_title=\"yuva420p\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">yuva420p: Include transparency in the output video</div></div></div></div></div><div vhs_title=\"input_color_depth\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">input_color_depth: VHS supports outputting 16bit images. While this produces higher quality output, the difference usually isn't visible without postprocessing and it significantly increases file size and processing time.</div></div><div vhs_title=\"save_metadata\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">save_metadata: Determines if metadata for the workflow should be included in the output video file</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "output_node": true
  },
  "VHS_LoadVideo": {
    "input": {
      "required": {
        "video": [
          [
            "1.mp4",
            "2.mp4",
            "3.mp4",
            "4.mp4",
            "5.mp4",
            "6.mp4",
            "WanI2V_Result_00016.mp4",
            "WanI2V_Result_00036.mp4",
            "WanI2V_Result_00056.mp4",
            "finalVideo_v42_2025-04-03.mp4"
          ]
        ],
        "force_rate": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 60,
            "step": 1,
            "disable": 0
          }
        ],
        "custom_width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "disable": 0
          }
        ],
        "custom_height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "disable": 0
          }
        ],
        "frame_load_cap": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1,
            "disable": 0
          }
        ],
        "skip_first_frames": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "select_every_nth": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9007199254740991,
            "step": 1
          }
        ]
      },
      "optional": {
        "meta_batch": [
          "VHS_BatchManager"
        ],
        "vae": [
          "VAE"
        ],
        "format": [
          [
            "None",
            "AnimateDiff",
            "Mochi",
            "LTXV",
            "Hunyuan",
            "Cosmos",
            "Wan"
          ],
          {
            "default": "AnimateDiff",
            "formats": {
              "None": {},
              "AnimateDiff": {
                "target_rate": 8,
                "dim": [
                  8,
                  0,
                  512,
                  512
                ]
              },
              "Mochi": {
                "target_rate": 24,
                "dim": [
                  16,
                  0,
                  848,
                  480
                ],
                "frames": [
                  6,
                  1
                ]
              },
              "LTXV": {
                "target_rate": 24,
                "dim": [
                  32,
                  0,
                  768,
                  512
                ],
                "frames": [
                  8,
                  1
                ]
              },
              "Hunyuan": {
                "target_rate": 24,
                "dim": [
                  16,
                  0,
                  848,
                  480
                ],
                "frames": [
                  4,
                  1
                ]
              },
              "Cosmos": {
                "target_rate": 24,
                "dim": [
                  16,
                  0,
                  1280,
                  704
                ],
                "frames": [
                  8,
                  1
                ]
              },
              "Wan": {
                "target_rate": 16,
                "dim": [
                  8,
                  0,
                  832,
                  480
                ],
                "frames": [
                  4,
                  1
                ]
              }
            }
          }
        ]
      },
      "hidden": {
        "force_size": "STRING",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "video",
        "force_rate",
        "custom_width",
        "custom_height",
        "frame_load_cap",
        "skip_first_frames",
        "select_every_nth"
      ],
      "optional": [
        "meta_batch",
        "vae",
        "format"
      ],
      "hidden": [
        "force_size",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "AUDIO",
      "VHS_VIDEOINFO"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "frame_count",
      "audio",
      "video_info"
    ],
    "name": "VHS_LoadVideo",
    "display_name": "Load Video (Upload) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Load Video \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Loads a video from the input folder</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"meta_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">meta_batch: (optional) Connect to a Meta Batch manager to divide extremely long sequences into sub batches. See the documentation for Meta Batch Manager</div></div><div vhs_title=\"vae\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">vae: (optional) If provided the node will output latents instead of images. This drastically reduces the required RAM (not VRAM) when working with long (100+ frames) sequences<div style=\"font-size: 1em\">Using this is strongly encouraged unless connecting to a node that requires a blue image connection such as Apply Controllnet</div></div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE: The loaded images</div></div><div vhs_title=\"frame_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">frame_count: The length of images just returned</div></div><div vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">audio: The audio from the loaded video</div></div><div vhs_title=\"video_info\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">video_info: Exposes additional info about the video such as the source frame rate, or the total length</div></div><div vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">LATENT: The loaded images pre-converted to latents. Only available when a vae is connected</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"video\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">video: The video file to be loaded. Lists all files with a video extension in the ComfyUI/Input folder</div></div><div vhs_title=\"force_rate\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">force_rate: Drops or duplicates frames so that the produced output has the target frame rate. Many motion models are trained on videos of a specific frame rate and will give better results if input matches that frame rate. If set to 0, all frames are returned. May give unusual results with inputs that have a variable frame rate like animated gifs. Reducing this value can also greatly reduce the execution time and memory requirements.</div></div><div vhs_title=\"force_size\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">force_size: Previously was used to provide suggested resolutions. Instead, custom_width and custom_height can be disabled by setting to 0.</div></div><div vhs_title=\"custom_width\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">custom_width: Allows for an arbitrary width to be entered, cropping to maintain aspect ratio if both are set</div></div><div vhs_title=\"custom_height\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">custom_height: Allows for an arbitrary height to be entered, cropping to maintain aspect ratio if both are set</div></div><div vhs_title=\"frame_load_cap\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">frame_load_cap: The maximum number of frames to load. If 0, all frames are loaded.</div></div><div vhs_title=\"skip_first_frames\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">skip_first_frames: A number of frames which are discarded before producing output.</div></div><div vhs_title=\"select_every_nth\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">select_every_nth: Similar to frame rate. Keeps only the first of every n frames and discard the rest. Has better compatibility with variable frame rate inputs such as gifs. When combined with force_rate, select_every_nth_applies after force_rate so the resulting output has a frame rate equivalent to force_rate/select_every_nth. select_every_nth does not apply to skip_first_frames</div></div><div vhs_title=\"format\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">format: Updates other widgets so that only values supported by the given format can be entered and provides recommended defaults.</div></div><div vhs_title=\"choose video to upload\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">choose video to upload: An upload button is provided to upload local files to the input folder</div></div><div vhs_title=\"videopreview\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">videopreview: Displays a preview for the selected video input. If advanced previews is enabled, this preview will reflect the frame_load_cap, force_rate, skip_first_frames, and select_every_nth values chosen. If the video has audio, it will also be previewed when moused over. Additional preview options can be accessed with right click.</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "output_node": false
  },
  "VHS_LoadVideoPath": {
    "input": {
      "required": {
        "video": [
          "STRING",
          {
            "placeholder": "X://insert/path/here.mp4",
            "vhs_path_extensions": [
              "webm",
              "mp4",
              "mkv",
              "gif",
              "mov"
            ]
          }
        ],
        "force_rate": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 60,
            "step": 1,
            "disable": 0
          }
        ],
        "custom_width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "disable": 0
          }
        ],
        "custom_height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "disable": 0
          }
        ],
        "frame_load_cap": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1,
            "disable": 0
          }
        ],
        "skip_first_frames": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "select_every_nth": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9007199254740991,
            "step": 1
          }
        ]
      },
      "optional": {
        "meta_batch": [
          "VHS_BatchManager"
        ],
        "vae": [
          "VAE"
        ],
        "format": [
          [
            "None",
            "AnimateDiff",
            "Mochi",
            "LTXV",
            "Hunyuan",
            "Cosmos",
            "Wan"
          ],
          {
            "default": "AnimateDiff",
            "formats": {
              "None": {},
              "AnimateDiff": {
                "target_rate": 8,
                "dim": [
                  8,
                  0,
                  512,
                  512
                ]
              },
              "Mochi": {
                "target_rate": 24,
                "dim": [
                  16,
                  0,
                  848,
                  480
                ],
                "frames": [
                  6,
                  1
                ]
              },
              "LTXV": {
                "target_rate": 24,
                "dim": [
                  32,
                  0,
                  768,
                  512
                ],
                "frames": [
                  8,
                  1
                ]
              },
              "Hunyuan": {
                "target_rate": 24,
                "dim": [
                  16,
                  0,
                  848,
                  480
                ],
                "frames": [
                  4,
                  1
                ]
              },
              "Cosmos": {
                "target_rate": 24,
                "dim": [
                  16,
                  0,
                  1280,
                  704
                ],
                "frames": [
                  8,
                  1
                ]
              },
              "Wan": {
                "target_rate": 16,
                "dim": [
                  8,
                  0,
                  832,
                  480
                ],
                "frames": [
                  4,
                  1
                ]
              }
            }
          }
        ]
      },
      "hidden": {
        "force_size": "STRING",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "video",
        "force_rate",
        "custom_width",
        "custom_height",
        "frame_load_cap",
        "skip_first_frames",
        "select_every_nth"
      ],
      "optional": [
        "meta_batch",
        "vae",
        "format"
      ],
      "hidden": [
        "force_size",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "AUDIO",
      "VHS_VIDEOINFO"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "frame_count",
      "audio",
      "video_info"
    ],
    "name": "VHS_LoadVideoPath",
    "display_name": "Load Video (Path) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Load Video (Path) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Loads a video from an arbitrary path</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"meta_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">meta_batch: (optional) Connect to a Meta Batch manager to divide extremely long sequences into sub batches. See the documentation for Meta Batch Manager</div></div><div vhs_title=\"vae\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">vae: (optional) If provided the node will output latents instead of images. This drastically reduces the required RAM (not VRAM) when working with long (100+ frames) sequences<div style=\"font-size: 1em\">Using this is strongly encouraged unless connecting to a node that requires a blue image connection such as Apply Controllnet</div></div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE: The loaded images</div></div><div vhs_title=\"frame_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">frame_count: The length of images just returned</div></div><div vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">audio: The audio from the loaded video</div></div><div vhs_title=\"video_info\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">video_info: Exposes additional info about the video such as the source frame rate, or the total length</div></div><div vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">LATENT: The loaded images pre-converted to latents. Only available when a vae is connected</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"video\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">video: The video file to be loaded.<div style=\"font-size: 1em\">You can also select an image to load it as a single frame</div><div style=\"font-size: 1em\">This is a VHS_PATH input. When edited, it provides a list of possible valid files or directories</div><div style=\"font-size: 1em\"><video preload=\"none\" src=https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite/assets/4284322/729b7185-1fca-41d8-bc8d-a770bb2a5ce6 muted loop controls controlslist=\"nodownload noremoteplayback noplaybackrate\" style=\"width: 0px; min-width: 100%\" class=\"VHS_loopedvideo\"></div><div style=\"font-size: 1em\">The current top-most completion may be selected with Tab</div><div style=\"font-size: 1em\">You can navigate up a directory by pressing Ctrl+B (or Ctrl+W if supported by browser)</div><div style=\"font-size: 1em\">The filter on suggested file types can be disabled by pressing Ctrl+G.</div><div style=\"font-size: 1em\">If converted to an input, this functions as a string</div></div></div><div vhs_title=\"force_rate\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">force_rate: Drops or duplicates frames so that the produced output has the target frame rate. Many motion models are trained on videos of a specific frame rate and will give better results if input matches that frame rate. If set to 0, all frames are returned. May give unusual results with inputs that have a variable frame rate like animated gifs. Reducing this value can also greatly reduce the execution time and memory requirements.</div></div><div vhs_title=\"force_size\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">force_size: Previously was used to provide suggested resolutions. Instead, custom_width and custom_height can be disabled by setting to 0.</div></div><div vhs_title=\"custom_width\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">custom_width: Allows for an arbitrary width to be entered, cropping to maintain aspect ratio if both are set</div></div><div vhs_title=\"custom_height\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">custom_height: Allows for an arbitrary height to be entered, cropping to maintain aspect ratio if both are set</div></div><div vhs_title=\"frame_load_cap\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">frame_load_cap: The maximum number of frames to load. If 0, all frames are loaded.</div></div><div vhs_title=\"skip_first_frames\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">skip_first_frames: A number of frames which are discarded before producing output.</div></div><div vhs_title=\"select_every_nth\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">select_every_nth: Similar to frame rate. Keeps only the first of every n frames and discard the rest. Has better compatibility with variable frame rate inputs such as gifs. When combined with force_rate, select_every_nth_applies after force_rate so the resulting output has a frame rate equivalent to force_rate/select_every_nth. select_every_nth does not apply to skip_first_frames</div></div><div vhs_title=\"format\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">format: Updates other widgets so that only values supported by the given format can be entered and provides recommended defaults.</div></div><div vhs_title=\"videopreview\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">videopreview: Displays a preview for the selected video input. Will only be shown if Advanced Previews is enabled. This preview will reflect the frame_load_cap, force_rate, skip_first_frames, and select_every_nth values chosen. If the video has audio, it will also be previewed when moused over. Additional preview options can be accessed with right click.</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "output_node": false
  },
  "VHS_LoadVideoFFmpeg": {
    "input": {
      "required": {
        "video": [
          [
            "1.mp4",
            "2.mp4",
            "3.mp4",
            "4.mp4",
            "5.mp4",
            "6.mp4",
            "WanI2V_Result_00016.mp4",
            "WanI2V_Result_00036.mp4",
            "WanI2V_Result_00056.mp4",
            "finalVideo_v42_2025-04-03.mp4"
          ]
        ],
        "force_rate": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 60,
            "step": 1,
            "disable": 0
          }
        ],
        "custom_width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "disable": 0
          }
        ],
        "custom_height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "disable": 0
          }
        ],
        "frame_load_cap": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1,
            "disable": 0
          }
        ],
        "start_time": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "meta_batch": [
          "VHS_BatchManager"
        ],
        "vae": [
          "VAE"
        ],
        "format": [
          [
            "None",
            "AnimateDiff",
            "Mochi",
            "LTXV",
            "Hunyuan",
            "Cosmos",
            "Wan"
          ],
          {
            "default": "AnimateDiff",
            "formats": {
              "None": {},
              "AnimateDiff": {
                "target_rate": 8,
                "dim": [
                  8,
                  0,
                  512,
                  512
                ]
              },
              "Mochi": {
                "target_rate": 24,
                "dim": [
                  16,
                  0,
                  848,
                  480
                ],
                "frames": [
                  6,
                  1
                ]
              },
              "LTXV": {
                "target_rate": 24,
                "dim": [
                  32,
                  0,
                  768,
                  512
                ],
                "frames": [
                  8,
                  1
                ]
              },
              "Hunyuan": {
                "target_rate": 24,
                "dim": [
                  16,
                  0,
                  848,
                  480
                ],
                "frames": [
                  4,
                  1
                ]
              },
              "Cosmos": {
                "target_rate": 24,
                "dim": [
                  16,
                  0,
                  1280,
                  704
                ],
                "frames": [
                  8,
                  1
                ]
              },
              "Wan": {
                "target_rate": 16,
                "dim": [
                  8,
                  0,
                  832,
                  480
                ],
                "frames": [
                  4,
                  1
                ]
              }
            }
          }
        ]
      },
      "hidden": {
        "force_size": "STRING",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "video",
        "force_rate",
        "custom_width",
        "custom_height",
        "frame_load_cap",
        "start_time"
      ],
      "optional": [
        "meta_batch",
        "vae",
        "format"
      ],
      "hidden": [
        "force_size",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "AUDIO",
      "VHS_VIDEOINFO"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "mask",
      "audio",
      "video_info"
    ],
    "name": "VHS_LoadVideoFFmpeg",
    "display_name": "Load Video FFmpeg (Upload) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Load Video FFmpeg \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Loads a video from the input folder using ffmpeg instead of opencv</div></div><div style=\"font-size: 0.8em\">Provides faster execution speed, transparency support, and allows specifying start time in seconds</div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"meta_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">meta_batch: (optional) Connect to a Meta Batch manager to divide extremely long sequences into sub batches. See the documentation for Meta Batch Manager</div></div><div vhs_title=\"vae\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">vae: (optional) If provided the node will output latents instead of images. This drastically reduces the required RAM (not VRAM) when working with long (100+ frames) sequences<div style=\"font-size: 1em\">Using this is strongly encouraged unless connecting to a node that requires a blue image connection such as Apply Controllnet</div></div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE: The loaded images</div></div><div vhs_title=\"mask\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">mask: Transparency data from the loaded video</div></div><div vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">audio: The audio from the loaded video</div></div><div vhs_title=\"video_info\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">video_info: Exposes additional info about the video such as the source frame rate, or the total length</div></div><div vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">LATENT: The loaded images pre-converted to latents. Only available when a vae is connected</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"video\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">video: The video file to be loaded. Lists all files with a video extension in the ComfyUI/Input folder</div></div><div vhs_title=\"force_rate\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">force_rate: Drops or duplicates frames so that the produced output has the target frame rate. Many motion models are trained on videos of a specific frame rate and will give better results if input matches that frame rate. If set to 0, all frames are returned. May give unusual results with inputs that have a variable frame rate like animated gifs. Reducing this value can also greatly reduce the execution time and memory requirements.</div></div><div vhs_title=\"force_size\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">force_size: Previously was used to provide suggested resolutions. Instead, custom_width and custom_height can be disabled by setting to 0.</div></div><div vhs_title=\"custom_width\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">custom_width: Allows for an arbitrary width to be entered, cropping to maintain aspect ratio if both are set</div></div><div vhs_title=\"custom_height\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">custom_height: Allows for an arbitrary height to be entered, cropping to maintain aspect ratio if both are set</div></div><div vhs_title=\"frame_load_cap\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">frame_load_cap: The maximum number of frames to load. If 0, all frames are loaded.</div></div><div vhs_title=\"start_time\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">start_time: A timestamp, in seconds from the start of the video, to start loading frames from. </div></div><div vhs_title=\"format\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">format: Updates other widgets so that only values supported by the given format can be entered and provides recommended defaults.</div></div><div vhs_title=\"choose video to upload\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">choose video to upload: An upload button is provided to upload local files to the input folder</div></div><div vhs_title=\"videopreview\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">videopreview: Displays a preview for the selected video input. If advanced previews is enabled, this preview will reflect the frame_load_cap, force_rate, skip_first_frames, and select_every_nth values chosen. If the video has audio, it will also be previewed when moused over. Additional preview options can be accessed with right click.</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "output_node": false
  },
  "VHS_LoadVideoFFmpegPath": {
    "input": {
      "required": {
        "video": [
          "STRING",
          {
            "placeholder": "X://insert/path/here.mp4",
            "vhs_path_extensions": [
              "webm",
              "mp4",
              "mkv",
              "gif",
              "mov"
            ]
          }
        ],
        "force_rate": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 60,
            "step": 1,
            "disable": 0
          }
        ],
        "custom_width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "disable": 0
          }
        ],
        "custom_height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "disable": 0
          }
        ],
        "frame_load_cap": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1,
            "disable": 0
          }
        ],
        "start_time": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "meta_batch": [
          "VHS_BatchManager"
        ],
        "vae": [
          "VAE"
        ],
        "format": [
          [
            "None",
            "AnimateDiff",
            "Mochi",
            "LTXV",
            "Hunyuan",
            "Cosmos",
            "Wan"
          ],
          {
            "default": "AnimateDiff",
            "formats": {
              "None": {},
              "AnimateDiff": {
                "target_rate": 8,
                "dim": [
                  8,
                  0,
                  512,
                  512
                ]
              },
              "Mochi": {
                "target_rate": 24,
                "dim": [
                  16,
                  0,
                  848,
                  480
                ],
                "frames": [
                  6,
                  1
                ]
              },
              "LTXV": {
                "target_rate": 24,
                "dim": [
                  32,
                  0,
                  768,
                  512
                ],
                "frames": [
                  8,
                  1
                ]
              },
              "Hunyuan": {
                "target_rate": 24,
                "dim": [
                  16,
                  0,
                  848,
                  480
                ],
                "frames": [
                  4,
                  1
                ]
              },
              "Cosmos": {
                "target_rate": 24,
                "dim": [
                  16,
                  0,
                  1280,
                  704
                ],
                "frames": [
                  8,
                  1
                ]
              },
              "Wan": {
                "target_rate": 16,
                "dim": [
                  8,
                  0,
                  832,
                  480
                ],
                "frames": [
                  4,
                  1
                ]
              }
            }
          }
        ]
      },
      "hidden": {
        "force_size": "STRING",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "video",
        "force_rate",
        "custom_width",
        "custom_height",
        "frame_load_cap",
        "start_time"
      ],
      "optional": [
        "meta_batch",
        "vae",
        "format"
      ],
      "hidden": [
        "force_size",
        "unique_id"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "AUDIO",
      "VHS_VIDEOINFO"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "mask",
      "audio",
      "video_info"
    ],
    "name": "VHS_LoadVideoFFmpegPath",
    "display_name": "Load Video FFmpeg (Path) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Load Video FFmpeg (Path) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Loads a video from an arbitrary path using ffmpeg instead of opencv</div></div><div style=\"font-size: 0.8em\">Provides faster execution speed, transparency support, and allows specifying start time in seconds</div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"meta_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">meta_batch: (optional) Connect to a Meta Batch manager to divide extremely long sequences into sub batches. See the documentation for Meta Batch Manager</div></div><div vhs_title=\"vae\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">vae: (optional) If provided the node will output latents instead of images. This drastically reduces the required RAM (not VRAM) when working with long (100+ frames) sequences<div style=\"font-size: 1em\">Using this is strongly encouraged unless connecting to a node that requires a blue image connection such as Apply Controllnet</div></div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE: The loaded images</div></div><div vhs_title=\"mask\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">mask: Transparency data from the loaded video</div></div><div vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">audio: The audio from the loaded video</div></div><div vhs_title=\"video_info\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">video_info: Exposes additional info about the video such as the source frame rate, or the total length</div></div><div vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">LATENT: The loaded images pre-converted to latents. Only available when a vae is connected</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"video\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">video: The video file to be loaded.<div style=\"font-size: 1em\">You can also select an image to load it as a single frame</div><div style=\"font-size: 1em\">This is a VHS_PATH input. When edited, it provides a list of possible valid files or directories</div><div style=\"font-size: 1em\"><video preload=\"none\" src=https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite/assets/4284322/729b7185-1fca-41d8-bc8d-a770bb2a5ce6 muted loop controls controlslist=\"nodownload noremoteplayback noplaybackrate\" style=\"width: 0px; min-width: 100%\" class=\"VHS_loopedvideo\"></div><div style=\"font-size: 1em\">The current top-most completion may be selected with Tab</div><div style=\"font-size: 1em\">You can navigate up a directory by pressing Ctrl+B (or Ctrl+W if supported by browser)</div><div style=\"font-size: 1em\">The filter on suggested file types can be disabled by pressing Ctrl+G.</div><div style=\"font-size: 1em\">If converted to an input, this functions as a string</div></div></div><div vhs_title=\"force_rate\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">force_rate: Drops or duplicates frames so that the produced output has the target frame rate. Many motion models are trained on videos of a specific frame rate and will give better results if input matches that frame rate. If set to 0, all frames are returned. May give unusual results with inputs that have a variable frame rate like animated gifs. Reducing this value can also greatly reduce the execution time and memory requirements.</div></div><div vhs_title=\"force_size\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">force_size: Previously was used to provide suggested resolutions. Instead, custom_width and custom_height can be disabled by setting to 0.</div></div><div vhs_title=\"custom_width\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">custom_width: Allows for an arbitrary width to be entered, cropping to maintain aspect ratio if both are set</div></div><div vhs_title=\"custom_height\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">custom_height: Allows for an arbitrary height to be entered, cropping to maintain aspect ratio if both are set</div></div><div vhs_title=\"frame_load_cap\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">frame_load_cap: The maximum number of frames to load. If 0, all frames are loaded.</div></div><div vhs_title=\"skip_first_frames\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">skip_first_frames: A number of frames which are discarded before producing output.</div></div><div vhs_title=\"select_every_nth\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">select_every_nth: Similar to frame rate. Keeps only the first of every n frames and discard the rest. Has better compatibility with variable frame rate inputs such as gifs. When combined with force_rate, select_every_nth_applies after force_rate so the resulting output has a frame rate equivalent to force_rate/select_every_nth. select_every_nth does not apply to skip_first_frames</div></div><div vhs_title=\"format\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">format: Updates other widgets so that only values supported by the given format can be entered and provides recommended defaults.</div></div><div vhs_title=\"videopreview\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">videopreview: Displays a preview for the selected video input. Will only be shown if Advanced Previews is enabled. This preview will reflect the frame_load_cap, force_rate, skip_first_frames, and select_every_nth values chosen. If the video has audio, it will also be previewed when moused over. Additional preview options can be accessed with right click.</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "output_node": false
  },
  "VHS_LoadImagePath": {
    "input": {
      "required": {
        "image": [
          "STRING",
          {
            "placeholder": "X://insert/path/here.png",
            "vhs_path_extensions": [
              ".tif",
              ".tiff",
              ".bmp",
              ".png",
              ".pgm",
              ".webp",
              ".jpeg",
              ".ppm",
              ".jpg"
            ]
          }
        ],
        "custom_width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 8,
            "disable": 0
          }
        ],
        "custom_height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 8192,
            "step": 8,
            "disable": 0
          }
        ]
      },
      "optional": {
        "vae": [
          "VAE"
        ]
      },
      "hidden": {
        "force_size": "STRING"
      }
    },
    "input_order": {
      "required": [
        "image",
        "custom_width",
        "custom_height"
      ],
      "optional": [
        "vae"
      ],
      "hidden": [
        "force_size"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "mask"
    ],
    "name": "VHS_LoadImagePath",
    "display_name": "Load Image (Path) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Load Image (Path) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Load a single image from a given path</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"vae\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">vae: (optional) If provided the node will output latents instead of images.</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE: The loaded images</div></div><div vhs_title=\"MASK\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">MASK: The alpha channel of the loaded images.</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"image\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">image: The image file to be loaded.<div style=\"font-size: 1em\">This is a VHS_PATH input. When edited, it provides a list of possible valid files or directories</div><div style=\"font-size: 1em\"><video preload=\"none\" src=https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite/assets/4284322/729b7185-1fca-41d8-bc8d-a770bb2a5ce6 muted loop controls controlslist=\"nodownload noremoteplayback noplaybackrate\" style=\"width: 0px; min-width: 100%\" class=\"VHS_loopedvideo\"></div><div style=\"font-size: 1em\">The current top-most completion may be selected with Tab</div><div style=\"font-size: 1em\">You can navigate up a directory by pressing Ctrl+B (or Ctrl+W if supported by browser)</div><div style=\"font-size: 1em\">The filter on suggested file types can be disabled by pressing Ctrl+G.</div><div style=\"font-size: 1em\">If converted to an input, this functions as a string</div></div></div><div vhs_title=\"force_size\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">force_size: Allows for conveniently scaling the input without requiring an additional node. Provides options to maintain aspect ratio or conveniently target common training formats for Animate Diff<div style=\"font-size: 1em\"><div vhs_title=\"custom_width\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">custom_width: Allows for an arbitrary width to be entered, cropping to maintain aspect ratio if both are set</div></div><div vhs_title=\"custom_height\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">custom_height: Allows for an arbitrary height to be entered, cropping to maintain aspect ratio if both are set</div></div></div></div></div><div vhs_title=\"videopreview\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">videopreview: Displays a preview for the selected video input. Will only be shown if Advanced Previews is enabled. This preview will reflect the image_load_cap, skip_first_images, and select_every_nth values chosen. Additional preview options can be accessed with right click.</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "output_node": false
  },
  "VHS_LoadImages": {
    "input": {
      "required": {
        "directory": [
          [
            "3d"
          ]
        ]
      },
      "optional": {
        "image_load_cap": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "skip_first_images": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "select_every_nth": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "meta_batch": [
          "VHS_BatchManager"
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "directory"
      ],
      "optional": [
        "image_load_cap",
        "skip_first_images",
        "select_every_nth",
        "meta_batch"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK",
      "frame_count"
    ],
    "name": "VHS_LoadImages",
    "display_name": "Load Images (Upload) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Load Images \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Loads a sequence of images from a subdirectory of the input folder</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"meta_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">meta_batch: (optional) Connect to a Meta Batch manager to divide extremely long sequences into sub batches. See the documentation for Meta Batch Manager</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE: The loaded images</div></div><div vhs_title=\"MASK\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">MASK: The alpha channel of the loaded images.</div></div><div vhs_title=\"frame_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">frame_count: The length of images just returned</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"directory\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">directory: The directory images will be loaded from. Filtered to process jpg, png, ppm, bmp, tif, and webp files</div></div><div vhs_title=\"image_load_cap\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">image_load_cap: The maximum number of images to load. If 0, all images are loaded.</div></div><div vhs_title=\"start_time\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">start_time: A timestamp, in seconds from the start of the video, to start loading frames from. </div></div><div vhs_title=\"choose folder to upload\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">choose folder to upload: An upload button is provided to upload a local folder containing images to the input folder</div></div><div vhs_title=\"videopreview\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">videopreview: Displays a preview for the selected video input. Will only be shown if Advanced Previews is enabled. This preview will reflect the image_load_cap, skip_first_images, and select_every_nth values chosen. Additional preview options can be accessed with right click.</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "output_node": false
  },
  "VHS_LoadImagesPath": {
    "input": {
      "required": {
        "directory": [
          "STRING",
          {
            "placeholder": "X://path/to/images",
            "vhs_path_extensions": []
          }
        ]
      },
      "optional": {
        "image_load_cap": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "skip_first_images": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "select_every_nth": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "meta_batch": [
          "VHS_BatchManager"
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "directory"
      ],
      "optional": [
        "image_load_cap",
        "skip_first_images",
        "select_every_nth",
        "meta_batch"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK",
      "frame_count"
    ],
    "name": "VHS_LoadImagesPath",
    "display_name": "Load Images (Path) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Load Images (Path) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Loads a sequence of images from an arbitrary path</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"meta_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">meta_batch: (optional) Connect to a Meta Batch manager to divide extremely long sequences into sub batches. See the documentation for Meta Batch Manager</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE: The loaded images</div></div><div vhs_title=\"MASK\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">MASK: The alpha channel of the loaded images.</div></div><div vhs_title=\"frame_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">frame_count: The length of images just returned</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"directory\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">directory: The directory images will be loaded from. Filtered to process jpg, png, ppm, bmp, tif, and webp files<div style=\"font-size: 1em\">This is a VHS_PATH input. When edited, it provides a list of possible valid files or directories</div><div style=\"font-size: 1em\"><video preload=\"none\" src=https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite/assets/4284322/729b7185-1fca-41d8-bc8d-a770bb2a5ce6 muted loop controls controlslist=\"nodownload noremoteplayback noplaybackrate\" style=\"width: 0px; min-width: 100%\" class=\"VHS_loopedvideo\"></div><div style=\"font-size: 1em\">The current top-most completion may be selected with Tab</div><div style=\"font-size: 1em\">You can navigate up a directory by pressing Ctrl+B (or Ctrl+W if supported by browser)</div><div style=\"font-size: 1em\">The filter on suggested file types can be disabled by pressing Ctrl+G.</div><div style=\"font-size: 1em\">If converted to an input, this functions as a string</div></div></div><div vhs_title=\"image_load_cap\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">image_load_cap: The maximum number of images to load. If 0, all images are loaded.</div></div><div vhs_title=\"skip_first_images\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">skip_first_images: A number of images which are discarded before producing output.</div></div><div vhs_title=\"select_every_nth\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">select_every_nth: Keeps only the first of every n frames and discard the rest.</div></div><div vhs_title=\"videopreview\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">videopreview: Displays a preview for the selected video input. Will only be shown if Advanced Previews is enabled. This preview will reflect the image_load_cap, skip_first_images, and select_every_nth values chosen. Additional preview options can be accessed with right click.</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "output_node": false
  },
  "VHS_LoadAudio": {
    "input": {
      "required": {
        "audio_file": [
          "STRING",
          {
            "default": "input/",
            "vhs_path_extensions": [
              "wav",
              "mp3",
              "ogg",
              "m4a",
              "flac"
            ]
          }
        ]
      },
      "optional": {
        "seek_seconds": [
          "FLOAT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "duration": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 10000000,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "audio_file"
      ],
      "optional": [
        "seek_seconds",
        "duration"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "audio"
    ],
    "name": "VHS_LoadAudio",
    "display_name": "Load Audio (Path)\ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Load Audio (Path) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Loads an audio file from an arbitrary path</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">audio: The loaded audio</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"audio_file\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">audio_file: The audio file to be loaded.<div style=\"font-size: 1em\">This is a VHS_PATH input. When edited, it provides a list of possible valid files or directories</div><div style=\"font-size: 1em\"><video preload=\"none\" src=https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite/assets/4284322/729b7185-1fca-41d8-bc8d-a770bb2a5ce6 muted loop controls controlslist=\"nodownload noremoteplayback noplaybackrate\" style=\"width: 0px; min-width: 100%\" class=\"VHS_loopedvideo\"></div><div style=\"font-size: 1em\">The current top-most completion may be selected with Tab</div><div style=\"font-size: 1em\">You can navigate up a directory by pressing Ctrl+B (or Ctrl+W if supported by browser)</div><div style=\"font-size: 1em\">The filter on suggested file types can be disabled by pressing Ctrl+G.</div><div style=\"font-size: 1em\">If converted to an input, this functions as a string</div></div></div><div vhs_title=\"seek_seconds\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">seek_seconds: An offset from the start of the sound file that the audio should start from</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/audio",
    "output_node": false
  },
  "VHS_LoadAudioUpload": {
    "input": {
      "required": {
        "audio": [
          [
            "1.mp4",
            "2.mp4",
            "3.mp4",
            "4.mp4",
            "5.mp4",
            "6.mp4",
            "WanI2V_Result_00016.mp4",
            "WanI2V_Result_00036.mp4",
            "WanI2V_Result_00056.mp4",
            "finalVideo_v42_2025-04-03.mp4"
          ]
        ],
        "start_time": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 10000000,
            "step": 0.01
          }
        ],
        "duration": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 10000000,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "audio",
        "start_time",
        "duration"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "audio"
    ],
    "name": "VHS_LoadAudioUpload",
    "display_name": "Load Audio (Upload)\ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Load Audio (Upload) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Loads an audio file from the input directory</div></div><div style=\"font-size: 0.8em\">Very similar in functionality to the built-in LoadAudio. It was originally added before VHS swapped to use Comfy's internal AUDIO format, but provides the additional options for start time and duration</div><div style=\"font-size: 0.8em\"><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">audio: The loaded audio</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">audio: The audio file to be loaded.</div></div><div vhs_title=\"start_time\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">start_time: An offset from the start of the sound file that the audio should start from</div></div><div vhs_title=\"duration\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">duration: A maximum limit for the audio. Disabled if 0</div></div><div vhs_title=\"choose audio to upload\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">choose audio to upload: An upload button is provided to upload an audio file to the input folder</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/audio",
    "output_node": false
  },
  "VHS_AudioToVHSAudio": {
    "input": {
      "required": {
        "audio": [
          "AUDIO"
        ]
      }
    },
    "input_order": {
      "required": [
        "audio"
      ]
    },
    "output": [
      "VHS_AUDIO"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "vhs_audio"
    ],
    "name": "VHS_AudioToVHSAudio",
    "display_name": "Audio to legacy VHS_AUDIO\ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Audio to legacy VHS_AUDIO \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>utility function for compatibility with external nodes</div></div><div style=\"font-size: 0.8em\">VHS used to use an internal VHS_AUDIO format for routing audio between inputs and outputs. This format was intended to only be used internally and was designed with a focus on performance over ease of use. Since ComfyUI now has an internal AUDIO format, VHS now uses this format. However, some custom node packs were made that are external to both ComfyUI and VHS that use VHS_AUDIO. This node was added so that those external nodes can still function</div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">audio: An input in the standardized AUDIO format</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"vhs_audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">vhs_audio: An output in the legacy VHS_AUDIO format for use with external nodes</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/audio",
    "output_node": false
  },
  "VHS_VHSAudioToAudio": {
    "input": {
      "required": {
        "vhs_audio": [
          "VHS_AUDIO"
        ]
      }
    },
    "input_order": {
      "required": [
        "vhs_audio"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "audio"
    ],
    "name": "VHS_VHSAudioToAudio",
    "display_name": "Legacy VHS_AUDIO to Audio\ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Legacy VHS_AUDIO to Audio \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>utility function for compatibility with external nodes</div></div><div style=\"font-size: 0.8em\">VHS used to use an internal VHS_AUDIO format for routing audio between inputs and outputs. This format was intended to only be used internally and was designed with a focus on performance over ease of use. Since ComfyUI now has an internal AUDIO format, VHS now uses this format. However, some custom node packs were made that are external to both ComfyUI and VHS that use VHS_AUDIO. This node was added so that those external nodes can still function</div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"vhs_audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">vhs_audio: An input in the legacy VHS_AUDIO format produced by an external node</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"vhs_audio\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">vhs_audio: An output in the standardized AUDIO format</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/audio",
    "output_node": false
  },
  "VHS_PruneOutputs": {
    "input": {
      "required": {
        "filenames": [
          "VHS_FILENAMES"
        ],
        "options": [
          [
            "Intermediate",
            "Intermediate and Utility"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "filenames",
        "options"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "VHS_PruneOutputs",
    "display_name": "Prune Outputs \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Prune Outputs \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Automates deletion of undesired outputs from a Video Combine node.</div></div><div style=\"font-size: 0.8em\">Video Combine produces a number of file outputs in addition to the final output. Some of these, such as a video file without audio included, are implementation limitations and are not feasible to solve. As an alternative, the Prune Outputs node is added to automate the deletion of these file outputs if they are not desired</div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"filenames\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">filenames: A connection from a Video Combine node to indicate which outputs should be pruned</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"options\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">options: Which files should be deleted<div style=\"font-size: 1em\"><div vhs_title=\"Intermediate\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Intermediate: Delete any files that were required for intermediate processing but are not the final output, like the no-audio output file when audio is included</div></div><div vhs_title=\"Intermediate and Utility\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Intermediate and Utility: Delete all produced files that aren't the final output, including the first frame png</div></div></div></div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "output_node": true
  },
  "VHS_BatchManager": {
    "input": {
      "required": {
        "frames_per_batch": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "max": 9007199254740991,
            "step": 1
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "frames_per_batch"
      ],
      "hidden": [
        "prompt",
        "unique_id"
      ]
    },
    "output": [
      "VHS_BatchManager"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "meta_batch"
    ],
    "name": "VHS_BatchManager",
    "display_name": "Meta Batch Manager \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Meta Batch Manager \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Split the processing of a very long video into sets of smaller Meta Batches</div></div><div style=\"font-size: 0.8em\">The Meta Batch Manager allows for extremely long input videos to be processed when all other methods for fitting the content in RAM fail. It does not effect VRAM usage.</div><div style=\"font-size: 0.8em\">It must be connected to at least one Input (a Load Video or Load Images) AND at least one Video Combine</div><div style=\"font-size: 0.8em\"><img src=https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite/assets/4284322/7cb3fb7e-59d8-4cb2-a09f-9c6698de8b1f loading=lazy style=\"width: 0px; min-width: 100%\"></div><div style=\"font-size: 0.8em\">It functions by holding both the inputs and ouputs open between executions, and automatically requeue's the workflow until one of the inputs is unable to provide additional images.</div><div style=\"font-size: 0.8em\">Because each sub execution only contains a subset of the total frames, each sub execution creates a hard window which temporal smoothing can not be applied across. This results in jumps in the output.</div><div style=\"font-size: 0.8em\"><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"meta_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">meta_batch: Add all connected nodes to this Meta Batch</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"frames_per_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">frames_per_batch: How many frames to process for each sub execution. If loading as image, each frame will use about 50MB of RAM (not VRAM), and this can safely be set in the 100-1000 range, depending on available memory. When loading and combining from latent space (no blue image noodles exist), this value can be much higher, around the 2,000 to 20,000 range</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "output_node": false
  },
  "VHS_VideoInfo": {
    "input": {
      "required": {
        "video_info": [
          "VHS_VIDEOINFO"
        ]
      }
    },
    "input_order": {
      "required": [
        "video_info"
      ]
    },
    "output": [
      "FLOAT",
      "INT",
      "FLOAT",
      "INT",
      "INT",
      "FLOAT",
      "INT",
      "FLOAT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "source_fps\ud83d\udfe8",
      "source_frame_count\ud83d\udfe8",
      "source_duration\ud83d\udfe8",
      "source_width\ud83d\udfe8",
      "source_height\ud83d\udfe8",
      "loaded_fps\ud83d\udfe6",
      "loaded_frame_count\ud83d\udfe6",
      "loaded_duration\ud83d\udfe6",
      "loaded_width\ud83d\udfe6",
      "loaded_height\ud83d\udfe6"
    ],
    "name": "VHS_VideoInfo",
    "display_name": "Video Info \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Video Info \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Splits information on a video into a numerous outputs</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"video_info\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">video_info: A connection to a Load Video node</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"source_fps\ud83d\udfe8\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">source_fps\ud83d\udfe8: The frame rate of the video</div></div><div vhs_title=\"source_frame_count\ud83d\udfe8\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">source_frame_count\ud83d\udfe8: How many total frames the video contains before accounting for frame rate or select_every_nth</div></div><div vhs_title=\"source_duration\ud83d\udfe8\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">source_duration\ud83d\udfe8: The length of images just returned in seconds</div></div><div vhs_title=\"source_width\ud83d\udfe8\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">source_width\ud83d\udfe8: The width</div></div><div vhs_title=\"source_height\ud83d\udfe8\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">source_height\ud83d\udfe8: The height</div></div><div vhs_title=\"loaded_fps\ud83d\udfe6\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">loaded_fps\ud83d\udfe6: The frame rate after accounting for force_rate and select_every_nth. This output is of particular use as it can be connected to the converted frame_rate input of a Video Combine node to ensure audio remains synchronized.</div></div><div vhs_title=\"loaded_frame_count\ud83d\udfe6\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">loaded_frame_count\ud83d\udfe6: The number of frames returned by the current execution. Identical to the frame_count returned by the node itself</div></div><div vhs_title=\"loaded_duration\ud83d\udfe6\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">loaded_duration\ud83d\udfe6: The duration in seconds of returned images after accounting for frame_load_cap</div></div><div vhs_title=\"loaded_width\ud83d\udfe6\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">loaded_width\ud83d\udfe6: The width of the video after scaling. These coordinates are in image space even if loading to latent space</div></div><div vhs_title=\"loaded_height\ud83d\udfe6\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">loaded_height\ud83d\udfe6: The height of the video after scaling. These coordinates are in image space even if loading to latent space</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "output_node": false
  },
  "VHS_VideoInfoSource": {
    "input": {
      "required": {
        "video_info": [
          "VHS_VIDEOINFO"
        ]
      }
    },
    "input_order": {
      "required": [
        "video_info"
      ]
    },
    "output": [
      "FLOAT",
      "INT",
      "FLOAT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "fps\ud83d\udfe8",
      "frame_count\ud83d\udfe8",
      "duration\ud83d\udfe8",
      "width\ud83d\udfe8",
      "height\ud83d\udfe8"
    ],
    "name": "VHS_VideoInfoSource",
    "display_name": "Video Info (Source) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Video Info Source \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Splits information on a video into a numerous outputs describing the file itself without accounting for load options</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"video_info\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">video_info: A connection to a Load Video node</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"source_fps\ud83d\udfe8\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">source_fps\ud83d\udfe8: The frame rate of the video</div></div><div vhs_title=\"source_frame_count\ud83d\udfe8\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">source_frame_count\ud83d\udfe8: How many total frames the video contains before accounting for frame rate or select_every_nth</div></div><div vhs_title=\"source_duration\ud83d\udfe8\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">source_duration\ud83d\udfe8: The length of images just returned in seconds</div></div><div vhs_title=\"source_width\ud83d\udfe8\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">source_width\ud83d\udfe8: The original width</div></div><div vhs_title=\"source_height\ud83d\udfe8\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">source_height\ud83d\udfe8: The original height</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "output_node": false
  },
  "VHS_VideoInfoLoaded": {
    "input": {
      "required": {
        "video_info": [
          "VHS_VIDEOINFO"
        ]
      }
    },
    "input_order": {
      "required": [
        "video_info"
      ]
    },
    "output": [
      "FLOAT",
      "INT",
      "FLOAT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "fps\ud83d\udfe6",
      "frame_count\ud83d\udfe6",
      "duration\ud83d\udfe6",
      "width\ud83d\udfe6",
      "height\ud83d\udfe6"
    ],
    "name": "VHS_VideoInfoLoaded",
    "display_name": "Video Info (Loaded) \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Video Info Loaded \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Splits information on a video into a numerous outputs describing the file itself after accounting for load options</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"video_info\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">video_info: A connection to a Load Video node</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"loaded_fps\ud83d\udfe6\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">loaded_fps\ud83d\udfe6: The frame rate after accounting for force_rate and select_every_nth. This output is of particular use as it can be connected to the converted frame_rate input of a Video Combine node to ensure audio remains synchronized.</div></div><div vhs_title=\"loaded_frame_count\ud83d\udfe6\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">loaded_frame_count\ud83d\udfe6: The number of frames returned by the current execution. Identical to the frame_count returned by the node itself</div></div><div vhs_title=\"loaded_duration\ud83d\udfe6\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">loaded_duration\ud83d\udfe6: The duration in seconds of returned images after accounting for frame_load_cap</div></div><div vhs_title=\"loaded_width\ud83d\udfe6\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">loaded_width\ud83d\udfe6: The width of the video after scaling. This is the dimension of the corresponding image even if loading as a latent directly</div></div><div vhs_title=\"loaded_height\ud83d\udfe6\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">loaded_height\ud83d\udfe6: The height of the video after scaling. This is the dimension of the corresponding image even if loading as a latent directly</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "output_node": false
  },
  "VHS_SelectFilename": {
    "input": {
      "required": {
        "filenames": [
          "VHS_FILENAMES"
        ],
        "index": [
          "INT",
          {
            "default": -1,
            "step": 1,
            "min": -1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "filenames",
        "index"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "Filename"
    ],
    "name": "VHS_SelectFilename",
    "display_name": "Select Filename \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "VAE Select Filename \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Select a single filename from the VHS_FILENAMES output by a Video Combine and return it as a string</div></div><div style=\"font-size: 0.8em\">Take care when combining this node with Prune Outputs. The VHS_FILENAMES object is immutable and will always contain the full list of output files, but execution order is undefined behavior (currently, Prune Outputs will generally execute first) and SelectFilename may return a path to a file that no longer exists.</div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"filenames\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">filenames: A VHS_FILENAMES from a Video Combine node</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"filename\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">filename: A string representation of the full output path for the chosen file</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"index\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">index: The index of which file should be selected. The default, -1, chooses the most complete output</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "output_node": false
  },
  "VHS_VAEEncodeBatched": {
    "input": {
      "required": {
        "pixels": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "per_batch": [
          "INT",
          {
            "default": 16,
            "min": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pixels",
        "vae",
        "per_batch"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "VHS_VAEEncodeBatched",
    "display_name": "VAE Encode Batched \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "VAE Encode Batched \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Encode images as latents with a manually specified batch size.</div></div><div style=\"font-size: 0.8em\">Some people have ran into VRAM issues when encoding or decoding large batches of images. As a workaround, this node lets you manually set a batch size when encoding images.</div><div style=\"font-size: 0.8em\">Unless these issues have been encountered, it is simpler to use the native VAE Encode or to encode directly from a Load Video</div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"pixels\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">pixels: The images to be encoded.</div></div><div vhs_title=\"vae\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">vae: The VAE to use when encoding.</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">LATENT: The encoded latents.</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"per_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">per_batch: The maximum number of images to encode in each batch.</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/batched nodes",
    "output_node": false
  },
  "VHS_VAEDecodeBatched": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "vae": [
          "VAE"
        ],
        "per_batch": [
          "INT",
          {
            "default": 16,
            "min": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "vae",
        "per_batch"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "VHS_VAEDecodeBatched",
    "display_name": "VAE Decode Batched \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "VAE Decode Batched \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Decode latents to images with a manually specified batch size</div></div><div style=\"font-size: 0.8em\">Some people have ran into VRAM issues when encoding or decoding large batches of images. As a workaround, this node lets you manually set a batch size when decoding latents.</div><div style=\"font-size: 0.8em\">Unless these issues have been encountered, it is simpler to use the native VAE Decode or to decode from a Video Combine directly</div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"samples\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">samples: The latents to be decoded.</div></div><div vhs_title=\"vae\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">vae: The VAE to use when decoding.</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE: The decoded images.</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"per_batch\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">per_batch: The maximum number of images to decode in each batch.</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/batched nodes",
    "output_node": false
  },
  "VHS_SplitLatents": {
    "input": {
      "required": {
        "latents": [
          "LATENT"
        ],
        "split_index": [
          "INT",
          {
            "default": 0,
            "step": 1,
            "min": -9007199254740991,
            "max": 9007199254740991
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latents",
        "split_index"
      ]
    },
    "output": [
      "LATENT",
      "INT",
      "LATENT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "LATENT_A",
      "A_count",
      "LATENT_B",
      "B_count"
    ],
    "name": "VHS_SplitLatents",
    "display_name": "Split Latents \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Split Latents \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Split a set of latents into two groups</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"latents\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">latents: The latents to be split.</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"LATENT_A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">LATENT_A: The first group of latents</div></div><div vhs_title=\"A_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">A_count: The number of latents in group A. This will be equal to split_index unless the latents input has length less than split_index</div></div><div vhs_title=\"LATENT_B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">LATENT_B: The second group of latents</div></div><div vhs_title=\"B_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">B_count: The number of latents in group B</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"split_index\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">split_index: The index of the first latent that will be in the second output groups.</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/latent",
    "output_node": false
  },
  "VHS_SplitImages": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "split_index": [
          "INT",
          {
            "default": 0,
            "step": 1,
            "min": -9007199254740991,
            "max": 9007199254740991
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "split_index"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE_A",
      "A_count",
      "IMAGE_B",
      "B_count"
    ],
    "name": "VHS_SplitImages",
    "display_name": "Split Images \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Split Images \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Split a set of images into two groups</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"images\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">images: The images to be split.</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"IMAGE_A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE_A: The first group of images</div></div><div vhs_title=\"A_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">A_count: The number of images in group A. This will be equal to split_index unless the images input has length less than split_index</div></div><div vhs_title=\"IMAGE_B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE_B: The second group of images</div></div><div vhs_title=\"B_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">B_count: The number of images in group B</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"split_index\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">split_index: The index of the first latent that will be in the second output groups.</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/image",
    "output_node": false
  },
  "VHS_SplitMasks": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "split_index": [
          "INT",
          {
            "default": 0,
            "step": 1,
            "min": -9007199254740991,
            "max": 9007199254740991
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "split_index"
      ]
    },
    "output": [
      "MASK",
      "INT",
      "MASK",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MASK_A",
      "A_count",
      "MASK_B",
      "B_count"
    ],
    "name": "VHS_SplitMasks",
    "display_name": "Split Masks \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Split Masks \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Split a set of masks into two groups</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"mask\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">mask: The masks to be split.</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"MASK_A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">MASK_A: The first group of masks</div></div><div vhs_title=\"A_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">A_count: The number of masks in group A. This will be equal to split_index unless the mask input has length less than split_index</div></div><div vhs_title=\"MASK_B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">MASK_B: The second group of masks</div></div><div vhs_title=\"B_count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">B_count: The number of masks in group B</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"split_index\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">split_index: The index of the first latent that will be in the second output groups.</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/mask",
    "output_node": false
  },
  "VHS_MergeLatents": {
    "input": {
      "required": {
        "latents_A": [
          "LATENT"
        ],
        "latents_B": [
          "LATENT"
        ],
        "merge_strategy": [
          [
            "match A",
            "match B",
            "match smaller",
            "match larger"
          ]
        ],
        "scale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "bislerp"
          ]
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "latents_A",
        "latents_B",
        "merge_strategy",
        "scale_method",
        "crop"
      ]
    },
    "output": [
      "LATENT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "count"
    ],
    "name": "VHS_MergeLatents",
    "display_name": "Merge Latents \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Merge Latents \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Combine two groups of latents into a single group of latents</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"latents_A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">latents_A: The first group of latents</div></div><div vhs_title=\"latents_B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">latents_B: The first group of latents</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">LATENT: The combined group of latents</div></div><div vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">count: The length of the combined group</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"merge_strategy\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">merge_strategy: Determines what the output resolution will be if input resolutions don't match<div style=\"font-size: 1em\"><div vhs_title=\"match A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">match A: Always use the resolution for A</div></div><div vhs_title=\"match B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">match B: Always use the resolution for B</div></div><div vhs_title=\"match smaller\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">match smaller: Pick the smaller resolution by area</div></div><div vhs_title=\"match larger\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">match larger: Pick the larger resolution by area</div></div></div></div></div><div vhs_title=\"scale_method\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">scale_method: Determines what method to use if scaling is required</div></div><div vhs_title=\"crop\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">crop: When sizes don't match, should the resized image have it's aspect ratio changed, or be cropped to maintain aspect ratio</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/latent",
    "output_node": false
  },
  "VHS_MergeImages": {
    "input": {
      "required": {
        "images_A": [
          "IMAGE"
        ],
        "images_B": [
          "IMAGE"
        ],
        "merge_strategy": [
          [
            "match A",
            "match B",
            "match smaller",
            "match larger"
          ]
        ],
        "scale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "bislerp"
          ]
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "images_A",
        "images_B",
        "merge_strategy",
        "scale_method",
        "crop"
      ]
    },
    "output": [
      "IMAGE",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "count"
    ],
    "name": "VHS_MergeImages",
    "display_name": "Merge Images \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Merge Images \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Combine two groups of images into a single group of images</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"images_A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">images_A: The first group of images</div></div><div vhs_title=\"images_B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">images_B: The first group of images</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE: The combined group of images</div></div><div vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">count: The length of the combined group</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"merge_strategy\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">merge_strategy: Determines what the output resolution will be if input resolutions don't match<div style=\"font-size: 1em\"><div vhs_title=\"match A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">match A: Always use the resolution for A</div></div><div vhs_title=\"match B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">match B: Always use the resolution for B</div></div><div vhs_title=\"match smaller\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">match smaller: Pick the smaller resolution by area</div></div><div vhs_title=\"match larger\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">match larger: Pick the larger resolution by area</div></div></div></div></div><div vhs_title=\"scale_method\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">scale_method: Determines what method to use if scaling is required</div></div><div vhs_title=\"crop\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">crop: When sizes don't match, should the resized image have it's aspect ratio changed, or be cropped to maintain aspect ratio</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/image",
    "output_node": false
  },
  "VHS_MergeMasks": {
    "input": {
      "required": {
        "mask_A": [
          "MASK"
        ],
        "mask_B": [
          "MASK"
        ],
        "merge_strategy": [
          [
            "match A",
            "match B",
            "match smaller",
            "match larger"
          ]
        ],
        "scale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "bislerp"
          ]
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mask_A",
        "mask_B",
        "merge_strategy",
        "scale_method",
        "crop"
      ]
    },
    "output": [
      "MASK",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MASK",
      "count"
    ],
    "name": "VHS_MergeMasks",
    "display_name": "Merge Masks \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Merge Masks \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Combine two groups of masks into a single group of masks</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"mask_A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">mask_A: The first group of masks</div></div><div vhs_title=\"mask_B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">mask_B: The first group of masks</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"MASK\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">MASK: The combined group of masks</div></div><div vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">count: The length of the combined group</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"merge_strategy\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">merge_strategy: Determines what the output resolution will be if input resolutions don't match<div style=\"font-size: 1em\"><div vhs_title=\"match A\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">match A: Always use the resolution for A</div></div><div vhs_title=\"match B\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">match B: Always use the resolution for B</div></div><div vhs_title=\"match smaller\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">match smaller: Pick the smaller resolution by area</div></div><div vhs_title=\"match larger\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">match larger: Pick the larger resolution by area</div></div></div></div></div><div vhs_title=\"scale_method\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">scale_method: Determines what method to use if scaling is required</div></div><div vhs_title=\"crop\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">crop: When sizes don't match, should the resized image have it's aspect ratio changed, or be cropped to maintain aspect ratio</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/mask",
    "output_node": false
  },
  "VHS_GetLatentCount": {
    "input": {
      "required": {
        "latents": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "latents"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "count"
    ],
    "name": "VHS_GetLatentCount",
    "display_name": "Get Latent Count \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Get Latent Count \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Return the number of latents in an input as an INT</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"latents\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">latents: The input latent</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">count: The number of latents in the input</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/latent",
    "output_node": false
  },
  "VHS_GetImageCount": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "count"
    ],
    "name": "VHS_GetImageCount",
    "display_name": "Get Image Count \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Get Image Count \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Return the number of images in an input as an INT</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"images\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">images: The input image</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">count: The number of images in the input</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/image",
    "output_node": false
  },
  "VHS_GetMaskCount": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "count"
    ],
    "name": "VHS_GetMaskCount",
    "display_name": "Get Mask Count \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Get Mask Count \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Return the number of masks in an input as an INT</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"masks\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">masks: The input mask</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">count: The number of masks in the input</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/mask",
    "output_node": false
  },
  "VHS_DuplicateLatents": {
    "input": {
      "required": {
        "latents": [
          "LATENT"
        ],
        "multiply_by": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9007199254740991,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latents",
        "multiply_by"
      ]
    },
    "output": [
      "LATENT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "count"
    ],
    "name": "VHS_DuplicateLatents",
    "display_name": "Repeat Latents \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Repeat Latents \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Append copies of a latent to itself so it repeats</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"latents\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">latents: The latents to be repeated</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">LATENT: The latent with repeats</div></div><div vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">count: The number of latents in the output. Equal to the length of the input latent * multiply_by</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"multiply_by\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">multiply_by: Controls the number of times the latent should repeat. 1, the default, means no change.</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/latent",
    "output_node": false
  },
  "VHS_DuplicateImages": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "multiply_by": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9007199254740991,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "multiply_by"
      ]
    },
    "output": [
      "IMAGE",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "count"
    ],
    "name": "VHS_DuplicateImages",
    "display_name": "Repeat Images \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Repeat Images \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Append copies of a image to itself so it repeats</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"IMAGES\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGES: The image to be repeated</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE: The image with repeats</div></div><div vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">count: The number of image in the output. Equal to the length of the input image * multiply_by</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"multiply_by\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">multiply_by: Controls the number of times the mask should repeat. 1, the default, means no change.</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/image",
    "output_node": false
  },
  "VHS_DuplicateMasks": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "multiply_by": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9007199254740991,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "multiply_by"
      ]
    },
    "output": [
      "MASK",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MASK",
      "count"
    ],
    "name": "VHS_DuplicateMasks",
    "display_name": "Repeat Masks \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Repeat Masks \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Append copies of a mask to itself so it repeats</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"masks\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">masks: The masks to be repeated</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">LATENT: The mask with repeats</div></div><div vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">count: The number of mask in the output. Equal to the length of the input mask * multiply_by</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"multiply_by\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">multiply_by: Controls the number of times the mask should repeat. 1, the default, means no change.</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/mask",
    "output_node": false
  },
  "VHS_SelectEveryNthLatent": {
    "input": {
      "required": {
        "latents": [
          "LATENT"
        ],
        "select_every_nth": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "skip_first_latents": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latents",
        "select_every_nth",
        "skip_first_latents"
      ]
    },
    "output": [
      "LATENT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "count"
    ],
    "name": "VHS_SelectEveryNthLatent",
    "display_name": "Select Every Nth Latent \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Select Every Nth Latent \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Keep only 1 latent for every interval</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"latents\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">latents: The input latent</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"LATENT\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">LATENT: The output latents</div></div><div vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">count: The number of latents in the input</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"select_every_nth\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">select_every_nth: The interval from which one frame is kept. 1 means no frames are skipped.</div></div><div vhs_title=\"skip_first_latents\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">skip_first_latents: A number of frames which that is skipped from the start. This applies before select_every_nth. As a result, multiple copies of the node can each have a different skip_first_frames to divide the latent into groups</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/latent",
    "output_node": false
  },
  "VHS_SelectEveryNthImage": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "select_every_nth": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "skip_first_images": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "select_every_nth",
        "skip_first_images"
      ]
    },
    "output": [
      "IMAGE",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "count"
    ],
    "name": "VHS_SelectEveryNthImage",
    "display_name": "Select Every Nth Image \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Select Every Nth Image \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Keep only 1 image for every interval</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"images\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">images: The input image</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"IMAGE\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">IMAGE: The output images</div></div><div vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">count: The number of images in the input</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"select_every_nth\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">select_every_nth: The interval from which one frame is kept. 1 means no frames are skipped.</div></div><div vhs_title=\"skip_first_images\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">skip_first_images: A number of frames which that is skipped from the start. This applies before select_every_nth. As a result, multiple copies of the node can each have a different skip_first_frames to divide the image into groups</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/image",
    "output_node": false
  },
  "VHS_SelectEveryNthMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "select_every_nth": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 9007199254740991,
            "step": 1
          }
        ],
        "skip_first_masks": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9007199254740991,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "select_every_nth",
        "skip_first_masks"
      ]
    },
    "output": [
      "MASK",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MASK",
      "count"
    ],
    "name": "VHS_SelectEveryNthMask",
    "display_name": "Select Every Nth Mask \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Select Every Nth Mask \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Keep only 1 mask for every interval</div></div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"mask\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">mask: The input mask</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"MASK\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">MASK: The output mask</div></div><div vhs_title=\"count\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">count: The number of mask in the input</div></div></div></div><div vhs_title=\"Widgets\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Widgets: <div vhs_title=\"select_every_nth\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">select_every_nth: The interval from which one frame is kept. 1 means no frames are skipped.</div></div><div vhs_title=\"skip_first_mask\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">skip_first_mask: A number of frames which that is skipped from the start. This applies before select_every_nth. As a result, multiple copies of the node can each have a different skip_first_frames to divide the mask into groups</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/mask",
    "output_node": false
  },
  "VHS_SelectLatents": {
    "input": {
      "required": {
        "latent": [
          "LATENT"
        ],
        "indexes": [
          "STRING",
          {
            "default": "0"
          }
        ],
        "err_if_missing": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "err_if_empty": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latent",
        "indexes",
        "err_if_missing",
        "err_if_empty"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "VHS_SelectLatents",
    "display_name": "Select Latents \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Use comma-separated indexes to select items in the given order.\nSupports negative indexes, python-style ranges (end index excluded),\nas well as range step.\n\nAcceptable entries (assuming 16 items provided, so idxs 0 to 15 exist):\n0         -> Returns [0]\n-1        -> Returns [15]\n0, 1, 13  -> Returns [0, 1, 13]\n0:5, 13   -> Returns [0, 1, 2, 3, 4, 13]\n0:-1      -> Returns [0, 1, 2, ..., 13, 14]\n0:5:-1    -> Returns [4, 3, 2, 1, 0]\n0:5:2     -> Returns [0, 2, 4]\n::-1     -> Returns [15, 14, 13, ..., 2, 1, 0]\n",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/latent",
    "output_node": false
  },
  "VHS_SelectImages": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "indexes": [
          "STRING",
          {
            "default": "0"
          }
        ],
        "err_if_missing": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "err_if_empty": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "indexes",
        "err_if_missing",
        "err_if_empty"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "VHS_SelectImages",
    "display_name": "Select Images \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Use comma-separated indexes to select items in the given order.\nSupports negative indexes, python-style ranges (end index excluded),\nas well as range step.\n\nAcceptable entries (assuming 16 items provided, so idxs 0 to 15 exist):\n0         -> Returns [0]\n-1        -> Returns [15]\n0, 1, 13  -> Returns [0, 1, 13]\n0:5, 13   -> Returns [0, 1, 2, 3, 4, 13]\n0:-1      -> Returns [0, 1, 2, ..., 13, 14]\n0:5:-1    -> Returns [4, 3, 2, 1, 0]\n0:5:2     -> Returns [0, 2, 4]\n::-1     -> Returns [15, 14, 13, ..., 2, 1, 0]\n",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/image",
    "output_node": false
  },
  "VHS_SelectMasks": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "indexes": [
          "STRING",
          {
            "default": "0"
          }
        ],
        "err_if_missing": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "err_if_empty": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "indexes",
        "err_if_missing",
        "err_if_empty"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "VHS_SelectMasks",
    "display_name": "Select Masks \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Use comma-separated indexes to select items in the given order.\nSupports negative indexes, python-style ranges (end index excluded),\nas well as range step.\n\nAcceptable entries (assuming 16 items provided, so idxs 0 to 15 exist):\n0         -> Returns [0]\n-1        -> Returns [15]\n0, 1, 13  -> Returns [0, 1, 13]\n0:5, 13   -> Returns [0, 1, 2, 3, 4, 13]\n0:-1      -> Returns [0, 1, 2, ..., 13, 14]\n0:5:-1    -> Returns [4, 3, 2, 1, 0]\n0:5:2     -> Returns [0, 2, 4]\n::-1     -> Returns [15, 14, 13, ..., 2, 1, 0]\n",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62/mask",
    "output_node": false
  },
  "VHS_Unbatch": {
    "input": {
      "required": {
        "batched": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "batched"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "unbatched"
    ],
    "name": "VHS_Unbatch",
    "display_name": "Unbatch \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Unbatch \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Unbatch a list of items into a single concatenated item</div></div><div style=\"font-size: 0.8em\">Useful for when you want a single video output from a complex workflow</div><div style=\"font-size: 0.8em\">Has no relation to the Meta Batch system of VHS</div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"batched\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">batched: Any input which may or may not be batched</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"unbatched\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">unbatched: A single output element. Torch tensors are concatenated across dim 0, all other types are added which functions as concatenation for strings and arrays, but may give undesired results for other types</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "output_node": false
  },
  "VHS_SelectLatest": {
    "input": {
      "required": {
        "filename_prefix": [
          "STRING",
          {
            "default": "output/AnimateDiff",
            "vhs_path_extensions": []
          }
        ],
        "filename_postfix": [
          "STRING",
          {
            "placeholder": ".webm"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "filename_prefix",
        "filename_postfix"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "Filename"
    ],
    "name": "VHS_SelectLatest",
    "display_name": "Select Latest \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "description": "Select Latest \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62<div style=\"font-size: 0.8em\"><div id=VHS_shortdesc>Experimental virtual node to select the most recently modified file from a given folder</div></div><div style=\"font-size: 0.8em\">Assists in the creation of workflows where outputs from one execution are used elsewhere in subsequent executions.</div><div style=\"font-size: 0.8em\"><div vhs_title=\"Inputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Inputs: <div vhs_title=\"filename_prefix\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">filename_prefix: A path which can consist of a combination of folders and a prefix which candidate files must match</div></div><div vhs_title=\"filename_postfix\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">filename_postfix: A string which chich the selected file must end with. Useful for limiting to a target extension.</div></div></div></div><div vhs_title=\"Outputs\" style=\"display: flex; font-size: 0.8em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Outputs: <div vhs_title=\"Filename\" style=\"display: flex; font-size: 1em\" class=\"VHS_collapse\"><div style=\"color: #AAA; height: 1.5em;\">[<span style=\"font-family: monospace\">-</span>]</div><div style=\"width: 100%\">Filename: A string representing a file path to the most recently modified file.</div></div></div></div></div>",
    "python_module": "custom_nodes.comfyui-videohelpersuite",
    "category": "Video Helper Suite \ud83c\udfa5\ud83c\udd65\ud83c\udd57\ud83c\udd62",
    "output_node": false,
    "experimental": true
  },
  "DownloadAndLoadFlorence2Model": {
    "input": {
      "required": {
        "model": [
          [
            "microsoft/Florence-2-base",
            "microsoft/Florence-2-base-ft",
            "microsoft/Florence-2-large",
            "microsoft/Florence-2-large-ft",
            "HuggingFaceM4/Florence-2-DocVQA",
            "thwri/CogFlorence-2.1-Large",
            "thwri/CogFlorence-2.2-Large",
            "gokaygokay/Florence-2-SD3-Captioner",
            "gokaygokay/Florence-2-Flux-Large",
            "MiaoshouAI/Florence-2-base-PromptGen-v1.5",
            "MiaoshouAI/Florence-2-large-PromptGen-v1.5",
            "MiaoshouAI/Florence-2-base-PromptGen-v2.0",
            "MiaoshouAI/Florence-2-large-PromptGen-v2.0"
          ],
          {
            "default": "microsoft/Florence-2-base"
          }
        ],
        "precision": [
          [
            "fp16",
            "bf16",
            "fp32"
          ],
          {
            "default": "fp16"
          }
        ],
        "attention": [
          [
            "flash_attention_2",
            "sdpa",
            "eager"
          ],
          {
            "default": "sdpa"
          }
        ]
      },
      "optional": {
        "lora": [
          "PEFTLORA"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "precision",
        "attention"
      ],
      "optional": [
        "lora"
      ]
    },
    "output": [
      "FL2MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "florence2_model"
    ],
    "name": "DownloadAndLoadFlorence2Model",
    "display_name": "DownloadAndLoadFlorence2Model",
    "description": "",
    "python_module": "custom_nodes.comfyui-florence2",
    "category": "Florence2",
    "output_node": false
  },
  "DownloadAndLoadFlorence2Lora": {
    "input": {
      "required": {
        "model": [
          [
            "NikshepShetty/Florence-2-pixelprose"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "PEFTLORA"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "lora"
    ],
    "name": "DownloadAndLoadFlorence2Lora",
    "display_name": "DownloadAndLoadFlorence2Lora",
    "description": "",
    "python_module": "custom_nodes.comfyui-florence2",
    "category": "Florence2",
    "output_node": false
  },
  "Florence2ModelLoader": {
    "input": {
      "required": {
        "model": [
          [
            "Florence-2-large-PromptGen-v2.0"
          ],
          {
            "tooltip": "models are expected to be in Comfyui/models/LLM folder"
          }
        ],
        "precision": [
          [
            "fp16",
            "bf16",
            "fp32"
          ]
        ],
        "attention": [
          [
            "flash_attention_2",
            "sdpa",
            "eager"
          ],
          {
            "default": "sdpa"
          }
        ]
      },
      "optional": {
        "lora": [
          "PEFTLORA"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "precision",
        "attention"
      ],
      "optional": [
        "lora"
      ]
    },
    "output": [
      "FL2MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "florence2_model"
    ],
    "name": "Florence2ModelLoader",
    "display_name": "Florence2ModelLoader",
    "description": "",
    "python_module": "custom_nodes.comfyui-florence2",
    "category": "Florence2",
    "output_node": false
  },
  "Florence2Run": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "florence2_model": [
          "FL2MODEL"
        ],
        "text_input": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "task": [
          [
            "region_caption",
            "dense_region_caption",
            "region_proposal",
            "caption",
            "detailed_caption",
            "more_detailed_caption",
            "caption_to_phrase_grounding",
            "referring_expression_segmentation",
            "ocr",
            "ocr_with_region",
            "docvqa",
            "prompt_gen_tags",
            "prompt_gen_mixed_caption",
            "prompt_gen_analyze",
            "prompt_gen_mixed_caption_plus"
          ]
        ],
        "fill_mask": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "keep_model_loaded": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "max_new_tokens": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096
          }
        ],
        "num_beams": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 64
          }
        ],
        "do_sample": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "output_mask_select": [
          "STRING",
          {
            "default": ""
          }
        ],
        "seed": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "florence2_model",
        "text_input",
        "task",
        "fill_mask"
      ],
      "optional": [
        "keep_model_loaded",
        "max_new_tokens",
        "num_beams",
        "do_sample",
        "output_mask_select",
        "seed"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "STRING",
      "JSON"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "caption",
      "data"
    ],
    "name": "Florence2Run",
    "display_name": "Florence2Run",
    "description": "",
    "python_module": "custom_nodes.comfyui-florence2",
    "category": "Florence2",
    "output_node": false
  },
  "BOOLConstant": {
    "input": {
      "required": {
        "value": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "value"
    ],
    "name": "BOOLConstant",
    "display_name": "BOOL Constant",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/constants",
    "output_node": false
  },
  "INTConstant": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "value"
    ],
    "name": "INTConstant",
    "display_name": "INT Constant",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/constants",
    "output_node": false
  },
  "FloatConstant": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -18446744073709551615,
            "max": 18446744073709551615,
            "step": 1e-05
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "value"
    ],
    "name": "FloatConstant",
    "display_name": "Float Constant",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/constants",
    "output_node": false
  },
  "StringConstant": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "StringConstant",
    "display_name": "String Constant",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/constants",
    "output_node": false
  },
  "StringConstantMultiline": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "strip_newlines": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string",
        "strip_newlines"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "StringConstantMultiline",
    "display_name": "String Constant Multiline",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/constants",
    "output_node": false
  },
  "ConditioningMultiCombine": {
    "input": {
      "required": {
        "inputcount": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 20,
            "step": 1
          }
        ],
        "operation": [
          [
            "combine",
            "concat"
          ],
          {
            "default": "combine"
          }
        ],
        "conditioning_1": [
          "CONDITIONING"
        ],
        "conditioning_2": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "inputcount",
        "operation",
        "conditioning_1",
        "conditioning_2"
      ]
    },
    "output": [
      "CONDITIONING",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "combined",
      "inputcount"
    ],
    "name": "ConditioningMultiCombine",
    "display_name": "Conditioning Multi Combine",
    "description": "\nCombines multiple conditioning nodes into one\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking/conditioning",
    "output_node": false
  },
  "ConditioningSetMaskAndCombine": {
    "input": {
      "required": {
        "positive_1": [
          "CONDITIONING"
        ],
        "negative_1": [
          "CONDITIONING"
        ],
        "positive_2": [
          "CONDITIONING"
        ],
        "negative_2": [
          "CONDITIONING"
        ],
        "mask_1": [
          "MASK"
        ],
        "mask_2": [
          "MASK"
        ],
        "mask_1_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "mask_2_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "positive_1",
        "negative_1",
        "positive_2",
        "negative_2",
        "mask_1",
        "mask_2",
        "mask_1_strength",
        "mask_2_strength",
        "set_cond_area"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "combined_positive",
      "combined_negative"
    ],
    "name": "ConditioningSetMaskAndCombine",
    "display_name": "ConditioningSetMaskAndCombine",
    "description": "\nBundles multiple conditioning mask and combine nodes into one,functionality is identical to ComfyUI native nodes\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking/conditioning",
    "output_node": false
  },
  "ConditioningSetMaskAndCombine3": {
    "input": {
      "required": {
        "positive_1": [
          "CONDITIONING"
        ],
        "negative_1": [
          "CONDITIONING"
        ],
        "positive_2": [
          "CONDITIONING"
        ],
        "negative_2": [
          "CONDITIONING"
        ],
        "positive_3": [
          "CONDITIONING"
        ],
        "negative_3": [
          "CONDITIONING"
        ],
        "mask_1": [
          "MASK"
        ],
        "mask_2": [
          "MASK"
        ],
        "mask_3": [
          "MASK"
        ],
        "mask_1_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "mask_2_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "mask_3_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "positive_1",
        "negative_1",
        "positive_2",
        "negative_2",
        "positive_3",
        "negative_3",
        "mask_1",
        "mask_2",
        "mask_3",
        "mask_1_strength",
        "mask_2_strength",
        "mask_3_strength",
        "set_cond_area"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "combined_positive",
      "combined_negative"
    ],
    "name": "ConditioningSetMaskAndCombine3",
    "display_name": "ConditioningSetMaskAndCombine3",
    "description": "\nBundles multiple conditioning mask and combine nodes into one,functionality is identical to ComfyUI native nodes\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking/conditioning",
    "output_node": false
  },
  "ConditioningSetMaskAndCombine4": {
    "input": {
      "required": {
        "positive_1": [
          "CONDITIONING"
        ],
        "negative_1": [
          "CONDITIONING"
        ],
        "positive_2": [
          "CONDITIONING"
        ],
        "negative_2": [
          "CONDITIONING"
        ],
        "positive_3": [
          "CONDITIONING"
        ],
        "negative_3": [
          "CONDITIONING"
        ],
        "positive_4": [
          "CONDITIONING"
        ],
        "negative_4": [
          "CONDITIONING"
        ],
        "mask_1": [
          "MASK"
        ],
        "mask_2": [
          "MASK"
        ],
        "mask_3": [
          "MASK"
        ],
        "mask_4": [
          "MASK"
        ],
        "mask_1_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "mask_2_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "mask_3_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "mask_4_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "positive_1",
        "negative_1",
        "positive_2",
        "negative_2",
        "positive_3",
        "negative_3",
        "positive_4",
        "negative_4",
        "mask_1",
        "mask_2",
        "mask_3",
        "mask_4",
        "mask_1_strength",
        "mask_2_strength",
        "mask_3_strength",
        "mask_4_strength",
        "set_cond_area"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "combined_positive",
      "combined_negative"
    ],
    "name": "ConditioningSetMaskAndCombine4",
    "display_name": "ConditioningSetMaskAndCombine4",
    "description": "\nBundles multiple conditioning mask and combine nodes into one,functionality is identical to ComfyUI native nodes\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking/conditioning",
    "output_node": false
  },
  "ConditioningSetMaskAndCombine5": {
    "input": {
      "required": {
        "positive_1": [
          "CONDITIONING"
        ],
        "negative_1": [
          "CONDITIONING"
        ],
        "positive_2": [
          "CONDITIONING"
        ],
        "negative_2": [
          "CONDITIONING"
        ],
        "positive_3": [
          "CONDITIONING"
        ],
        "negative_3": [
          "CONDITIONING"
        ],
        "positive_4": [
          "CONDITIONING"
        ],
        "negative_4": [
          "CONDITIONING"
        ],
        "positive_5": [
          "CONDITIONING"
        ],
        "negative_5": [
          "CONDITIONING"
        ],
        "mask_1": [
          "MASK"
        ],
        "mask_2": [
          "MASK"
        ],
        "mask_3": [
          "MASK"
        ],
        "mask_4": [
          "MASK"
        ],
        "mask_5": [
          "MASK"
        ],
        "mask_1_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "mask_2_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "mask_3_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "mask_4_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "mask_5_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "set_cond_area": [
          [
            "default",
            "mask bounds"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "positive_1",
        "negative_1",
        "positive_2",
        "negative_2",
        "positive_3",
        "negative_3",
        "positive_4",
        "negative_4",
        "positive_5",
        "negative_5",
        "mask_1",
        "mask_2",
        "mask_3",
        "mask_4",
        "mask_5",
        "mask_1_strength",
        "mask_2_strength",
        "mask_3_strength",
        "mask_4_strength",
        "mask_5_strength",
        "set_cond_area"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "combined_positive",
      "combined_negative"
    ],
    "name": "ConditioningSetMaskAndCombine5",
    "display_name": "ConditioningSetMaskAndCombine5",
    "description": "\nBundles multiple conditioning mask and combine nodes into one,functionality is identical to ComfyUI native nodes\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking/conditioning",
    "output_node": false
  },
  "CondPassThrough": {
    "input": {
      "required": {},
      "optional": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "positive",
        "negative"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative"
    ],
    "name": "CondPassThrough",
    "display_name": "CondPassThrough",
    "description": "\n    Simply passes through the positive and negative conditioning,\n    workaround for Set node not allowing bypassed inputs.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/misc",
    "output_node": false
  },
  "DownloadAndLoadCLIPSeg": {
    "input": {
      "required": {
        "model": [
          [
            "Kijai/clipseg-rd64-refined-fp16",
            "CIDAS/clipseg-rd64-refined"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model"
      ]
    },
    "output": [
      "CLIPSEGMODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "clipseg_model"
    ],
    "name": "DownloadAndLoadCLIPSeg",
    "display_name": "(Down)load CLIPSeg",
    "description": "\nDownloads and loads CLIPSeg model with huggingface_hub,  \nto ComfyUI/models/clip_seg\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "BatchCLIPSeg": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "binary_mask": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "combine_mask": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "use_cuda": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "blur_sigma": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "opt_model": [
          "CLIPSEGMODEL"
        ],
        "prev_mask": [
          "MASK",
          {
            "default": null
          }
        ],
        "image_bg_level": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "text",
        "threshold",
        "binary_mask",
        "combine_mask",
        "use_cuda"
      ],
      "optional": [
        "blur_sigma",
        "opt_model",
        "prev_mask",
        "image_bg_level",
        "invert"
      ]
    },
    "output": [
      "MASK",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "Mask",
      "Image"
    ],
    "name": "BatchCLIPSeg",
    "display_name": "Batch CLIPSeg",
    "description": "\nSegments an image or batch of images using CLIPSeg.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "ColorToMask": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "red": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "green": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "blue": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "threshold": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "per_batch": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "invert",
        "red",
        "green",
        "blue",
        "threshold",
        "per_batch"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ColorToMask",
    "display_name": "Color To Mask",
    "description": "\nConverts chosen RGB value to a mask.  \nWith batch inputs, the **per_batch**  \ncontrols the number of images processed at once.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "CreateGradientMask": {
    "input": {
      "required": {
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "frames": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "invert",
        "frames",
        "width",
        "height"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "CreateGradientMask",
    "display_name": "Create Gradient Mask",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "CreateTextMask": {
    "input": {
      "required": {
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "text_x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "text_y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "font_size": [
          "INT",
          {
            "default": 32,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ],
        "font_color": [
          "STRING",
          {
            "default": "white"
          }
        ],
        "text": [
          "STRING",
          {
            "default": "HELLO!",
            "multiline": true
          }
        ],
        "font": [
          [
            "FreeMono.ttf",
            "FreeMonoBoldOblique.otf",
            "TTNorms-Black.otf"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "start_rotation": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 359,
            "step": 1
          }
        ],
        "end_rotation": [
          "INT",
          {
            "default": 0,
            "min": -359,
            "max": 359,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "invert",
        "frames",
        "text_x",
        "text_y",
        "font_size",
        "font_color",
        "text",
        "font",
        "width",
        "height",
        "start_rotation",
        "end_rotation"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "CreateTextMask",
    "display_name": "Create Text Mask",
    "description": "\nCreates a text image and mask.  \nLooks for fonts from this folder:  \nComfyUI/custom_nodes/ComfyUI-KJNodes/fonts\n  \nIf start_rotation and/or end_rotation are different values,  \ncreates animation between them.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "CreateAudioMask": {
    "input": {
      "required": {
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "frames": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ],
        "scale": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 2.0,
            "step": 0.01
          }
        ],
        "audio_path": [
          "STRING",
          {
            "default": "audio.wav"
          }
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "invert",
        "frames",
        "scale",
        "audio_path",
        "width",
        "height"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "CreateAudioMask",
    "display_name": "Create Audio Mask",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/deprecated",
    "output_node": false
  },
  "CreateFadeMask": {
    "input": {
      "required": {
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "frames": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 10000,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out"
          ]
        ],
        "start_level": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "midpoint_level": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "end_level": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "midpoint_frame": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "invert",
        "frames",
        "width",
        "height",
        "interpolation",
        "start_level",
        "midpoint_level",
        "end_level",
        "midpoint_frame"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "CreateFadeMask",
    "display_name": "Create Fade Mask",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/deprecated",
    "output_node": false
  },
  "CreateFadeMaskAdvanced": {
    "input": {
      "required": {
        "points_string": [
          "STRING",
          {
            "default": "0:(0.0),\n7:(1.0),\n15:(0.0)\n",
            "multiline": true
          }
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "frames": [
          "INT",
          {
            "default": 16,
            "min": 2,
            "max": 10000,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "points_string",
        "invert",
        "frames",
        "width",
        "height",
        "interpolation"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "CreateFadeMaskAdvanced",
    "display_name": "Create Fade Mask Advanced",
    "description": "\nCreate a batch of masks interpolated between given frames and values. \nUses same syntax as Fizz' BatchValueSchedule.\nFirst value is the frame index (not that this starts from 0, not 1) \nand the second value inside the brackets is the float value of the mask in range 0.0 - 1.0  \n\nFor example the default values:  \n0:(0.0)  \n7:(1.0)  \n15:(0.0)  \n  \nWould create a mask batch fo 16 frames, starting from black, \ninterpolating with the chosen curve to fully white at the 8th frame, \nand interpolating from that to fully black at the 16th frame.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "CreateFluidMask": {
    "input": {
      "required": {
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "inflow_count": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "inflow_velocity": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "inflow_radius": [
          "INT",
          {
            "default": 8,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "inflow_padding": [
          "INT",
          {
            "default": 50,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "inflow_duration": [
          "INT",
          {
            "default": 60,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "invert",
        "frames",
        "width",
        "height",
        "inflow_count",
        "inflow_velocity",
        "inflow_radius",
        "inflow_padding",
        "inflow_duration"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "CreateFluidMask",
    "display_name": "Create Fluid Mask",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "CreateShapeMask": {
    "input": {
      "required": {
        "shape": [
          [
            "circle",
            "square",
            "triangle"
          ],
          {
            "default": "circle"
          }
        ],
        "frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "location_x": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "location_y": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "grow": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "frame_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "shape_width": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ],
        "shape_height": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "shape",
        "frames",
        "location_x",
        "location_y",
        "grow",
        "frame_width",
        "frame_height",
        "shape_width",
        "shape_height"
      ]
    },
    "output": [
      "MASK",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "mask",
      "mask_inverted"
    ],
    "name": "CreateShapeMask",
    "display_name": "Create Shape Mask",
    "description": "\nCreates a mask or batch of masks with the specified shape.  \nLocations are center locations.  \nGrow value is the amount to grow the shape on each frame, creating animated masks.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "CreateVoronoiMask": {
    "input": {
      "required": {
        "frames": [
          "INT",
          {
            "default": 16,
            "min": 2,
            "max": 4096,
            "step": 1
          }
        ],
        "num_points": [
          "INT",
          {
            "default": 15,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "line_width": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "speed": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "frame_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "frames",
        "num_points",
        "line_width",
        "speed",
        "frame_width",
        "frame_height"
      ]
    },
    "output": [
      "MASK",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "mask",
      "mask_inverted"
    ],
    "name": "CreateVoronoiMask",
    "display_name": "Create Voronoi Mask",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "CreateMagicMask": {
    "input": {
      "required": {
        "frames": [
          "INT",
          {
            "default": 16,
            "min": 2,
            "max": 4096,
            "step": 1
          }
        ],
        "depth": [
          "INT",
          {
            "default": 12,
            "min": 1,
            "max": 500,
            "step": 1
          }
        ],
        "distortion": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 99999999,
            "step": 1
          }
        ],
        "transitions": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 20,
            "step": 1
          }
        ],
        "frame_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "frames",
        "depth",
        "distortion",
        "seed",
        "transitions",
        "frame_width",
        "frame_height"
      ]
    },
    "output": [
      "MASK",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "mask",
      "mask_inverted"
    ],
    "name": "CreateMagicMask",
    "display_name": "Create Magic Mask",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "GetMaskSizeAndCount": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask"
      ]
    },
    "output": [
      "MASK",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "mask",
      "width",
      "height",
      "count"
    ],
    "name": "GetMaskSizeAndCount",
    "display_name": "Get Mask Size & Count",
    "description": "\nReturns the width, height and batch size of the mask,  \nand passes it through unchanged.  \n\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "GrowMaskWithBlur": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "expand": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "incremental_expandrate": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "tapered_corners": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "flip_input": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "blur_radius": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "lerp_alpha": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "decay_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "fill_holes": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "expand",
        "incremental_expandrate",
        "tapered_corners",
        "flip_input",
        "blur_radius",
        "lerp_alpha",
        "decay_factor"
      ],
      "optional": [
        "fill_holes"
      ]
    },
    "output": [
      "MASK",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "mask",
      "mask_inverted"
    ],
    "name": "GrowMaskWithBlur",
    "display_name": "Grow Mask With Blur",
    "description": "\n# GrowMaskWithBlur\n- mask: Input mask or mask batch\n- expand: Expand or contract mask or mask batch by a given amount\n- incremental_expandrate: increase expand rate by a given amount per frame\n- tapered_corners: use tapered corners\n- flip_input: flip input mask\n- blur_radius: value higher than 0 will blur the mask\n- lerp_alpha: alpha value for interpolation between frames\n- decay_factor: decay value for interpolation between frames\n- fill_holes: fill holes in the mask (slow)",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "MaskBatchMulti": {
    "input": {
      "required": {
        "inputcount": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000,
            "step": 1
          }
        ],
        "mask_1": [
          "MASK"
        ],
        "mask_2": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "inputcount",
        "mask_1",
        "mask_2"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "masks"
    ],
    "name": "MaskBatchMulti",
    "display_name": "Mask Batch Multi",
    "description": "\nCreates an image batch from multiple masks.  \nYou can set how many inputs the node has,  \nwith the **inputcount** and clicking update.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "OffsetMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 16384,
            "step": 1,
            "display": "number"
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 16384,
            "step": 1,
            "display": "number"
          }
        ],
        "angle": [
          "INT",
          {
            "default": 0,
            "min": -360,
            "max": 360,
            "step": 1,
            "display": "number"
          }
        ],
        "duplication_factor": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 1000,
            "step": 1,
            "display": "number"
          }
        ],
        "roll": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "incremental": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "padding_mode": [
          [
            "empty",
            "border",
            "reflection"
          ],
          {
            "default": "empty"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "x",
        "y",
        "angle",
        "duplication_factor",
        "roll",
        "incremental",
        "padding_mode"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "mask"
    ],
    "name": "OffsetMask",
    "display_name": "Offset Mask",
    "description": "\nOffsets the mask by the specified amount.  \n - mask: Input mask or mask batch\n - x: Horizontal offset\n - y: Vertical offset\n - angle: Angle in degrees\n - roll: roll edge wrapping\n - duplication_factor: Number of times to duplicate the mask to form a batch\n - border padding_mode: Padding mode for the mask\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "RemapMaskRange": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "min": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -10.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "max": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "min",
        "max"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "mask"
    ],
    "name": "RemapMaskRange",
    "display_name": "Remap Mask Range",
    "description": "\nSets new min and max values for the mask.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "ResizeMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1,
            "display": "number"
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1,
            "display": "number"
          }
        ],
        "keep_proportions": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "width",
        "height",
        "keep_proportions",
        "upscale_method",
        "crop"
      ]
    },
    "output": [
      "MASK",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "mask",
      "width",
      "height"
    ],
    "name": "ResizeMask",
    "display_name": "Resize Mask",
    "description": "\nResizes the mask or batch of masks to the specified width and height.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "RoundMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "RoundMask",
    "display_name": "Round Mask",
    "description": "\nRounds the mask or batch of masks to a binary mask.  \n<img src=\"https://github.com/kijai/ComfyUI-KJNodes/assets/40791699/52c85202-f74e-4b96-9dac-c8bda5ddcc40\" width=\"300\" height=\"250\" alt=\"RoundMask example\">\n\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "SeparateMasks": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "size_threshold_width": [
          "INT",
          {
            "default": 256,
            "min": 0.0,
            "max": 4096,
            "step": 1
          }
        ],
        "size_threshold_height": [
          "INT",
          {
            "default": 256,
            "min": 0.0,
            "max": 4096,
            "step": 1
          }
        ],
        "mode": [
          [
            "convex_polygons",
            "area"
          ]
        ],
        "max_poly_points": [
          "INT",
          {
            "default": 8,
            "min": 3,
            "max": 32,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "size_threshold_width",
        "size_threshold_height",
        "mode",
        "max_poly_points"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "mask"
    ],
    "name": "SeparateMasks",
    "display_name": "Separate Masks",
    "description": "Separates a mask into multiple masks based on the size of the connected components.",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking",
    "output_node": true
  },
  "AddLabel": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "text_x": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "text_y": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 48,
            "min": -1,
            "max": 4096,
            "step": 1
          }
        ],
        "font_size": [
          "INT",
          {
            "default": 32,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "font_color": [
          "STRING",
          {
            "default": "white"
          }
        ],
        "label_color": [
          "STRING",
          {
            "default": "black"
          }
        ],
        "font": [
          [
            "FreeMono.ttf",
            "FreeMonoBoldOblique.otf",
            "TTNorms-Black.otf"
          ]
        ],
        "text": [
          "STRING",
          {
            "default": "Text"
          }
        ],
        "direction": [
          [
            "up",
            "down",
            "left",
            "right",
            "overlay"
          ],
          {
            "default": "up"
          }
        ]
      },
      "optional": {
        "caption": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "text_x",
        "text_y",
        "height",
        "font_size",
        "font_color",
        "label_color",
        "font",
        "text",
        "direction"
      ],
      "optional": [
        "caption"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "AddLabel",
    "display_name": "Add Label",
    "description": "\nCreates a new with the given text, and concatenates it to  \neither above or below the input image.  \nNote that this changes the input image's height!  \nFonts are loaded from this folder:  \nComfyUI/custom_nodes/ComfyUI-KJNodes/fonts\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "ColorMatch": {
    "input": {
      "required": {
        "image_ref": [
          "IMAGE"
        ],
        "image_target": [
          "IMAGE"
        ],
        "method": [
          [
            "mkl",
            "hm",
            "reinhard",
            "mvgd",
            "hm-mvgd-hm",
            "hm-mkl-hm"
          ],
          {
            "default": "mkl"
          }
        ]
      },
      "optional": {
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image_ref",
        "image_target",
        "method"
      ],
      "optional": [
        "strength"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "ColorMatch",
    "display_name": "Color Match",
    "description": "\ncolor-matcher enables color transfer across images which comes in handy for automatic  \ncolor-grading of photographs, paintings and film sequences as well as light-field  \nand stopmotion corrections.  \n\nThe methods behind the mappings are based on the approach from Reinhard et al.,  \nthe Monge-Kantorovich Linearization (MKL) as proposed by Pitie et al. and our analytical solution  \nto a Multi-Variate Gaussian Distribution (MVGD) transfer in conjunction with classical histogram   \nmatching. As shown below our HM-MVGD-HM compound outperforms existing methods.   \nhttps://github.com/hahnec/color-matcher/\n\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageTensorList": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageTensorList",
    "display_name": "Image Tensor List",
    "description": "\nCreates an image list from the input images.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "CrossFadeImages": {
    "input": {
      "required": {
        "images_1": [
          "IMAGE"
        ],
        "images_2": [
          "IMAGE"
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out",
            "bounce",
            "elastic",
            "glitchy",
            "exponential_ease_out"
          ]
        ],
        "transition_start_index": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "transitioning_frames": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "start_level": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "end_level": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images_1",
        "images_2",
        "interpolation",
        "transition_start_index",
        "transitioning_frames",
        "start_level",
        "end_level"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "CrossFadeImages",
    "display_name": "Cross Fade Images",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "CrossFadeImagesMulti": {
    "input": {
      "required": {
        "inputcount": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000,
            "step": 1
          }
        ],
        "image_1": [
          "IMAGE"
        ],
        "image_2": [
          "IMAGE"
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out",
            "bounce",
            "elastic",
            "glitchy",
            "exponential_ease_out"
          ]
        ],
        "transitioning_frames": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "inputcount",
        "image_1",
        "image_2",
        "interpolation",
        "transitioning_frames"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "CrossFadeImagesMulti",
    "display_name": "Cross Fade Images Multi",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "GetImagesFromBatchIndexed": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "indexes": [
          "STRING",
          {
            "default": "0, 1, 2",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "indexes"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "GetImagesFromBatchIndexed",
    "display_name": "Get Images From Batch Indexed",
    "description": "\nSelects and returns the images at the specified indices as an image batch.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "GetImageRangeFromBatch": {
    "input": {
      "required": {
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": -1,
            "max": 4096,
            "step": 1
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      },
      "optional": {
        "images": [
          "IMAGE"
        ],
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "start_index",
        "num_frames"
      ],
      "optional": [
        "images",
        "masks"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "GetImageRangeFromBatch",
    "display_name": "Get Image or Mask Range From Batch",
    "description": "\nReturns a range of images from a batch.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "GetLatentRangeFromBatch": {
    "input": {
      "required": {
        "latents": [
          "LATENT"
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": -1,
            "max": 4096,
            "step": 1
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 1,
            "min": -1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latents",
        "start_index",
        "num_frames"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "GetLatentRangeFromBatch",
    "display_name": "Get Latent Range From Batch",
    "description": "\nReturns a range of latents from a batch.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/latents",
    "output_node": false
  },
  "GetImageSizeAndCount": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "width",
      "height",
      "count"
    ],
    "name": "GetImageSizeAndCount",
    "display_name": "Get Image Size & Count",
    "description": "\nReturns width, height and batch size of the image,  \nand passes it through unchanged.  \n\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "FastPreview": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "format": [
          [
            "JPEG",
            "PNG",
            "WEBP"
          ],
          {
            "default": "JPEG"
          }
        ],
        "quality": [
          "INT",
          {
            "default": 75,
            "min": 1,
            "max": 100,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "format",
        "quality"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "FastPreview",
    "display_name": "Fast Preview",
    "description": "Experimental node for faster image previews by displaying through base64 it without saving to disk.",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/experimental",
    "output_node": true
  },
  "ImageBatchFilter": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "empty_color": [
          "STRING",
          {
            "default": "0, 0, 0"
          }
        ],
        "empty_threshold": [
          "FLOAT",
          {
            "default": 0.01,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "replacement_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "empty_color",
        "empty_threshold"
      ],
      "optional": [
        "replacement_image"
      ]
    },
    "output": [
      "IMAGE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "images",
      "removed_indices"
    ],
    "name": "ImageBatchFilter",
    "display_name": "Image Batch Filter",
    "description": "Removes empty images from a batch",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageAndMaskPreview": {
    "input": {
      "required": {
        "mask_opacity": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "mask_color": [
          "STRING",
          {
            "default": "255, 255, 255"
          }
        ],
        "pass_through": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "mask_opacity",
        "mask_color",
        "pass_through"
      ],
      "optional": [
        "image",
        "mask"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "composite"
    ],
    "name": "ImageAndMaskPreview",
    "display_name": "ImageAndMaskPreview",
    "description": "\nPreview an image or a mask, when both inputs are used  \ncomposites the mask on top of the image.\nwith pass_through on the preview is disabled and the  \ncomposite is returned from the composite slot instead,  \nthis allows for the preview to be passed for video combine  \nnodes for example.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking",
    "output_node": true
  },
  "ImageAddMulti": {
    "input": {
      "required": {
        "inputcount": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000,
            "step": 1
          }
        ],
        "image_1": [
          "IMAGE"
        ],
        "image_2": [
          "IMAGE"
        ],
        "blending": [
          [
            "add",
            "subtract",
            "multiply",
            "difference"
          ],
          {
            "default": "add"
          }
        ],
        "blend_amount": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 1,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "inputcount",
        "image_1",
        "image_2",
        "blending",
        "blend_amount"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "ImageAddMulti",
    "display_name": "Image Add Multi",
    "description": "\nAdd blends multiple images together.    \nYou can set how many inputs the node has,  \nwith the **inputcount** and clicking update.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageBatchMulti": {
    "input": {
      "required": {
        "inputcount": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000,
            "step": 1
          }
        ],
        "image_1": [
          "IMAGE"
        ],
        "image_2": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "inputcount",
        "image_1",
        "image_2"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "ImageBatchMulti",
    "display_name": "Image Batch Multi",
    "description": "\nCreates an image batch from multiple images.  \nYou can set how many inputs the node has,  \nwith the **inputcount** and clicking update.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageBatchRepeatInterleaving": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "repeats": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "repeats"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ImageBatchRepeatInterleaving",
    "display_name": "ImageBatchRepeatInterleaving",
    "description": "\nRepeats each image in a batch by the specified number of times.  \nExample batch of 5 images: 0, 1 ,2, 3, 4  \nwith repeats 2 becomes batch of 10 images: 0, 0, 1, 1, 2, 2, 3, 3, 4, 4  \n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageBatchTestPattern": {
    "input": {
      "required": {
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ],
        "start_from": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "text_x": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "text_y": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "font": [
          [
            "FreeMono.ttf",
            "FreeMonoBoldOblique.otf",
            "TTNorms-Black.otf"
          ]
        ],
        "font_size": [
          "INT",
          {
            "default": 255,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "batch_size",
        "start_from",
        "text_x",
        "text_y",
        "width",
        "height",
        "font",
        "font_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageBatchTestPattern",
    "display_name": "Image Batch Test Pattern",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "ImageConcanate": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "direction": [
          [
            "right",
            "down",
            "left",
            "up"
          ],
          {
            "default": "right"
          }
        ],
        "match_image_size": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2",
        "direction",
        "match_image_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageConcanate",
    "display_name": "Image Concatenate",
    "description": "\nConcatenates the image2 to image1 in the specified direction.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageConcatFromBatch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "num_columns": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ],
        "match_image_size": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "max_resolution": [
          "INT",
          {
            "default": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "num_columns",
        "match_image_size",
        "max_resolution"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageConcatFromBatch",
    "display_name": "Image Concatenate From Batch",
    "description": "\n    Concatenates images from a batch into a grid with a specified number of columns.\n    ",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageConcatMulti": {
    "input": {
      "required": {
        "inputcount": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000,
            "step": 1
          }
        ],
        "image_1": [
          "IMAGE"
        ],
        "image_2": [
          "IMAGE"
        ],
        "direction": [
          [
            "right",
            "down",
            "left",
            "up"
          ],
          {
            "default": "right"
          }
        ],
        "match_image_size": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "inputcount",
        "image_1",
        "image_2",
        "direction",
        "match_image_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "ImageConcatMulti",
    "display_name": "Image Concatenate Multi",
    "description": "\nCreates an image from multiple images.  \nYou can set how many inputs the node has,  \nwith the **inputcount** and clicking update.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageCropByMask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "ImageCropByMask",
    "display_name": "Image Crop By Mask",
    "description": "Crops the input images based on the provided mask.",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageCropByMaskAndResize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "base_resolution": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "padding": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "min_crop_resolution": [
          "INT",
          {
            "default": 128,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "max_crop_resolution": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask",
        "base_resolution",
        "padding",
        "min_crop_resolution",
        "max_crop_resolution"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "BBOX"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "images",
      "masks",
      "bbox"
    ],
    "name": "ImageCropByMaskAndResize",
    "display_name": "Image Crop By Mask And Resize",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageCropByMaskBatch": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "masks": [
          "MASK"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "padding": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "preserve_size": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "bg_color": [
          "STRING",
          {
            "default": "0, 0, 0",
            "tooltip": "Color as RGB values in range 0-255, separated by commas."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "masks",
        "width",
        "height",
        "padding",
        "preserve_size",
        "bg_color"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "images",
      "masks"
    ],
    "name": "ImageCropByMaskBatch",
    "display_name": "Image Crop By Mask Batch",
    "description": "Crops the input images based on the provided masks.",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageUncropByMask": {
    "input": {
      "required": {
        "destination": [
          "IMAGE"
        ],
        "source": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "bbox": [
          "BBOX"
        ]
      }
    },
    "input_order": {
      "required": [
        "destination",
        "source",
        "mask",
        "bbox"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "ImageUncropByMask",
    "display_name": "Image Uncrop By Mask",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageGrabPIL": {
    "input": {
      "required": {
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ],
        "delay": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "x",
        "y",
        "width",
        "height",
        "num_frames",
        "delay"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "ImageGrabPIL",
    "display_name": "Image Grab PIL",
    "description": "\nCaptures an area specified by screen coordinates.  \nCan be used for realtime diffusion with autoqueue.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageGridComposite2x2": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "image3": [
          "IMAGE"
        ],
        "image4": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2",
        "image3",
        "image4"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageGridComposite2x2",
    "display_name": "Image Grid Composite 2x2",
    "description": "\nConcatenates the 4 input images into a 2x2 grid. \n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageGridComposite3x3": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ],
        "image2": [
          "IMAGE"
        ],
        "image3": [
          "IMAGE"
        ],
        "image4": [
          "IMAGE"
        ],
        "image5": [
          "IMAGE"
        ],
        "image6": [
          "IMAGE"
        ],
        "image7": [
          "IMAGE"
        ],
        "image8": [
          "IMAGE"
        ],
        "image9": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image1",
        "image2",
        "image3",
        "image4",
        "image5",
        "image6",
        "image7",
        "image8",
        "image9"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageGridComposite3x3",
    "display_name": "Image Grid Composite 3x3",
    "description": "\nConcatenates the 9 input images into a 3x3 grid. \n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageGridtoBatch": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "columns": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 8,
            "tooltip": "The number of columns in the grid."
          }
        ],
        "rows": [
          "INT",
          {
            "default": 0,
            "min": 1,
            "max": 8,
            "tooltip": "The number of rows in the grid. Set to 0 for automatic calculation."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "columns",
        "rows"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageGridtoBatch",
    "display_name": "Image Grid To Batch",
    "description": "Converts a grid of images to a batch of images.",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageNoiseAugmentation": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "noise_aug_strength": [
          "FLOAT",
          {
            "default": null,
            "min": 0.0,
            "max": 100.0,
            "step": 0.001
          }
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "noise_aug_strength",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageNoiseAugmentation",
    "display_name": "Image Noise Augmentation",
    "description": "\n    Add noise to an image.  \n    ",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageNormalize_Neg1_To_1": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageNormalize_Neg1_To_1",
    "display_name": "Image Normalize -1 to 1",
    "description": "\nNormalize the images to be in the range [-1, 1]  \n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImagePass": {
    "input": {
      "required": {},
      "optional": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImagePass",
    "display_name": "ImagePass",
    "description": "\nPasses the image through without modifying it.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImagePadKJ": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "extra_padding": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "pad_mode": [
          [
            "edge",
            "color"
          ]
        ],
        "color": [
          "STRING",
          {
            "default": "0, 0, 0",
            "tooltip": "Color as RGB values in range 0-255, separated by commas."
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "target_width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1,
            "forceInput": true
          }
        ],
        "target_height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "left",
        "right",
        "top",
        "bottom",
        "extra_padding",
        "pad_mode",
        "color"
      ],
      "optional": [
        "mask",
        "target_width",
        "target_height"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "images",
      "masks"
    ],
    "name": "ImagePadKJ",
    "display_name": "ImagePad KJ",
    "description": "Pad the input image and optionally mask with the specified padding.",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImagePadForOutpaintMasked": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "feathering": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "left",
        "top",
        "right",
        "bottom",
        "feathering"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ImagePadForOutpaintMasked",
    "display_name": "Image Pad For Outpaint Masked",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "image",
    "output_node": false
  },
  "ImagePadForOutpaintTargetSize": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "target_width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "target_height": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "feathering": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "target_width",
        "target_height",
        "feathering",
        "upscale_method"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ImagePadForOutpaintTargetSize",
    "display_name": "Image Pad For Outpaint Target Size",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "image",
    "output_node": false
  },
  "ImagePrepForICLora": {
    "input": {
      "required": {
        "reference_image": [
          "IMAGE"
        ],
        "output_width": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "output_height": [
          "INT",
          {
            "default": 1024,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "border_width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ]
      },
      "optional": {
        "latent_image": [
          "IMAGE"
        ],
        "latent_mask": [
          "MASK"
        ],
        "reference_mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "reference_image",
        "output_width",
        "output_height",
        "border_width"
      ],
      "optional": [
        "latent_image",
        "latent_mask",
        "reference_mask"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ImagePrepForICLora",
    "display_name": "Image Prep For ICLora",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "image",
    "output_node": false
  },
  "ImageResizeKJ": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area",
            "bicubic",
            "lanczos"
          ]
        ],
        "keep_proportion": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "divisible_by": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 512,
            "step": 1
          }
        ]
      },
      "optional": {
        "width_input": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "height_input": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "get_image_size": [
          "IMAGE"
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "width",
        "height",
        "upscale_method",
        "keep_proportion",
        "divisible_by"
      ],
      "optional": [
        "width_input",
        "height_input",
        "get_image_size",
        "crop"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "width",
      "height"
    ],
    "name": "ImageResizeKJ",
    "display_name": "Resize Image",
    "description": "\nResizes the image to the specified width and height.  \nSize can be retrieved from the inputs, and the final scale  \nis  determined in this order of importance:  \n- get_image_size  \n- width_input and height_input  \n- width and height widgets  \n  \nKeep proportions keeps the aspect ratio of the image, by  \nhighest dimension.  \n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ImageUpscaleWithModelBatched": {
    "input": {
      "required": {
        "upscale_model": [
          "UPSCALE_MODEL"
        ],
        "images": [
          "IMAGE"
        ],
        "per_batch": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "upscale_model",
        "images",
        "per_batch"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageUpscaleWithModelBatched",
    "display_name": "Image Upscale With Model Batched",
    "description": "\nSame as ComfyUI native model upscaling node,  \nbut allows setting sub-batches for reduced VRAM usage.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "InsertImagesToBatchIndexed": {
    "input": {
      "required": {
        "original_images": [
          "IMAGE"
        ],
        "images_to_insert": [
          "IMAGE"
        ],
        "indexes": [
          "STRING",
          {
            "default": "0, 1, 2",
            "multiline": true
          }
        ]
      },
      "optional": {
        "mode": [
          [
            "replace",
            "insert"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "original_images",
        "images_to_insert",
        "indexes"
      ],
      "optional": [
        "mode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "InsertImagesToBatchIndexed",
    "display_name": "Insert Images To Batch Indexed",
    "description": "\nInserts images at the specified indices into the original image batch.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "InsertLatentToIndexed": {
    "input": {
      "required": {
        "source": [
          "LATENT"
        ],
        "destination": [
          "LATENT"
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": -1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "source",
        "destination",
        "index"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "InsertLatentToIndexed",
    "display_name": "Insert Latent To Index",
    "description": "\nInserts a latent at the specified index into the original latent batch.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/latents",
    "output_node": false
  },
  "LoadAndResizeImage": {
    "input": {
      "required": {
        "image": [
          [
            "1.mp4",
            "1743139954017_TDV72HWXg9.jpeg",
            "1743586696790_gZJJX9pmlv.jpeg",
            "2.jpeg",
            "2.mp4",
            "3.jpeg",
            "3.mp4",
            "4.jpeg",
            "4.mp4",
            "5.mp4",
            "5.png",
            "6.jpeg",
            "6.mp4",
            "WanI2V_Result_00016.mp4",
            "WanI2V_Result_00036.mp4",
            "WanI2V_Result_00056.mp4",
            "bird_input_1.png",
            "example.png",
            "finalVideo_v42_2025-04-03.mp4",
            "pass_2_upscaled_00001_ (1).png",
            "pass_2_upscaled_00001_.png"
          ],
          {
            "image_upload": true
          }
        ],
        "resize": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "repeat": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "keep_proportion": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "divisible_by": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 512,
            "step": 1
          }
        ],
        "mask_channel": [
          [
            "alpha",
            "red",
            "green",
            "blue"
          ],
          {
            "tooltip": "Channel to use for the mask output"
          }
        ],
        "background_color": [
          "STRING",
          {
            "default": "",
            "tooltip": "Fills the alpha channel with the specified color."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "resize",
        "width",
        "height",
        "repeat",
        "keep_proportion",
        "divisible_by",
        "mask_channel",
        "background_color"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "INT",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "width",
      "height",
      "image_path"
    ],
    "name": "LoadAndResizeImage",
    "display_name": "Load & Resize Image",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "LoadImagesFromFolderKJ": {
    "input": {
      "required": {
        "folder": [
          "STRING",
          {
            "default": ""
          }
        ],
        "width": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 1024,
            "min": 64,
            "step": 1
          }
        ],
        "keep_aspect_ratio": [
          [
            "crop",
            "pad",
            "stretch"
          ]
        ]
      },
      "optional": {
        "image_load_cap": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "start_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "step": 1
          }
        ],
        "include_subfolders": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "folder",
        "width",
        "height",
        "keep_aspect_ratio"
      ],
      "optional": [
        "image_load_cap",
        "start_index",
        "include_subfolders"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "count",
      "image_path"
    ],
    "name": "LoadImagesFromFolderKJ",
    "display_name": "Load Images From Folder (KJ)",
    "description": "Loads images from a folder into a batch, images are resized and loaded into a batch.",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "MergeImageChannels": {
    "input": {
      "required": {
        "red": [
          "IMAGE"
        ],
        "green": [
          "IMAGE"
        ],
        "blue": [
          "IMAGE"
        ]
      },
      "optional": {
        "alpha": [
          "MASK",
          {
            "default": null
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "red",
        "green",
        "blue"
      ],
      "optional": [
        "alpha"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "MergeImageChannels",
    "display_name": "Merge Image Channels",
    "description": "\nMerges channel data into an image.  \n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "PadImageBatchInterleaved": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "empty_frames_per_image": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "pad_frame_value": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "add_after_last": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "empty_frames_per_image",
        "pad_frame_value",
        "add_after_last"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "images",
      "masks"
    ],
    "name": "PadImageBatchInterleaved",
    "display_name": "Pad Image Batch Interleaved",
    "description": "\nInserts empty frames between the images in a batch.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "PreviewAnimation": {
    "input": {
      "required": {
        "fps": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.01,
            "max": 1000.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "images": [
          "IMAGE"
        ],
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "fps"
      ],
      "optional": [
        "images",
        "masks"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "PreviewAnimation",
    "display_name": "Preview Animation",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": true
  },
  "RemapImageRange": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "min": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -10.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "max": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "clamp": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "min",
        "max",
        "clamp"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "RemapImageRange",
    "display_name": "Remap Image Range",
    "description": "\nRemaps the image values to the specified range. \n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ReverseImageBatch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ReverseImageBatch",
    "display_name": "Reverse Image Batch",
    "description": "\nReverses the order of the images in a batch.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "ReplaceImagesInBatch": {
    "input": {
      "required": {
        "original_images": [
          "IMAGE"
        ],
        "replacement_images": [
          "IMAGE"
        ],
        "start_index": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ]
      },
      "optional": {
        "original_masks": [
          "MASK"
        ],
        "replacement_masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "original_images",
        "replacement_images",
        "start_index"
      ],
      "optional": [
        "original_masks",
        "replacement_masks"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ReplaceImagesInBatch",
    "display_name": "Replace Images In Batch",
    "description": "\nReplaces the images in a batch, starting from the specified start index,  \nwith the replacement images.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "SaveImageWithAlpha": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "mask",
        "filename_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveImageWithAlpha",
    "display_name": "Save Image With Alpha",
    "description": "\nSaves an image and mask as .PNG with the mask as the alpha channel. \n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": true
  },
  "SaveImageKJ": {
    "input": {
      "required": {
        "images": [
          "IMAGE",
          {
            "tooltip": "The images to save."
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ComfyUI",
            "tooltip": "The prefix for the file to save. This may include formatting information such as %date:yyyy-MM-dd% or %Empty Latent Image.width% to include values from nodes."
          }
        ],
        "output_folder": [
          "STRING",
          {
            "default": "output",
            "tooltip": "The folder to save the images to."
          }
        ]
      },
      "optional": {
        "caption_file_extension": [
          "STRING",
          {
            "default": ".txt",
            "tooltip": "The extension for the caption file."
          }
        ],
        "caption": [
          "STRING",
          {
            "forceInput": true,
            "tooltip": "string to save as .txt file"
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "output_folder"
      ],
      "optional": [
        "caption_file_extension",
        "caption"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "filename"
    ],
    "name": "SaveImageKJ",
    "display_name": "Save Image KJ",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": true
  },
  "ShuffleImageBatch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "seed"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ShuffleImageBatch",
    "display_name": "Shuffle Image Batch",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "SplitImageChannels": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "red",
      "green",
      "blue",
      "mask"
    ],
    "name": "SplitImageChannels",
    "display_name": "Split Image Channels",
    "description": "\nSplits image channels into images where the selected channel  \nis repeated for all channels, and the alpha as a mask. \n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "TransitionImagesMulti": {
    "input": {
      "required": {
        "inputcount": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000,
            "step": 1
          }
        ],
        "image_1": [
          "IMAGE"
        ],
        "image_2": [
          "IMAGE"
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out",
            "bounce",
            "elastic",
            "glitchy",
            "exponential_ease_out"
          ]
        ],
        "transition_type": [
          [
            "horizontal slide",
            "vertical slide",
            "box",
            "circle",
            "horizontal door",
            "vertical door",
            "fade"
          ]
        ],
        "transitioning_frames": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "blur_radius": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "reverse": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "device": [
          [
            "CPU",
            "GPU"
          ],
          {
            "default": "CPU"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "inputcount",
        "image_1",
        "image_2",
        "interpolation",
        "transition_type",
        "transitioning_frames",
        "blur_radius",
        "reverse",
        "device"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "TransitionImagesMulti",
    "display_name": "Transition Images Multi",
    "description": "\nCreates transitions between images.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "TransitionImagesInBatch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out",
            "bounce",
            "elastic",
            "glitchy",
            "exponential_ease_out"
          ]
        ],
        "transition_type": [
          [
            "horizontal slide",
            "vertical slide",
            "box",
            "circle",
            "horizontal door",
            "vertical door",
            "fade"
          ]
        ],
        "transitioning_frames": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "blur_radius": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "reverse": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "device": [
          [
            "CPU",
            "GPU"
          ],
          {
            "default": "CPU"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "interpolation",
        "transition_type",
        "transitioning_frames",
        "blur_radius",
        "reverse",
        "device"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "TransitionImagesInBatch",
    "display_name": "Transition Images In Batch",
    "description": "\nCreates transitions between images in a batch.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "BatchCropFromMask": {
    "input": {
      "required": {
        "original_images": [
          "IMAGE"
        ],
        "masks": [
          "MASK"
        ],
        "crop_size_mult": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "bbox_smooth_alpha": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "original_images",
        "masks",
        "crop_size_mult",
        "bbox_smooth_alpha"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "BBOX",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "original_images",
      "cropped_images",
      "bboxes",
      "width",
      "height"
    ],
    "name": "BatchCropFromMask",
    "display_name": "Batch Crop From Mask",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "BatchCropFromMaskAdvanced": {
    "input": {
      "required": {
        "original_images": [
          "IMAGE"
        ],
        "masks": [
          "MASK"
        ],
        "crop_size_mult": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "bbox_smooth_alpha": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "original_images",
        "masks",
        "crop_size_mult",
        "bbox_smooth_alpha"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "MASK",
      "IMAGE",
      "MASK",
      "BBOX",
      "BBOX",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "original_images",
      "cropped_images",
      "cropped_masks",
      "combined_crop_image",
      "combined_crop_masks",
      "bboxes",
      "combined_bounding_box",
      "bbox_width",
      "bbox_height"
    ],
    "name": "BatchCropFromMaskAdvanced",
    "display_name": "Batch Crop From Mask Advanced",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "FilterZeroMasksAndCorrespondingImages": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      },
      "optional": {
        "original_images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ],
      "optional": [
        "original_images"
      ]
    },
    "output": [
      "MASK",
      "IMAGE",
      "IMAGE",
      "INDEXES"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "non_zero_masks_out",
      "non_zero_mask_images_out",
      "zero_mask_images_out",
      "zero_mask_images_out_indexes"
    ],
    "name": "FilterZeroMasksAndCorrespondingImages",
    "display_name": "FilterZeroMasksAndCorrespondingImages",
    "description": "\nFilter out all the empty (i.e. all zero) mask in masks  \nAlso filter out all the corresponding images in original_images by indexes if provide  \n  \noriginal_images (optional): If provided, need have same length as masks.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "InsertImageBatchByIndexes": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "images_to_insert": [
          "IMAGE"
        ],
        "insert_indexes": [
          "INDEXES"
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "images_to_insert",
        "insert_indexes"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images_after_insert"
    ],
    "name": "InsertImageBatchByIndexes",
    "display_name": "Insert Image Batch By Indexes",
    "description": "\nThis node is designed to be use with node FilterZeroMasksAndCorrespondingImages\nIt inserts the images_to_insert into images according to insert_indexes\n\nReturns:\n    images_after_insert: updated original images with origonal sequence order\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "BatchUncrop": {
    "input": {
      "required": {
        "original_images": [
          "IMAGE"
        ],
        "cropped_images": [
          "IMAGE"
        ],
        "bboxes": [
          "BBOX"
        ],
        "border_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "crop_rescale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "border_top": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "border_bottom": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "border_left": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "border_right": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "original_images",
        "cropped_images",
        "bboxes",
        "border_blending",
        "crop_rescale",
        "border_top",
        "border_bottom",
        "border_left",
        "border_right"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "BatchUncrop",
    "display_name": "Batch Uncrop",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "BatchUncropAdvanced": {
    "input": {
      "required": {
        "original_images": [
          "IMAGE"
        ],
        "cropped_images": [
          "IMAGE"
        ],
        "cropped_masks": [
          "MASK"
        ],
        "combined_crop_mask": [
          "MASK"
        ],
        "bboxes": [
          "BBOX"
        ],
        "border_blending": [
          "FLOAT",
          {
            "default": 0.25,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "crop_rescale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "use_combined_mask": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "use_square_mask": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "combined_bounding_box": [
          "BBOX",
          {
            "default": null
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "original_images",
        "cropped_images",
        "cropped_masks",
        "combined_crop_mask",
        "bboxes",
        "border_blending",
        "crop_rescale",
        "use_combined_mask",
        "use_square_mask"
      ],
      "optional": [
        "combined_bounding_box"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "BatchUncropAdvanced",
    "display_name": "Batch Uncrop Advanced",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "SplitBboxes": {
    "input": {
      "required": {
        "bboxes": [
          "BBOX"
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 99999999,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "bboxes",
        "index"
      ]
    },
    "output": [
      "BBOX",
      "BBOX"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "bboxes_a",
      "bboxes_b"
    ],
    "name": "SplitBboxes",
    "display_name": "Split Bboxes",
    "description": "\nSplits the specified bbox list at the given index into two lists.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "BboxToInt": {
    "input": {
      "required": {
        "bboxes": [
          "BBOX"
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 99999999,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "bboxes",
        "index"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "x_min",
      "y_min",
      "width",
      "height",
      "center_x",
      "center_y"
    ],
    "name": "BboxToInt",
    "display_name": "Bbox To Int",
    "description": "\nReturns selected index from bounding box list as integers.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "BboxVisualize": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "bboxes": [
          "BBOX"
        ],
        "line_width": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "bboxes",
        "line_width"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "images"
    ],
    "name": "BboxVisualize",
    "display_name": "Bbox Visualize",
    "description": "\nVisualizes the specified bbox on the image.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking",
    "output_node": false
  },
  "GenerateNoise": {
    "input": {
      "required": {
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 4096,
            "step": 0.01
          }
        ],
        "constant_batch_noise": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "normalize": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ],
        "sigmas": [
          "SIGMAS"
        ],
        "latent_channels": [
          [
            "4",
            "16"
          ]
        ],
        "shape": [
          [
            "BCHW",
            "BCTHW",
            "BTCHW"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "width",
        "height",
        "batch_size",
        "seed",
        "multiplier",
        "constant_batch_noise",
        "normalize"
      ],
      "optional": [
        "model",
        "sigmas",
        "latent_channels",
        "shape"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "GenerateNoise",
    "display_name": "Generate Noise",
    "description": "\nGenerates noise for injection or to be used as empty latents on samplers with add_noise off.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/noise",
    "output_node": false
  },
  "FlipSigmasAdjusted": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ],
        "divide_by_last_sigma": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "divide_by": [
          "FLOAT",
          {
            "default": 1,
            "min": 1,
            "max": 255,
            "step": 0.01
          }
        ],
        "offset_by": [
          "INT",
          {
            "default": 1,
            "min": -100,
            "max": 100,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas",
        "divide_by_last_sigma",
        "divide_by",
        "offset_by"
      ]
    },
    "output": [
      "SIGMAS",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "SIGMAS",
      "sigmas_string"
    ],
    "name": "FlipSigmasAdjusted",
    "display_name": "Flip Sigmas Adjusted",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/noise",
    "output_node": false
  },
  "InjectNoiseToLatent": {
    "input": {
      "required": {
        "latents": [
          "LATENT"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 200.0,
            "step": 0.0001
          }
        ],
        "noise": [
          "LATENT"
        ],
        "normalize": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "average": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ],
        "mix_randn_amount": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.001
          }
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latents",
        "strength",
        "noise",
        "normalize",
        "average"
      ],
      "optional": [
        "mask",
        "mix_randn_amount",
        "seed"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "InjectNoiseToLatent",
    "display_name": "Inject Noise To Latent",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/noise",
    "output_node": false
  },
  "CustomSigmas": {
    "input": {
      "required": {
        "sigmas_string": [
          "STRING",
          {
            "default": "14.615, 6.475, 3.861, 2.697, 1.886, 1.396, 0.963, 0.652, 0.399, 0.152, 0.029",
            "multiline": true
          }
        ],
        "interpolate_to_steps": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas_string",
        "interpolate_to_steps"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "CustomSigmas",
    "display_name": "Custom Sigmas",
    "description": "\nCreates a sigmas tensor from a string of comma separated values.  \nExamples: \n   \nNvidia's optimized AYS 10 step schedule for SD 1.5:  \n14.615, 6.475, 3.861, 2.697, 1.886, 1.396, 0.963, 0.652, 0.399, 0.152, 0.029  \nSDXL:   \n14.615, 6.315, 3.771, 2.181, 1.342, 0.862, 0.555, 0.380, 0.234, 0.113, 0.029  \nSVD:  \n700.00, 54.5, 15.886, 7.977, 4.248, 1.789, 0.981, 0.403, 0.173, 0.034, 0.002  \n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/noise",
    "output_node": false
  },
  "StringToFloatList": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "default": "1, 2, 3",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "StringToFloatList",
    "display_name": "String to Float List",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/misc",
    "output_node": false
  },
  "WidgetToString": {
    "input": {
      "required": {
        "id": [
          "INT",
          {
            "default": 0
          }
        ],
        "widget_name": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "return_all": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "any_input": [
          "*",
          {}
        ],
        "node_title": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "allowed_float_decimals": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 10,
            "tooltip": "Number of decimal places to display for float values"
          }
        ]
      },
      "hidden": {
        "extra_pnginfo": "EXTRA_PNGINFO",
        "prompt": "PROMPT",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "id",
        "widget_name",
        "return_all"
      ],
      "optional": [
        "any_input",
        "node_title",
        "allowed_float_decimals"
      ],
      "hidden": [
        "extra_pnginfo",
        "prompt",
        "unique_id"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "WidgetToString",
    "display_name": "Widget To String",
    "description": "\nSelects a node and it's specified widget and outputs the value as a string.  \nIf no node id or title is provided it will use the 'any_input' link and use that node.  \nTo see node id's, enable node id display from Manager badge menu.  \nAlternatively you can search with the node title. Node titles ONLY exist if they  \nare manually edited!  \nThe 'any_input' is required for making sure the node you want the value from exists in the workflow.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "SaveStringKJ": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "forceInput": true,
            "tooltip": "string to save as .txt file"
          }
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "text",
            "tooltip": "The prefix for the file to save. This may include formatting information such as %date:yyyy-MM-dd% or %Empty Latent Image.width% to include values from nodes."
          }
        ],
        "output_folder": [
          "STRING",
          {
            "default": "output",
            "tooltip": "The folder to save the images to."
          }
        ]
      },
      "optional": {
        "file_extension": [
          "STRING",
          {
            "default": ".txt",
            "tooltip": "The extension for the caption file."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string",
        "filename_prefix",
        "output_folder"
      ],
      "optional": [
        "file_extension"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "filename"
    ],
    "name": "SaveStringKJ",
    "display_name": "Save String KJ",
    "description": "Saves the input string to your ComfyUI output directory.",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/misc",
    "output_node": true
  },
  "DummyOut": {
    "input": {
      "required": {
        "any_input": [
          "*",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "any_input"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "DummyOut",
    "display_name": "Dummy Out",
    "description": "\nDoes nothing, used to trigger generic workflow output.    \nA way to get previews in the UI without saving anything to disk.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/misc",
    "output_node": true
  },
  "GetLatentsFromBatchIndexed": {
    "input": {
      "required": {
        "latents": [
          "LATENT"
        ],
        "indexes": [
          "STRING",
          {
            "default": "0, 1, 2",
            "multiline": true
          }
        ],
        "latent_format": [
          [
            "BCHW",
            "BTCHW",
            "BCTHW"
          ],
          {
            "default": "BCHW"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latents",
        "indexes",
        "latent_format"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "GetLatentsFromBatchIndexed",
    "display_name": "Get Latents From Batch Indexed",
    "description": "\nSelects and returns the latents at the specified indices as an latent batch.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/latents",
    "output_node": false
  },
  "ScaleBatchPromptSchedule": {
    "input": {
      "required": {
        "input_str": [
          "STRING",
          {
            "forceInput": true,
            "default": "0:(0.0),\n7:(1.0),\n15:(0.0)\n"
          }
        ],
        "old_frame_count": [
          "INT",
          {
            "forceInput": true,
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "new_frame_count": [
          "INT",
          {
            "forceInput": true,
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_str",
        "old_frame_count",
        "new_frame_count"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "ScaleBatchPromptSchedule",
    "display_name": "Scale Batch Prompt Schedule",
    "description": "\nScales a batch schedule from Fizz' nodes BatchPromptSchedule\nto a different frame count.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/misc",
    "output_node": false
  },
  "CameraPoseVisualizer": {
    "input": {
      "required": {
        "pose_file_path": [
          "STRING",
          {
            "default": "",
            "multiline": false
          }
        ],
        "base_xval": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "zval": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0,
            "max": 100,
            "step": 0.01
          }
        ],
        "scale": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "use_exact_fx": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "relative_c2w": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "use_viewer": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "cameractrl_poses": [
          "CAMERACTRL_POSES",
          {
            "default": null
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "pose_file_path",
        "base_xval",
        "zval",
        "scale",
        "use_exact_fx",
        "relative_c2w",
        "use_viewer"
      ],
      "optional": [
        "cameractrl_poses"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "CameraPoseVisualizer",
    "display_name": "Camera Pose Visualizer",
    "description": "\nVisualizes the camera poses, from Animatediff-Evolved CameraCtrl Pose  \nor a .txt file with RealEstate camera intrinsics and coordinates, in a 3D plot. \n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/misc",
    "output_node": false
  },
  "AppendStringsToList": {
    "input": {
      "required": {
        "string1": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ],
        "string2": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string1",
        "string2"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "AppendStringsToList",
    "display_name": "Append Strings To List",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "JoinStrings": {
    "input": {
      "required": {
        "string1": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ],
        "string2": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ],
        "delimiter": [
          "STRING",
          {
            "default": " ",
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string1",
        "string2",
        "delimiter"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "JoinStrings",
    "display_name": "Join Strings",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "JoinStringMulti": {
    "input": {
      "required": {
        "inputcount": [
          "INT",
          {
            "default": 2,
            "min": 2,
            "max": 1000,
            "step": 1
          }
        ],
        "string_1": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ],
        "string_2": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ],
        "delimiter": [
          "STRING",
          {
            "default": " ",
            "multiline": false
          }
        ],
        "return_list": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "inputcount",
        "string_1",
        "string_2",
        "delimiter",
        "return_list"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "string"
    ],
    "name": "JoinStringMulti",
    "display_name": "Join String Multi",
    "description": "\nCreates single string, or a list of strings, from  \nmultiple input strings.  \nYou can set how many inputs the node has,  \nwith the **inputcount** and clicking update.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "SomethingToString": {
    "input": {
      "required": {
        "input": [
          "*",
          {}
        ]
      },
      "optional": {
        "prefix": [
          "STRING",
          {
            "default": ""
          }
        ],
        "suffix": [
          "STRING",
          {
            "default": ""
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input"
      ],
      "optional": [
        "prefix",
        "suffix"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "SomethingToString",
    "display_name": "Something To String",
    "description": "\nConverts any type to a string.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "Sleep": {
    "input": {
      "required": {
        "input": [
          "*",
          {}
        ],
        "minutes": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1439
          }
        ],
        "seconds": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 59.99,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input",
        "minutes",
        "seconds"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "Sleep",
    "display_name": "Sleep",
    "description": "\nDelays the execution for the input amount of time.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/misc",
    "output_node": false
  },
  "VRAM_Debug": {
    "input": {
      "required": {
        "empty_cache": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "gc_collect": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "unload_all_models": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "any_input": [
          "*",
          {}
        ],
        "image_pass": [
          "IMAGE"
        ],
        "model_pass": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "empty_cache",
        "gc_collect",
        "unload_all_models"
      ],
      "optional": [
        "any_input",
        "image_pass",
        "model_pass"
      ]
    },
    "output": [
      "*",
      "IMAGE",
      "MODEL",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "any_output",
      "image_pass",
      "model_pass",
      "freemem_before",
      "freemem_after"
    ],
    "name": "VRAM_Debug",
    "display_name": "VRAM Debug",
    "description": "\nReturns the inputs unchanged, they are only used as triggers,  \nand performs comfy model management functions and garbage collection,  \nreports free VRAM before and after the operations.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/misc",
    "output_node": false
  },
  "EmptyLatentImagePresets": {
    "input": {
      "required": {
        "dimensions": [
          [
            "512 x 512 (1:1)",
            "768 x 512 (1.5:1)",
            "960 x 512 (1.875:1)",
            "1024 x 512 (2:1)",
            "1024 x 576 (1.778:1)",
            "1536 x 640 (2.4:1)",
            "1344 x 768 (1.75:1)",
            "1216 x 832 (1.46:1)",
            "1152 x 896 (1.286:1)",
            "1024 x 1024 (1:1)"
          ],
          {
            "default": "512 x 512 (1:1)"
          }
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "dimensions",
        "invert",
        "batch_size"
      ]
    },
    "output": [
      "LATENT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "Latent",
      "Width",
      "Height"
    ],
    "name": "EmptyLatentImagePresets",
    "display_name": "Empty Latent Image Presets",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/latents",
    "output_node": false
  },
  "EmptyLatentImageCustomPresets": {
    "input": {
      "required": {
        "dimensions": [
          []
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "dimensions",
        "invert",
        "batch_size"
      ]
    },
    "output": [
      "LATENT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "Latent",
      "Width",
      "Height"
    ],
    "name": "EmptyLatentImageCustomPresets",
    "display_name": "Empty Latent Image Custom Presets",
    "description": "\nGenerates an empty latent image with the specified dimensions.  \nThe choices are loaded from 'custom_dimensions.json' in the nodes folder.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/latents",
    "output_node": false
  },
  "ModelPassThrough": {
    "input": {
      "required": {},
      "optional": {
        "model": [
          "MODEL"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "model"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "model"
    ],
    "name": "ModelPassThrough",
    "display_name": "ModelPass",
    "description": "\n    Simply passes through the model,\n    workaround for Set node not allowing bypassed inputs.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/misc",
    "output_node": false
  },
  "ModelSaveKJ": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "diffusion_models/ComfyUI"
          }
        ],
        "model_key_prefix": [
          "STRING",
          {
            "default": "model.diffusion_model."
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "model",
        "filename_prefix",
        "model_key_prefix"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ModelSaveKJ",
    "display_name": "Model Save KJ",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "advanced/model_merging",
    "output_node": true
  },
  "SetShakkerLabsUnionControlNetType": {
    "input": {
      "required": {
        "control_net": [
          "CONTROL_NET"
        ],
        "type": [
          [
            "auto",
            "canny",
            "tile",
            "depth",
            "blur",
            "pose",
            "gray",
            "low quality"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "control_net",
        "type"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "SetShakkerLabsUnionControlNetType",
    "display_name": "Set Shakker Labs Union ControlNet Type",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "conditioning/controlnet",
    "output_node": false
  },
  "StyleModelApplyAdvanced": {
    "input": {
      "required": {
        "conditioning": [
          "CONDITIONING"
        ],
        "style_model": [
          "STYLE_MODEL"
        ],
        "clip_vision_output": [
          "CLIP_VISION_OUTPUT"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning",
        "style_model",
        "clip_vision_output",
        "strength"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "StyleModelApplyAdvanced",
    "display_name": "Style Model Apply Advanced",
    "description": "StyleModelApply but with strength parameter",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "NormalizedAmplitudeToMask": {
    "input": {
      "required": {
        "normalized_amp": [
          "NORMALIZED_AMPLITUDE"
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_offset": [
          "INT",
          {
            "default": 0,
            "min": -255,
            "max": 255,
            "step": 1
          }
        ],
        "location_x": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "location_y": [
          "INT",
          {
            "default": 256,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "size": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ],
        "shape": [
          [
            "none",
            "circle",
            "square",
            "triangle"
          ],
          {
            "default": "none"
          }
        ],
        "color": [
          [
            "white",
            "amplitude"
          ],
          {
            "default": "amplitude"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "normalized_amp",
        "width",
        "height",
        "frame_offset",
        "location_x",
        "location_y",
        "size",
        "shape",
        "color"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "NormalizedAmplitudeToMask",
    "display_name": "NormalizedAmplitudeToMask",
    "description": "\nWorks as a bridge to the AudioScheduler -nodes:  \nhttps://github.com/a1lazydog/ComfyUI-AudioScheduler  \nCreates masks based on the normalized amplitude.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/audio",
    "output_node": false
  },
  "NormalizedAmplitudeToFloatList": {
    "input": {
      "required": {
        "normalized_amp": [
          "NORMALIZED_AMPLITUDE"
        ]
      }
    },
    "input_order": {
      "required": [
        "normalized_amp"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "NormalizedAmplitudeToFloatList",
    "display_name": "NormalizedAmplitudeToFloatList",
    "description": "\nWorks as a bridge to the AudioScheduler -nodes:  \nhttps://github.com/a1lazydog/ComfyUI-AudioScheduler  \nCreates a list of floats from the normalized amplitude.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/audio",
    "output_node": false
  },
  "OffsetMaskByNormalizedAmplitude": {
    "input": {
      "required": {
        "normalized_amp": [
          "NORMALIZED_AMPLITUDE"
        ],
        "mask": [
          "MASK"
        ],
        "x": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 16384,
            "step": 1,
            "display": "number"
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": -4096,
            "max": 16384,
            "step": 1,
            "display": "number"
          }
        ],
        "rotate": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "angle_multiplier": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -1.0,
            "max": 1.0,
            "step": 0.001,
            "display": "number"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "normalized_amp",
        "mask",
        "x",
        "y",
        "rotate",
        "angle_multiplier"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "mask"
    ],
    "name": "OffsetMaskByNormalizedAmplitude",
    "display_name": "OffsetMaskByNormalizedAmplitude",
    "description": "\nWorks as a bridge to the AudioScheduler -nodes:  \nhttps://github.com/a1lazydog/ComfyUI-AudioScheduler  \nOffsets masks based on the normalized amplitude.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/audio",
    "output_node": false
  },
  "ImageTransformByNormalizedAmplitude": {
    "input": {
      "required": {
        "normalized_amp": [
          "NORMALIZED_AMPLITUDE"
        ],
        "zoom_scale": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -1.0,
            "max": 1.0,
            "step": 0.001,
            "display": "number"
          }
        ],
        "x_offset": [
          "INT",
          {
            "default": 0,
            "min": -16383,
            "max": 16384,
            "step": 1,
            "display": "number"
          }
        ],
        "y_offset": [
          "INT",
          {
            "default": 0,
            "min": -16383,
            "max": 16384,
            "step": 1,
            "display": "number"
          }
        ],
        "cumulative": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "normalized_amp",
        "zoom_scale",
        "x_offset",
        "y_offset",
        "cumulative",
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageTransformByNormalizedAmplitude",
    "display_name": "ImageTransformByNormalizedAmplitude",
    "description": "\nWorks as a bridge to the AudioScheduler -nodes:  \nhttps://github.com/a1lazydog/ComfyUI-AudioScheduler  \nTransforms image based on the normalized amplitude.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/audio",
    "output_node": false
  },
  "AudioConcatenate": {
    "input": {
      "required": {
        "audio1": [
          "AUDIO"
        ],
        "audio2": [
          "AUDIO"
        ],
        "direction": [
          [
            "right",
            "left"
          ],
          {
            "default": "right"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "audio1",
        "audio2",
        "direction"
      ]
    },
    "output": [
      "AUDIO"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "AUDIO"
    ],
    "name": "AudioConcatenate",
    "display_name": "AudioConcatenate",
    "description": "\nConcatenates the audio1 to audio2 in the specified direction.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/audio",
    "output_node": false
  },
  "SplineEditor": {
    "input": {
      "required": {
        "points_store": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "coordinates": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "mask_width": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ],
        "mask_height": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ],
        "points_to_sample": [
          "INT",
          {
            "default": 16,
            "min": 2,
            "max": 1000,
            "step": 1
          }
        ],
        "sampling_method": [
          [
            "path",
            "time",
            "controlpoints"
          ],
          {
            "default": "time"
          }
        ],
        "interpolation": [
          [
            "cardinal",
            "monotone",
            "basis",
            "linear",
            "step-before",
            "step-after",
            "polar",
            "polar-reverse"
          ],
          {
            "default": "cardinal"
          }
        ],
        "tension": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "repeat_output": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ],
        "float_output_type": [
          [
            "list",
            "pandas series",
            "tensor"
          ],
          {
            "default": "list"
          }
        ]
      },
      "optional": {
        "min_value": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -10000.0,
            "max": 10000.0,
            "step": 0.01
          }
        ],
        "max_value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10000.0,
            "max": 10000.0,
            "step": 0.01
          }
        ],
        "bg_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "points_store",
        "coordinates",
        "mask_width",
        "mask_height",
        "points_to_sample",
        "sampling_method",
        "interpolation",
        "tension",
        "repeat_output",
        "float_output_type"
      ],
      "optional": [
        "min_value",
        "max_value",
        "bg_image"
      ]
    },
    "output": [
      "MASK",
      "STRING",
      "FLOAT",
      "INT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "mask",
      "coord_str",
      "float",
      "count",
      "normalized_str"
    ],
    "name": "SplineEditor",
    "display_name": "Spline Editor",
    "description": "\n# WORK IN PROGRESS  \nDo not count on this as part of your workflow yet,  \nprobably contains lots of bugs and stability is not  \nguaranteed!!  \n  \n## Graphical editor to create values for various   \n## schedules and/or mask batches.  \n\n**Shift + click** to add control point at end.\n**Ctrl + click** to add control point (subdivide) between two points.  \n**Right click on a point** to delete it.    \nNote that you can't delete from start/end.  \n  \nRight click on canvas for context menu:  \nThese are purely visual options, doesn't affect the output:  \n - Toggle handles visibility\n - Display sample points: display the points to be returned.  \n\n**points_to_sample** value sets the number of samples  \nreturned from the **drawn spline itself**, this is independent from the  \nactual control points, so the interpolation type matters.  \nsampling_method: \n - time: samples along the time axis, used for schedules  \n - path: samples along the path itself, useful for coordinates  \n\noutput types:\n - mask batch  \n        example compatible nodes: anything that takes masks  \n - list of floats\n        example compatible nodes: IPAdapter weights  \n - pandas series\n        example compatible nodes: anything that takes Fizz'  \n        nodes Batch Value Schedule  \n - torch tensor  \n        example compatible nodes: unknown\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/weights",
    "output_node": false
  },
  "CreateShapeImageOnPath": {
    "input": {
      "required": {
        "shape": [
          [
            "circle",
            "square",
            "triangle"
          ],
          {
            "default": "circle"
          }
        ],
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "frame_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "shape_width": [
          "INT",
          {
            "default": 128,
            "min": 2,
            "max": 4096,
            "step": 1
          }
        ],
        "shape_height": [
          "INT",
          {
            "default": 128,
            "min": 2,
            "max": 4096,
            "step": 1
          }
        ],
        "shape_color": [
          "STRING",
          {
            "default": "white"
          }
        ],
        "bg_color": [
          "STRING",
          {
            "default": "black"
          }
        ],
        "blur_radius": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "intensity": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 100.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "size_multiplier": [
          "FLOAT",
          {
            "default": [
              1.0
            ],
            "forceInput": true
          }
        ],
        "trailing": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "border_width": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "border_color": [
          "STRING",
          {
            "default": "black"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "shape",
        "coordinates",
        "frame_width",
        "frame_height",
        "shape_width",
        "shape_height",
        "shape_color",
        "bg_color",
        "blur_radius",
        "intensity"
      ],
      "optional": [
        "size_multiplier",
        "trailing",
        "border_width",
        "border_color"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "mask"
    ],
    "name": "CreateShapeImageOnPath",
    "display_name": "Create Shape Image On Path",
    "description": "\nCreates an image or batch of images with the specified shape.  \nLocations are center locations.  \n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "CreateShapeMaskOnPath": {
    "input": {
      "required": {
        "shape": [
          [
            "circle",
            "square",
            "triangle"
          ],
          {
            "default": "circle"
          }
        ],
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "frame_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "shape_width": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ],
        "shape_height": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 1
          }
        ]
      },
      "optional": {
        "size_multiplier": [
          "FLOAT",
          {
            "default": [
              1.0
            ],
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "shape",
        "coordinates",
        "frame_width",
        "frame_height",
        "shape_width",
        "shape_height"
      ],
      "optional": [
        "size_multiplier"
      ]
    },
    "output": [
      "MASK",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "mask",
      "mask_inverted"
    ],
    "name": "CreateShapeMaskOnPath",
    "display_name": "Create Shape Mask On Path",
    "description": "\nCreates a mask or batch of masks with the specified shape.  \nLocations are center locations.  \n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "CreateTextOnPath": {
    "input": {
      "required": {
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text": [
          "STRING",
          {
            "default": "text",
            "multiline": true
          }
        ],
        "frame_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "font": [
          [
            "FreeMono.ttf",
            "FreeMonoBoldOblique.otf",
            "TTNorms-Black.otf"
          ]
        ],
        "font_size": [
          "INT",
          {
            "default": 42
          }
        ],
        "alignment": [
          [
            "left",
            "center",
            "right"
          ],
          {
            "default": "center"
          }
        ],
        "text_color": [
          "STRING",
          {
            "default": "white"
          }
        ]
      },
      "optional": {
        "size_multiplier": [
          "FLOAT",
          {
            "default": [
              1.0
            ],
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "coordinates",
        "text",
        "frame_width",
        "frame_height",
        "font",
        "font_size",
        "alignment",
        "text_color"
      ],
      "optional": [
        "size_multiplier"
      ]
    },
    "output": [
      "IMAGE",
      "MASK",
      "MASK"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "mask",
      "mask_inverted"
    ],
    "name": "CreateTextOnPath",
    "display_name": "Create Text On Path",
    "description": "\nCreates a mask or batch of masks with the specified text.  \nLocations are center locations.  \n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "CreateGradientFromCoords": {
    "input": {
      "required": {
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "frame_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "start_color": [
          "STRING",
          {
            "default": "white"
          }
        ],
        "end_color": [
          "STRING",
          {
            "default": "black"
          }
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 100.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "coordinates",
        "frame_width",
        "frame_height",
        "start_color",
        "end_color",
        "multiplier"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "CreateGradientFromCoords",
    "display_name": "Create Gradient From Coords",
    "description": "\nCreates a gradient image from coordinates.    \n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "CutAndDragOnPath": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "mask": [
          "MASK"
        ],
        "frame_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "frame_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "inpaint": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {
        "bg_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "coordinates",
        "mask",
        "frame_width",
        "frame_height",
        "inpaint"
      ],
      "optional": [
        "bg_image"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "image",
      "mask"
    ],
    "name": "CutAndDragOnPath",
    "display_name": "Cut And Drag On Path",
    "description": "\nCuts the masked area from the image, and drags it along the path. If inpaint is enabled, and no bg_image is provided, the cut area is filled using cv2 TELEA algorithm.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "GradientToFloat": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "steps": [
          "INT",
          {
            "default": 10,
            "min": 2,
            "max": 10000,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "steps"
      ]
    },
    "output": [
      "FLOAT",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "float_x",
      "float_y"
    ],
    "name": "GradientToFloat",
    "display_name": "Gradient To Float",
    "description": "\nCalculates list of floats from image.    \n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "WeightScheduleExtend": {
    "input": {
      "required": {
        "input_values_1": [
          "FLOAT",
          {
            "default": 0.0,
            "forceInput": true
          }
        ],
        "input_values_2": [
          "FLOAT",
          {
            "default": 0.0,
            "forceInput": true
          }
        ],
        "output_type": [
          [
            "match_input",
            "list",
            "pandas series",
            "tensor"
          ],
          {
            "default": "match_input"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_values_1",
        "input_values_2",
        "output_type"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "WeightScheduleExtend",
    "display_name": "Weight Schedule Extend",
    "description": "\nExtends, and converts if needed, different value lists/series  \n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/weights",
    "output_node": false
  },
  "MaskOrImageToWeight": {
    "input": {
      "required": {
        "output_type": [
          [
            "list",
            "pandas series",
            "tensor",
            "string"
          ],
          {
            "default": "list"
          }
        ]
      },
      "optional": {
        "images": [
          "IMAGE"
        ],
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "output_type"
      ],
      "optional": [
        "images",
        "masks"
      ]
    },
    "output": [
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "FLOAT",
      "STRING"
    ],
    "name": "MaskOrImageToWeight",
    "display_name": "Mask Or Image To Weight",
    "description": "\nGets the mean values from mask or image batch  \nand returns that as the selected output type.   \n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/weights",
    "output_node": false
  },
  "WeightScheduleConvert": {
    "input": {
      "required": {
        "input_values": [
          "FLOAT",
          {
            "default": 0.0,
            "forceInput": true
          }
        ],
        "output_type": [
          [
            "match_input",
            "list",
            "pandas series",
            "tensor"
          ],
          {
            "default": "list"
          }
        ],
        "invert": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "repeat": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ]
      },
      "optional": {
        "remap_to_frames": [
          "INT",
          {
            "default": 0
          }
        ],
        "interpolation_curve": [
          "FLOAT",
          {
            "forceInput": true
          }
        ],
        "remap_values": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "remap_min": [
          "FLOAT",
          {
            "default": 0.0,
            "min": -100000,
            "max": 100000.0,
            "step": 0.01
          }
        ],
        "remap_max": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100000,
            "max": 100000.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_values",
        "output_type",
        "invert",
        "repeat"
      ],
      "optional": [
        "remap_to_frames",
        "interpolation_curve",
        "remap_values",
        "remap_min",
        "remap_max"
      ]
    },
    "output": [
      "FLOAT",
      "STRING",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "FLOAT",
      "STRING",
      "INT"
    ],
    "name": "WeightScheduleConvert",
    "display_name": "Weight Schedule Convert",
    "description": "\nConverts different value lists/series to another type.  \n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/weights",
    "output_node": false
  },
  "FloatToMask": {
    "input": {
      "required": {
        "input_values": [
          "FLOAT",
          {
            "forceInput": true,
            "default": 0
          }
        ],
        "width": [
          "INT",
          {
            "default": 100,
            "min": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 100,
            "min": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input_values",
        "width",
        "height"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "FloatToMask",
    "display_name": "Float To Mask",
    "description": "\nGenerates a batch of masks based on the input float values.\nThe batch size is determined by the length of the input float values.\nEach mask is generated with the specified width and height.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/masking/generate",
    "output_node": false
  },
  "FloatToSigmas": {
    "input": {
      "required": {
        "float_list": [
          "FLOAT",
          {
            "default": 0.0,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "float_list"
      ]
    },
    "output": [
      "SIGMAS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SIGMAS"
    ],
    "name": "FloatToSigmas",
    "display_name": "Float To Sigmas",
    "description": "\nCreates a sigmas tensor from list of float values.  \n\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/noise",
    "output_node": false
  },
  "SigmasToFloat": {
    "input": {
      "required": {
        "sigmas": [
          "SIGMAS"
        ]
      }
    },
    "input_order": {
      "required": [
        "sigmas"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "float"
    ],
    "name": "SigmasToFloat",
    "display_name": "Sigmas To Float",
    "description": "\nCreates a float list from sigmas tensors.  \n\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/noise",
    "output_node": false
  },
  "PlotCoordinates": {
    "input": {
      "required": {
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text": [
          "STRING",
          {
            "default": "title",
            "multiline": false
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ],
        "bbox_width": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ],
        "bbox_height": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ]
      },
      "optional": {
        "size_multiplier": [
          "FLOAT",
          {
            "default": [
              1.0
            ],
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "coordinates",
        "text",
        "width",
        "height",
        "bbox_width",
        "bbox_height"
      ],
      "optional": [
        "size_multiplier"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "images",
      "width",
      "height",
      "bbox_width",
      "bbox_height"
    ],
    "name": "PlotCoordinates",
    "display_name": "Plot Coordinates",
    "description": "\nPlots coordinates to sequence of images using Matplotlib.  \n\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "InterpolateCoords": {
    "input": {
      "required": {
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "interpolation_curve": [
          "FLOAT",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "coordinates",
        "interpolation_curve"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "coordinates"
    ],
    "name": "InterpolateCoords",
    "display_name": "Interpolate Coords",
    "description": "\nInterpolates coordinates based on a curve.   \n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "PointsEditor": {
    "input": {
      "required": {
        "points_store": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "coordinates": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "neg_coordinates": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "bbox_store": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "bboxes": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "bbox_format": [
          [
            "xyxy",
            "xywh"
          ]
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ],
        "normalize": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      },
      "optional": {
        "bg_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "points_store",
        "coordinates",
        "neg_coordinates",
        "bbox_store",
        "bboxes",
        "bbox_format",
        "width",
        "height",
        "normalize"
      ],
      "optional": [
        "bg_image"
      ]
    },
    "output": [
      "STRING",
      "STRING",
      "BBOX",
      "MASK",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "positive_coords",
      "negative_coords",
      "bbox",
      "bbox_mask",
      "cropped_image"
    ],
    "name": "PointsEditor",
    "display_name": "Points Editor",
    "description": "\n# WORK IN PROGRESS  \nDo not count on this as part of your workflow yet,  \nprobably contains lots of bugs and stability is not  \nguaranteed!!  \n  \n## Graphical editor to create coordinates\n\n**Shift + click** to add a positive (green) point.\n**Shift + right click** to add a negative (red) point.\n**Ctrl + click** to draw a box.  \n**Right click on a point** to delete it.    \nNote that you can't delete from start/end of the points array.  \n  \nTo add an image select the node and copy/paste or drag in the image.  \nOr from the bg_image input on queue (first frame of the batch).  \n\n**THE IMAGE IS SAVED TO THE NODE AND WORKFLOW METADATA**  \nyou can clear the image from the context menu by right clicking on the canvas  \n\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "StabilityAPI_SD3": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "n_prompt": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 4294967294,
            "step": 1
          }
        ],
        "model": [
          [
            "sd3",
            "sd3-turbo"
          ],
          {
            "default": "sd3"
          }
        ],
        "aspect_ratio": [
          [
            "1:1",
            "16:9",
            "21:9",
            "2:3",
            "3:2",
            "4:5",
            "5:4",
            "9:16",
            "9:21"
          ],
          {
            "default": "1:1"
          }
        ],
        "output_format": [
          [
            "png",
            "jpeg"
          ],
          {
            "default": "jpeg"
          }
        ]
      },
      "optional": {
        "api_key": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "image": [
          "IMAGE"
        ],
        "img2img_strength": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "disable_metadata": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt",
        "n_prompt",
        "seed",
        "model",
        "aspect_ratio",
        "output_format"
      ],
      "optional": [
        "api_key",
        "image",
        "img2img_strength",
        "disable_metadata"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "StabilityAPI_SD3",
    "display_name": "Stability API SD3",
    "description": "\n## Calls StabilityAI API\n   \nAlthough you may have multiple keys in your account,  \nyou should use the same key for all requests to this API.  \n\nGet your API key here: https://platform.stability.ai/account/keys  \nRecommended to set the key in the config.json -file under this  \nnode packs folder.  \n# WARNING:  \nOtherwise the API key may get saved in the image metadata even  \nwith \"disable_metadata\" on if the workflow includes save nodes  \nseparate from this node.  \n   \nsd3 requires 6.5 credits per generation  \nsd3-turbo requires 4 credits per generation  \n\nIf no image is provided, mode is set to text-to-image  \n\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "SoundReactive": {
    "input": {
      "required": {
        "sound_level": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 99999,
            "step": 0.01
          }
        ],
        "start_range_hz": [
          "INT",
          {
            "default": 150,
            "min": 0,
            "max": 9999,
            "step": 1
          }
        ],
        "end_range_hz": [
          "INT",
          {
            "default": 2000,
            "min": 0,
            "max": 9999,
            "step": 1
          }
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 99999,
            "step": 0.01
          }
        ],
        "smoothing_factor": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "normalize": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sound_level",
        "start_range_hz",
        "end_range_hz",
        "multiplier",
        "smoothing_factor",
        "normalize"
      ]
    },
    "output": [
      "FLOAT",
      "INT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "sound_level",
      "sound_level_int"
    ],
    "name": "SoundReactive",
    "display_name": "Sound Reactive",
    "description": "\nReacts to the sound level of the input.  \nUses your browsers sound input options and requires.  \nMeant to be used with realtime diffusion with autoqueue.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/audio",
    "output_node": false
  },
  "StableZero123_BatchSchedule": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 256,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4096
          }
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out"
          ]
        ],
        "azimuth_points_string": [
          "STRING",
          {
            "default": "0:(0.0),\n7:(1.0),\n15:(0.0)\n",
            "multiline": true
          }
        ],
        "elevation_points_string": [
          "STRING",
          {
            "default": "0:(0.0),\n7:(0.0),\n15:(0.0)\n",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "batch_size",
        "interpolation",
        "azimuth_points_string",
        "elevation_points_string"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "StableZero123_BatchSchedule",
    "display_name": "Stable Zero123 Batch Schedule",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "SV3D_BatchSchedule": {
    "input": {
      "required": {
        "clip_vision": [
          "CLIP_VISION"
        ],
        "init_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ],
        "width": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 576,
            "min": 16,
            "max": 16384,
            "step": 8
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 21,
            "min": 1,
            "max": 4096
          }
        ],
        "interpolation": [
          [
            "linear",
            "ease_in",
            "ease_out",
            "ease_in_out"
          ]
        ],
        "azimuth_points_string": [
          "STRING",
          {
            "default": "0:(0.0),\n9:(180.0),\n20:(360.0)\n",
            "multiline": true
          }
        ],
        "elevation_points_string": [
          "STRING",
          {
            "default": "0:(0.0),\n9:(0.0),\n20:(0.0)\n",
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "clip_vision",
        "init_image",
        "vae",
        "width",
        "height",
        "batch_size",
        "interpolation",
        "azimuth_points_string",
        "elevation_points_string"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent"
    ],
    "name": "SV3D_BatchSchedule",
    "display_name": "SV3D Batch Schedule",
    "description": "\nAllow scheduling of the azimuth and elevation conditions for SV3D.  \nNote that SV3D is still a video model and the schedule needs to always go forward  \nhttps://huggingface.co/stabilityai/sv3d\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "LoadResAdapterNormalization": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "resadapter_path": [
          [
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "resadapter_path"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "LoadResAdapterNormalization",
    "display_name": "LoadResAdapterNormalization",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "Superprompt": {
    "input": {
      "required": {
        "instruction_prompt": [
          "STRING",
          {
            "default": "Expand the following prompt to add more detail",
            "multiline": true
          }
        ],
        "prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true,
            "forceInput": true
          }
        ],
        "max_new_tokens": [
          "INT",
          {
            "default": 128,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "instruction_prompt",
        "prompt",
        "max_new_tokens"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "Superprompt",
    "display_name": "Superprompt",
    "description": "\n# SuperPrompt\nA T5 model fine-tuned on the SuperPrompt dataset for  \nupsampling text prompts to more detailed descriptions.  \nMeant to be used as a pre-generation step for text-to-image  \nmodels that benefit from more detailed prompts.  \nhttps://huggingface.co/roborovski/superprompt-v1\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/text",
    "output_node": false
  },
  "GLIGENTextBoxApplyBatchCoords": {
    "input": {
      "required": {
        "conditioning_to": [
          "CONDITIONING"
        ],
        "latents": [
          "LATENT"
        ],
        "clip": [
          "CLIP"
        ],
        "gligen_textbox_model": [
          "GLIGEN"
        ],
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "width": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ],
        "height": [
          "INT",
          {
            "default": 128,
            "min": 8,
            "max": 4096,
            "step": 8
          }
        ]
      },
      "optional": {
        "size_multiplier": [
          "FLOAT",
          {
            "default": [
              1.0
            ],
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning_to",
        "latents",
        "clip",
        "gligen_textbox_model",
        "coordinates",
        "text",
        "width",
        "height"
      ],
      "optional": [
        "size_multiplier"
      ]
    },
    "output": [
      "CONDITIONING",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "conditioning",
      "coord_preview"
    ],
    "name": "GLIGENTextBoxApplyBatchCoords",
    "display_name": "GLIGENTextBoxApplyBatchCoords",
    "description": "\nThis node allows scheduling GLIGEN text box positions in a batch,  \nto be used with AnimateDiff-Evolved. Intended to pair with the  \nSpline Editor -node.  \n\nGLIGEN model can be downloaded through the Manage's \"Install Models\" menu.  \nOr directly from here:  \nhttps://huggingface.co/comfyanonymous/GLIGEN_pruned_safetensors/tree/main  \n  \nInputs:  \n- **latents** input is used to calculate batch size  \n- **clip** is your standard text encoder, use same as for the main prompt  \n- **gligen_textbox_model** connects to GLIGEN Loader  \n- **coordinates** takes a json string of points, directly compatible  \nwith the spline editor node.\n- **text** is the part of the prompt to set position for  \n- **width** and **height** are the size of the GLIGEN bounding box  \n  \nOutputs:\n- **conditioning** goes between to clip text encode and the sampler  \n- **coord_preview** is an optional preview of the coordinates and  \nbounding boxes.\n\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "Intrinsic_lora_sampling": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "lora_name": [
          [
            "intrinsic_lora_sd15_albedo.safetensors",
            "intrinsic_lora_sd15_depth.safetensors",
            "intrinsic_lora_sd15_normal.safetensors",
            "intrinsic_lora_sd15_shading.safetensors",
            "intrinsic_loras.txt"
          ]
        ],
        "task": [
          [
            "depth map",
            "surface normals",
            "albedo",
            "shading"
          ],
          {
            "default": "depth map"
          }
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "default": ""
          }
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "per_batch": [
          "INT",
          {
            "default": 16,
            "min": 1,
            "max": 4096,
            "step": 1
          }
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "optional_latent": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "lora_name",
        "task",
        "text",
        "clip",
        "vae",
        "per_batch"
      ],
      "optional": [
        "image",
        "optional_latent"
      ]
    },
    "output": [
      "IMAGE",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "LATENT"
    ],
    "name": "Intrinsic_lora_sampling",
    "display_name": "Intrinsic Lora Sampling",
    "description": "\nSampler to use the intrinsic loras:  \nhttps://github.com/duxiaodan/intrinsic-lora  \nThese LoRAs are tiny and thus included  \nwith this node pack.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes",
    "output_node": false
  },
  "CheckpointPerturbWeights": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "joint_blocks": [
          "FLOAT",
          {
            "default": 0.02,
            "min": 0.001,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "final_layer": [
          "FLOAT",
          {
            "default": 0.02,
            "min": 0.001,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "rest_of_the_blocks": [
          "FLOAT",
          {
            "default": 0.02,
            "min": 0.001,
            "max": 10.0,
            "step": 0.001
          }
        ],
        "seed": [
          "INT",
          {
            "default": 123,
            "min": 0,
            "max": 18446744073709551615,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "joint_blocks",
        "final_layer",
        "rest_of_the_blocks",
        "seed"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "CheckpointPerturbWeights",
    "display_name": "CheckpointPerturbWeights",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/experimental",
    "output_node": true
  },
  "Screencap_mss": {
    "input": {
      "required": {
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 10000,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 10000,
            "step": 1
          }
        ],
        "num_frames": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 255,
            "step": 1
          }
        ],
        "delay": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "x",
        "y",
        "width",
        "height",
        "num_frames",
        "delay"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "Screencap_mss",
    "display_name": "Screencap mss",
    "description": "\nCaptures an area specified by screen coordinates.  \nCan be used for realtime diffusion with autoqueue.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/image",
    "output_node": false
  },
  "WebcamCaptureCV2": {
    "input": {
      "required": {
        "x": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "y": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 4096,
            "step": 1
          }
        ],
        "cam_index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "release": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "x",
        "y",
        "width",
        "height",
        "cam_index",
        "release"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "WebcamCaptureCV2",
    "display_name": "Webcam Capture CV2",
    "description": "\nCaptures a frame from a webcam using CV2.  \nCan be used for realtime diffusion with autoqueue.\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "DifferentialDiffusionAdvanced": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "samples": [
          "LATENT"
        ],
        "mask": [
          "MASK"
        ],
        "multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "samples",
        "mask",
        "multiplier"
      ]
    },
    "output": [
      "MODEL",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "LATENT"
    ],
    "name": "DifferentialDiffusionAdvanced",
    "display_name": "Differential Diffusion Advanced",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "_for_testing",
    "output_node": false
  },
  "FluxBlockLoraLoader": {
    "input": {
      "required": {
        "model": [
          "MODEL",
          {
            "tooltip": "The diffusion model the LoRA will be applied to."
          }
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01,
            "tooltip": "How strongly to modify the diffusion model. This value can be negative."
          }
        ]
      },
      "optional": {
        "lora_name": [
          [],
          {
            "tooltip": "The name of the LoRA."
          }
        ],
        "opt_lora_path": [
          "STRING",
          {
            "forceInput": true,
            "tooltip": "Absolute path of the LoRA."
          }
        ],
        "blocks": [
          "SELECTEDBLOCKS"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "strength_model"
      ],
      "optional": [
        "lora_name",
        "opt_lora_path",
        "blocks"
      ]
    },
    "output": [
      "MODEL",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "model",
      "rank"
    ],
    "name": "FluxBlockLoraLoader",
    "display_name": "Flux Block Lora Loader",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model.",
      "possible rank of the LoRA."
    ]
  },
  "FluxBlockLoraSelect": {
    "input": {
      "required": {
        "double_blocks.0.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.1.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.2.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.3.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.4.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.5.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.6.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.7.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.8.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.9.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.10.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.11.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.12.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.13.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.14.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.15.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.16.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.17.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.18.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.0.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.1.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.2.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.3.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.4.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.5.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.6.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.7.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.8.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.9.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.10.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.11.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.12.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.13.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.14.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.15.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.16.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.17.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.18.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.19.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.20.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.21.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.22.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.23.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.24.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.25.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.26.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.27.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.28.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.29.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.30.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.31.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.32.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.33.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.34.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.35.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.36.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.37.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "double_blocks.0.",
        "double_blocks.1.",
        "double_blocks.2.",
        "double_blocks.3.",
        "double_blocks.4.",
        "double_blocks.5.",
        "double_blocks.6.",
        "double_blocks.7.",
        "double_blocks.8.",
        "double_blocks.9.",
        "double_blocks.10.",
        "double_blocks.11.",
        "double_blocks.12.",
        "double_blocks.13.",
        "double_blocks.14.",
        "double_blocks.15.",
        "double_blocks.16.",
        "double_blocks.17.",
        "double_blocks.18.",
        "single_blocks.0.",
        "single_blocks.1.",
        "single_blocks.2.",
        "single_blocks.3.",
        "single_blocks.4.",
        "single_blocks.5.",
        "single_blocks.6.",
        "single_blocks.7.",
        "single_blocks.8.",
        "single_blocks.9.",
        "single_blocks.10.",
        "single_blocks.11.",
        "single_blocks.12.",
        "single_blocks.13.",
        "single_blocks.14.",
        "single_blocks.15.",
        "single_blocks.16.",
        "single_blocks.17.",
        "single_blocks.18.",
        "single_blocks.19.",
        "single_blocks.20.",
        "single_blocks.21.",
        "single_blocks.22.",
        "single_blocks.23.",
        "single_blocks.24.",
        "single_blocks.25.",
        "single_blocks.26.",
        "single_blocks.27.",
        "single_blocks.28.",
        "single_blocks.29.",
        "single_blocks.30.",
        "single_blocks.31.",
        "single_blocks.32.",
        "single_blocks.33.",
        "single_blocks.34.",
        "single_blocks.35.",
        "single_blocks.36.",
        "single_blocks.37."
      ]
    },
    "output": [
      "SELECTEDBLOCKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "blocks"
    ],
    "name": "FluxBlockLoraSelect",
    "display_name": "Flux Block Lora Select",
    "description": "Select individual block alpha values, value of 0 removes the block altogether",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model."
    ]
  },
  "HunyuanVideoBlockLoraSelect": {
    "input": {
      "required": {
        "double_blocks.0.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.1.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.2.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.3.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.4.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.5.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.6.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.7.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.8.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.9.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.10.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.11.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.12.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.13.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.14.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.15.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.16.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.17.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.18.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "double_blocks.19.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.0.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.1.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.2.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.3.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.4.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.5.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.6.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.7.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.8.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.9.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.10.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.11.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.12.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.13.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.14.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.15.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.16.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.17.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.18.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.19.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.20.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.21.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.22.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.23.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.24.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.25.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.26.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.27.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.28.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.29.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.30.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.31.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.32.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.33.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.34.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.35.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.36.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.37.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.38.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "single_blocks.39.": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "double_blocks.0.",
        "double_blocks.1.",
        "double_blocks.2.",
        "double_blocks.3.",
        "double_blocks.4.",
        "double_blocks.5.",
        "double_blocks.6.",
        "double_blocks.7.",
        "double_blocks.8.",
        "double_blocks.9.",
        "double_blocks.10.",
        "double_blocks.11.",
        "double_blocks.12.",
        "double_blocks.13.",
        "double_blocks.14.",
        "double_blocks.15.",
        "double_blocks.16.",
        "double_blocks.17.",
        "double_blocks.18.",
        "double_blocks.19.",
        "single_blocks.0.",
        "single_blocks.1.",
        "single_blocks.2.",
        "single_blocks.3.",
        "single_blocks.4.",
        "single_blocks.5.",
        "single_blocks.6.",
        "single_blocks.7.",
        "single_blocks.8.",
        "single_blocks.9.",
        "single_blocks.10.",
        "single_blocks.11.",
        "single_blocks.12.",
        "single_blocks.13.",
        "single_blocks.14.",
        "single_blocks.15.",
        "single_blocks.16.",
        "single_blocks.17.",
        "single_blocks.18.",
        "single_blocks.19.",
        "single_blocks.20.",
        "single_blocks.21.",
        "single_blocks.22.",
        "single_blocks.23.",
        "single_blocks.24.",
        "single_blocks.25.",
        "single_blocks.26.",
        "single_blocks.27.",
        "single_blocks.28.",
        "single_blocks.29.",
        "single_blocks.30.",
        "single_blocks.31.",
        "single_blocks.32.",
        "single_blocks.33.",
        "single_blocks.34.",
        "single_blocks.35.",
        "single_blocks.36.",
        "single_blocks.37.",
        "single_blocks.38.",
        "single_blocks.39."
      ]
    },
    "output": [
      "SELECTEDBLOCKS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "blocks"
    ],
    "name": "HunyuanVideoBlockLoraSelect",
    "display_name": "Hunyuan Video Block Lora Select",
    "description": "Select individual block alpha values, value of 0 removes the block altogether",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model."
    ]
  },
  "CustomControlNetWeightsFluxFromList": {
    "input": {
      "required": {
        "list_of_floats": [
          "FLOAT",
          {
            "forceInput": true
          }
        ]
      },
      "optional": {
        "uncond_multiplier": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "cn_extras": [
          "CN_WEIGHTS_EXTRAS"
        ],
        "autosize": [
          "ACNAUTOSIZE",
          {
            "padding": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "list_of_floats"
      ],
      "optional": [
        "uncond_multiplier",
        "cn_extras",
        "autosize"
      ]
    },
    "output": [
      "CONTROL_NET_WEIGHTS",
      "TIMESTEP_KEYFRAME"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "CN_WEIGHTS",
      "TK_SHORTCUT"
    ],
    "name": "CustomControlNetWeightsFluxFromList",
    "display_name": "Custom ControlNet Weights Flux From List",
    "description": "Creates controlnet weights from a list of floats for Advanced-ControlNet",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/controlnet",
    "output_node": false
  },
  "CheckpointLoaderKJ": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ],
          {
            "tooltip": "The name of the checkpoint (model) to load."
          }
        ],
        "patch_cublaslinear": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable or disable the patching, won't take effect on already loaded models!"
          }
        ],
        "sage_attention": [
          [
            "disabled",
            "auto",
            "sageattn_qk_int8_pv_fp16_cuda",
            "sageattn_qk_int8_pv_fp16_triton",
            "sageattn_qk_int8_pv_fp8_cuda"
          ],
          {
            "default": false,
            "tooltip": "Patch comfy attention to use sageattn."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name",
        "patch_cublaslinear",
        "sage_attention"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE"
    ],
    "name": "CheckpointLoaderKJ",
    "display_name": "CheckpointLoaderKJ",
    "description": "Experimental node for patching torch.nn.Linear with CublasLinear.",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/experimental",
    "output_node": true,
    "experimental": true
  },
  "DiffusionModelLoaderKJ": {
    "input": {
      "required": {
        "model_name": [
          [
            "Wan2.1-Fun-1.3B-Control.safetensors",
            "Wan2_1-I2V-14B-480P_fp8_e4m3fn.safetensors",
            "Wan2_1_VACE_1_3B_preview_bf16.safetensors",
            "clip_l.safetensors",
            "flux1-dev.safetensors",
            "wan2.1_fun_inp_1.3B_bf16.safetensors",
            "wan2.1_i2v_480p_14B_bf16.safetensors",
            "wan2.1_i2v_720p_14B_bf16.safetensors"
          ],
          {
            "tooltip": "The name of the checkpoint (model) to load."
          }
        ],
        "weight_dtype": [
          [
            "default",
            "fp8_e4m3fn",
            "fp8_e4m3fn_fast",
            "fp8_e5m2",
            "fp16",
            "bf16",
            "fp32"
          ]
        ],
        "compute_dtype": [
          [
            "default",
            "fp16",
            "bf16",
            "fp32"
          ],
          {
            "default": "fp16",
            "tooltip": "The compute dtype to use for the model."
          }
        ],
        "patch_cublaslinear": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable or disable the patching, won't take effect on already loaded models!"
          }
        ],
        "sage_attention": [
          [
            "disabled",
            "auto",
            "sageattn_qk_int8_pv_fp16_cuda",
            "sageattn_qk_int8_pv_fp16_triton",
            "sageattn_qk_int8_pv_fp8_cuda"
          ],
          {
            "default": false,
            "tooltip": "Patch comfy attention to use sageattn."
          }
        ],
        "enable_fp16_accumulation": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable torch.backends.cuda.matmul.allow_fp16_accumulation, requires pytorch 2.7.0 nightly."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name",
        "weight_dtype",
        "compute_dtype",
        "patch_cublaslinear",
        "sage_attention",
        "enable_fp16_accumulation"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "DiffusionModelLoaderKJ",
    "display_name": "Diffusion Model Loader KJ",
    "description": "Node for patching torch.nn.Linear with CublasLinear.",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/experimental",
    "output_node": true,
    "experimental": true
  },
  "TorchCompileModelFluxAdvanced": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ]
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ],
        "double_blocks": [
          "STRING",
          {
            "default": "0-18",
            "multiline": true
          }
        ],
        "single_blocks": [
          "STRING",
          {
            "default": "0-37",
            "multiline": true
          }
        ],
        "dynamic": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable dynamic mode"
          }
        ]
      },
      "optional": {
        "dynamo_cache_size_limit": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 1024,
            "step": 1,
            "tooltip": "torch._dynamo.config.cache_size_limit"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "backend",
        "fullgraph",
        "mode",
        "double_blocks",
        "single_blocks",
        "dynamic"
      ],
      "optional": [
        "dynamo_cache_size_limit"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "TorchCompileModelFluxAdvanced",
    "display_name": "TorchCompileModelFluxAdvanced",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/torchcompile",
    "output_node": false,
    "experimental": true
  },
  "TorchCompileModelHyVideo": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ],
          {
            "default": "inductor"
          }
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ],
        "dynamic": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable dynamic mode"
          }
        ],
        "dynamo_cache_size_limit": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 1024,
            "step": 1,
            "tooltip": "torch._dynamo.config.cache_size_limit"
          }
        ],
        "compile_single_blocks": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Compile single blocks"
          }
        ],
        "compile_double_blocks": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Compile double blocks"
          }
        ],
        "compile_txt_in": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Compile txt_in layers"
          }
        ],
        "compile_vector_in": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Compile vector_in layers"
          }
        ],
        "compile_final_layer": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Compile final layer"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "backend",
        "fullgraph",
        "mode",
        "dynamic",
        "dynamo_cache_size_limit",
        "compile_single_blocks",
        "compile_double_blocks",
        "compile_txt_in",
        "compile_vector_in",
        "compile_final_layer"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "TorchCompileModelHyVideo",
    "display_name": "TorchCompileModelHyVideo",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/torchcompile",
    "output_node": false,
    "experimental": true
  },
  "TorchCompileVAE": {
    "input": {
      "required": {
        "vae": [
          "VAE"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ]
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ],
        "compile_encoder": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Compile encoder"
          }
        ],
        "compile_decoder": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Compile decoder"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "vae",
        "backend",
        "fullgraph",
        "mode",
        "compile_encoder",
        "compile_decoder"
      ]
    },
    "output": [
      "VAE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "VAE"
    ],
    "name": "TorchCompileVAE",
    "display_name": "TorchCompileVAE",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/torchcompile",
    "output_node": false,
    "experimental": true
  },
  "TorchCompileControlNet": {
    "input": {
      "required": {
        "controlnet": [
          "CONTROL_NET"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ]
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "controlnet",
        "backend",
        "fullgraph",
        "mode"
      ]
    },
    "output": [
      "CONTROL_NET"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONTROL_NET"
    ],
    "name": "TorchCompileControlNet",
    "display_name": "TorchCompileControlNet",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/torchcompile",
    "output_node": false,
    "experimental": true
  },
  "PatchModelPatcherOrder": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "patch_order": [
          [
            "object_patch_first",
            "weight_patch_first"
          ],
          {
            "default": "weight_patch_first",
            "tooltip": "Patch the comfy patch_model function to load weight patches (LoRAs) before compiling the model"
          }
        ],
        "full_load": [
          [
            "enabled",
            "disabled",
            "auto"
          ],
          {
            "default": "auto",
            "tooltip": "Disabling may help with memory issues when loading large models, when changing this you should probably force model reload to avoid issues!"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "patch_order",
        "full_load"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "PatchModelPatcherOrder",
    "display_name": "Patch Model Patcher Order",
    "description": "Patch the comfy patch_model function patching order, useful for torch.compile (used as object_patch) as it should come last if you want to use LoRAs with compile",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "experimental": true
  },
  "TorchCompileLTXModel": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ]
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ],
        "dynamic": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable dynamic mode"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "backend",
        "fullgraph",
        "mode",
        "dynamic"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "TorchCompileLTXModel",
    "display_name": "TorchCompileLTXModel",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/torchcompile",
    "output_node": false,
    "experimental": true
  },
  "TorchCompileCosmosModel": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ]
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ],
        "dynamic": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable dynamic mode"
          }
        ],
        "dynamo_cache_size_limit": [
          "INT",
          {
            "default": 64,
            "tooltip": "Set the dynamo cache size limit"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "backend",
        "fullgraph",
        "mode",
        "dynamic",
        "dynamo_cache_size_limit"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "TorchCompileCosmosModel",
    "display_name": "TorchCompileCosmosModel",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/torchcompile",
    "output_node": false,
    "experimental": true
  },
  "TorchCompileModelWanVideo": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "backend": [
          [
            "inductor",
            "cudagraphs"
          ],
          {
            "default": "inductor"
          }
        ],
        "fullgraph": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable full graph mode"
          }
        ],
        "mode": [
          [
            "default",
            "max-autotune",
            "max-autotune-no-cudagraphs",
            "reduce-overhead"
          ],
          {
            "default": "default"
          }
        ],
        "dynamic": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Enable dynamic mode"
          }
        ],
        "dynamo_cache_size_limit": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 1024,
            "step": 1,
            "tooltip": "torch._dynamo.config.cache_size_limit"
          }
        ],
        "compile_transformer_blocks_only": [
          "BOOLEAN",
          {
            "default": false,
            "tooltip": "Compile only transformer blocks"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "backend",
        "fullgraph",
        "mode",
        "dynamic",
        "dynamo_cache_size_limit",
        "compile_transformer_blocks_only"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "TorchCompileModelWanVideo",
    "display_name": "TorchCompileModelWanVideo",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/torchcompile",
    "output_node": false,
    "experimental": true
  },
  "PathchSageAttentionKJ": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "sage_attention": [
          [
            "disabled",
            "auto",
            "sageattn_qk_int8_pv_fp16_cuda",
            "sageattn_qk_int8_pv_fp16_triton",
            "sageattn_qk_int8_pv_fp8_cuda"
          ],
          {
            "default": false,
            "tooltip": "Global patch comfy attention to use sageattn, once patched to revert back to normal you would need to run this node again with disabled option."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "sage_attention"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "PathchSageAttentionKJ",
    "display_name": "Patch Sage Attention KJ",
    "description": "Experimental node for patching attention mode. This doesn't use the model patching system and thus can't be disabled without running the node again with 'disabled' option.",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "experimental": true
  },
  "LeapfusionHunyuanI2VPatcher": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "latent": [
          "LATENT"
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": -1,
            "max": 1000,
            "step": 1,
            "tooltip": "The index of the latent to be replaced. 0 for first frame and -1 for last"
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "The start percentage of steps to apply"
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "The end percentage of steps to apply"
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "latent",
        "index",
        "start_percent",
        "end_percent",
        "strength"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "LeapfusionHunyuanI2VPatcher",
    "display_name": "Leapfusion Hunyuan I2V Patcher",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "VAELoaderKJ": {
    "input": {
      "required": {
        "vae_name": [
          [
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "device": [
          [
            "main_device",
            "cpu"
          ]
        ],
        "weight_dtype": [
          [
            "bf16",
            "fp16",
            "fp32"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "vae_name",
        "device",
        "weight_dtype"
      ]
    },
    "output": [
      "VAE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "VAE"
    ],
    "name": "VAELoaderKJ",
    "display_name": "VAELoader KJ",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/vae",
    "output_node": false
  },
  "ScheduledCFGGuidance": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "negative",
        "cfg",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "GUIDER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "GUIDER"
    ],
    "name": "ScheduledCFGGuidance",
    "display_name": "Scheduled CFG Guidance",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/experimental",
    "output_node": false
  },
  "ApplyRifleXRoPE_HunuyanVideo": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "latent": [
          "LATENT",
          {
            "tooltip": "Only used to get the latent count"
          }
        ],
        "k": [
          "INT",
          {
            "default": 4,
            "min": 1,
            "max": 100,
            "step": 1,
            "tooltip": "Index of intrinsic frequency"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "latent",
        "k"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ApplyRifleXRoPE_HunuyanVideo",
    "display_name": "Apply RifleXRoPE HunuyanVideo",
    "description": "Extends the potential frame count of HunyuanVideo using this method: https://github.com/thu-ml/RIFLEx",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "experimental": true
  },
  "ApplyRifleXRoPE_WanVideo": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "latent": [
          "LATENT",
          {
            "tooltip": "Only used to get the latent count"
          }
        ],
        "k": [
          "INT",
          {
            "default": 6,
            "min": 1,
            "max": 100,
            "step": 1,
            "tooltip": "Index of intrinsic frequency"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "latent",
        "k"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "ApplyRifleXRoPE_WanVideo",
    "display_name": "Apply RifleXRoPE WanVideo",
    "description": "Extends the potential frame count of HunyuanVideo using this method: https://github.com/thu-ml/RIFLEx",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "experimental": true
  },
  "WanVideoTeaCacheKJ": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "rel_l1_thresh": [
          "FLOAT",
          {
            "default": 0.275,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001,
            "tooltip": "Threshold for to determine when to apply the cache, compromise between speed and accuracy. When using coefficients a good value range is something between 0.2-0.4 for all but 1.3B model, which should be about 10 times smaller, same as when not using coefficients."
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.1,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "The start percentage of the steps to use with TeaCache."
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "The end percentage of the steps to use with TeaCache."
          }
        ],
        "cache_device": [
          [
            "main_device",
            "offload_device"
          ],
          {
            "default": "offload_device",
            "tooltip": "Device to cache to"
          }
        ],
        "coefficients": [
          [
            "disabled",
            "1.3B",
            "14B",
            "i2v_480",
            "i2v_720"
          ],
          {
            "default": "i2v_480",
            "tooltip": "Coefficients for rescaling the relative l1 distance, if disabled the threshold value should be about 10 times smaller than the value used with coefficients."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "rel_l1_thresh",
        "start_percent",
        "end_percent",
        "cache_device",
        "coefficients"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "model"
    ],
    "name": "WanVideoTeaCacheKJ",
    "display_name": "WanVideo Tea Cache (native)",
    "description": "\nPatch WanVideo model to use TeaCache. Speeds up inference by caching the output and  \napplying it instead of doing the step.  Best results are achieved by choosing the  \nappropriate coefficients for the model. Early steps should never be skipped, with too  \naggressive values this can happen and the motion suffers. Starting later can help with that too.   \nWhen NOT using coefficients, the threshold value should be  \nabout 10 times smaller than the value used with coefficients.  \n\nOfficial recommended values https://github.com/ali-vilab/TeaCache/tree/main/TeaCache4Wan2.1:\n\n\n<pre style='font-family:monospace'>\n+-------------------+--------+---------+--------+\n|       Model       |  Low   | Medium  |  High  |\n+-------------------+--------+---------+--------+\n| Wan2.1 t2v 1.3B  |  0.05  |  0.07   |  0.08  |\n| Wan2.1 t2v 14B   |  0.14  |  0.15   |  0.20  |\n| Wan2.1 i2v 480P  |  0.13  |  0.19   |  0.26  |\n| Wan2.1 i2v 720P  |  0.18  |  0.20   |  0.30  |\n+-------------------+--------+---------+--------+\n</pre> \n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/teacache",
    "output_node": false,
    "experimental": true
  },
  "WanVideoEnhanceAVideoKJ": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "latent": [
          "LATENT",
          {
            "tooltip": "Only used to get the latent count"
          }
        ],
        "weight": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 10.0,
            "step": 0.001,
            "tooltip": "Strength of the enhance effect"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "latent",
        "weight"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "model"
    ],
    "name": "WanVideoEnhanceAVideoKJ",
    "display_name": "WanVideo Enhance A Video (native)",
    "description": "https://github.com/NUS-HPC-AI-Lab/Enhance-A-Video",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "experimental": true
  },
  "SkipLayerGuidanceWanVideo": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "blocks": [
          "STRING",
          {
            "default": "10",
            "multiline": false
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "blocks",
        "start_percent",
        "end_percent"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "SkipLayerGuidanceWanVideo",
    "display_name": "Skip Layer Guidance WanVideo",
    "description": "Simplified skip layer guidance that only skips the uncond on selected blocks",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "advanced/guidance",
    "output_node": false,
    "experimental": true
  },
  "TimerNodeKJ": {
    "input": {
      "required": {
        "any_input": [
          "*",
          {}
        ],
        "mode": [
          [
            "start",
            "stop"
          ]
        ],
        "name": [
          "STRING",
          {
            "default": "Timer"
          }
        ]
      },
      "optional": {
        "timer": [
          "TIMER"
        ]
      }
    },
    "input_order": {
      "required": [
        "any_input",
        "mode",
        "name"
      ],
      "optional": [
        "timer"
      ]
    },
    "output": [
      "*",
      "TIMER",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "any_output",
      "timer",
      "time"
    ],
    "name": "TimerNodeKJ",
    "display_name": "Timer Node KJ",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/misc",
    "output_node": false
  },
  "HunyuanVideoEncodeKeyframesToCond": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "start_frame": [
          "IMAGE"
        ],
        "end_frame": [
          "IMAGE"
        ],
        "num_frames": [
          "INT",
          {
            "default": 33,
            "min": 2,
            "max": 4096,
            "step": 1
          }
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 64
          }
        ],
        "overlap": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 4096,
            "step": 32
          }
        ],
        "temporal_size": [
          "INT",
          {
            "default": 64,
            "min": 8,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to encode at a time."
          }
        ],
        "temporal_overlap": [
          "INT",
          {
            "default": 8,
            "min": 4,
            "max": 4096,
            "step": 4,
            "tooltip": "Only used for video VAEs: Amount of frames to overlap."
          }
        ]
      },
      "optional": {
        "negative": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "positive",
        "vae",
        "start_frame",
        "end_frame",
        "num_frames",
        "tile_size",
        "overlap",
        "temporal_size",
        "temporal_overlap"
      ],
      "optional": [
        "negative"
      ]
    },
    "output": [
      "MODEL",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "positive",
      "negative",
      "latent"
    ],
    "name": "HunyuanVideoEncodeKeyframesToCond",
    "display_name": "HunyuanVideo Encode Keyframes To Cond",
    "description": "",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/videomodels",
    "output_node": false
  },
  "CFGZeroStarAndInit": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "use_zero_init": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "zero_init_steps": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "tooltip": "for zero init, starts from 0 so first step is always zeroed out if use_zero_init enabled"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "use_zero_init",
        "zero_init_steps"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "CFGZeroStarAndInit",
    "display_name": "CFG Zero Star/Init",
    "description": "https://github.com/WeichenFan/CFG-Zero-star",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/experimental",
    "output_node": false,
    "experimental": true
  },
  "CreateInstanceDiffusionTracking": {
    "input": {
      "required": {
        "coordinates": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "bbox_width": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "bbox_height": [
          "INT",
          {
            "default": 512,
            "min": 16,
            "max": 4096,
            "step": 1
          }
        ],
        "class_name": [
          "STRING",
          {
            "default": "class_name"
          }
        ],
        "class_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "prompt": [
          "STRING",
          {
            "default": "prompt",
            "multiline": true
          }
        ]
      },
      "optional": {
        "size_multiplier": [
          "FLOAT",
          {
            "default": [
              1.0
            ],
            "forceInput": true
          }
        ],
        "fit_in_frame": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "coordinates",
        "width",
        "height",
        "bbox_width",
        "bbox_height",
        "class_name",
        "class_id",
        "prompt"
      ],
      "optional": [
        "size_multiplier",
        "fit_in_frame"
      ]
    },
    "output": [
      "TRACKING",
      "STRING",
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "tracking",
      "prompt",
      "width",
      "height",
      "bbox_width",
      "bbox_height"
    ],
    "name": "CreateInstanceDiffusionTracking",
    "display_name": "CreateInstanceDiffusionTracking",
    "description": "\nCreates tracking data to be used with InstanceDiffusion:  \nhttps://github.com/logtd/ComfyUI-InstanceDiffusion  \n  \nInstanceDiffusion prompt format:  \n\"class_id.class_name\": \"prompt\",  \nfor example:  \n\"1.head\": \"((head))\",  \n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/InstanceDiffusion",
    "output_node": false
  },
  "AppendInstanceDiffusionTracking": {
    "input": {
      "required": {
        "tracking_1": [
          "TRACKING",
          {
            "forceInput": true
          }
        ],
        "tracking_2": [
          "TRACKING",
          {
            "forceInput": true
          }
        ]
      },
      "optional": {
        "prompt_1": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ],
        "prompt_2": [
          "STRING",
          {
            "default": "",
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "tracking_1",
        "tracking_2"
      ],
      "optional": [
        "prompt_1",
        "prompt_2"
      ]
    },
    "output": [
      "TRACKING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "tracking",
      "prompt"
    ],
    "name": "AppendInstanceDiffusionTracking",
    "display_name": "AppendInstanceDiffusionTracking",
    "description": "\nAppends tracking data to be used with InstanceDiffusion:  \nhttps://github.com/logtd/ComfyUI-InstanceDiffusion  \n\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/InstanceDiffusion",
    "output_node": false
  },
  "DrawInstanceDiffusionTracking": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "tracking": [
          "TRACKING",
          {
            "forceInput": true
          }
        ],
        "box_line_width": [
          "INT",
          {
            "default": 2,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ],
        "draw_text": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "font": [
          [
            "FreeMono.ttf",
            "FreeMonoBoldOblique.otf",
            "TTNorms-Black.otf"
          ]
        ],
        "font_size": [
          "INT",
          {
            "default": 20
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "tracking",
        "box_line_width",
        "draw_text",
        "font",
        "font_size"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "DrawInstanceDiffusionTracking",
    "display_name": "DrawInstanceDiffusionTracking",
    "description": "\nDraws the tracking data from  \nCreateInstanceDiffusionTracking -node.\n\n",
    "python_module": "custom_nodes.comfyui-kjnodes",
    "category": "KJNodes/InstanceDiffusion",
    "output_node": false
  },
  "Context Big (rgthree)": {
    "input": {
      "required": {},
      "optional": {
        "base_ctx": [
          "RGTHREE_CONTEXT"
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ],
        "images": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "steps": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "step_refiner": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "forceInput": true
          }
        ],
        "ckpt_name": [
          [
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ],
          {
            "forceInput": true
          }
        ],
        "sampler": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "forceInput": true
          }
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ],
          {
            "forceInput": true
          }
        ],
        "clip_width": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "clip_height": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "text_pos_g": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_pos_l": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_neg_g": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "text_neg_l": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "mask": [
          "MASK"
        ],
        "control_net": [
          "CONTROL_NET"
        ]
      },
      "hidden": {}
    },
    "input_order": {
      "required": [],
      "optional": [
        "base_ctx",
        "model",
        "clip",
        "vae",
        "positive",
        "negative",
        "latent",
        "images",
        "seed",
        "steps",
        "step_refiner",
        "cfg",
        "ckpt_name",
        "sampler",
        "scheduler",
        "clip_width",
        "clip_height",
        "text_pos_g",
        "text_pos_l",
        "text_neg_g",
        "text_neg_l",
        "mask",
        "control_net"
      ],
      "hidden": []
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "FLOAT",
      [
        "disneyrealcartoonmix_v10.safetensors",
        "katayamaMixXLV2_katayamaMixXLV2.safetensors",
        "realvisxlV50_v50LightningBakedvae.safetensors",
        "zavychromaxl_v100.safetensors"
      ],
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "res_multistep",
        "res_multistep_cfg_pp",
        "res_multistep_ancestral",
        "res_multistep_ancestral_cfg_pp",
        "gradient_estimation",
        "er_sde",
        "seeds_2",
        "seeds_3",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ],
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "beta",
        "linear_quadratic",
        "kl_optimal"
      ],
      "INT",
      "INT",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "MASK",
      "CONTROL_NET"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED",
      "STEPS",
      "STEP_REFINER",
      "CFG",
      "CKPT_NAME",
      "SAMPLER",
      "SCHEDULER",
      "CLIP_WIDTH",
      "CLIP_HEIGHT",
      "TEXT_POS_G",
      "TEXT_POS_L",
      "TEXT_NEG_G",
      "TEXT_NEG_L",
      "MASK",
      "CONTROL_NET"
    ],
    "name": "Context Big (rgthree)",
    "display_name": "Context Big (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Context (rgthree)": {
    "input": {
      "required": {},
      "optional": {
        "base_ctx": [
          "RGTHREE_CONTEXT"
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "latent": [
          "LATENT"
        ],
        "images": [
          "IMAGE"
        ],
        "seed": [
          "INT",
          {
            "forceInput": true
          }
        ]
      },
      "hidden": {
        "version": "FLOAT"
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "base_ctx",
        "model",
        "clip",
        "vae",
        "positive",
        "negative",
        "latent",
        "images",
        "seed"
      ],
      "hidden": [
        "version"
      ]
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED"
    ],
    "name": "Context (rgthree)",
    "display_name": "Context (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Context Switch (rgthree)": {
    "input": {
      "required": {},
      "optional": {}
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED"
    ],
    "name": "Context Switch (rgthree)",
    "display_name": "Context Switch (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Context Switch Big (rgthree)": {
    "input": {
      "required": {},
      "optional": {}
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "FLOAT",
      [
        "disneyrealcartoonmix_v10.safetensors",
        "katayamaMixXLV2_katayamaMixXLV2.safetensors",
        "realvisxlV50_v50LightningBakedvae.safetensors",
        "zavychromaxl_v100.safetensors"
      ],
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "res_multistep",
        "res_multistep_cfg_pp",
        "res_multistep_ancestral",
        "res_multistep_ancestral_cfg_pp",
        "gradient_estimation",
        "er_sde",
        "seeds_2",
        "seeds_3",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ],
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "beta",
        "linear_quadratic",
        "kl_optimal"
      ],
      "INT",
      "INT",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "MASK",
      "CONTROL_NET"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED",
      "STEPS",
      "STEP_REFINER",
      "CFG",
      "CKPT_NAME",
      "SAMPLER",
      "SCHEDULER",
      "CLIP_WIDTH",
      "CLIP_HEIGHT",
      "TEXT_POS_G",
      "TEXT_POS_L",
      "TEXT_NEG_G",
      "TEXT_NEG_L",
      "MASK",
      "CONTROL_NET"
    ],
    "name": "Context Switch Big (rgthree)",
    "display_name": "Context Switch Big (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Context Merge (rgthree)": {
    "input": {
      "required": {},
      "optional": {}
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED"
    ],
    "name": "Context Merge (rgthree)",
    "display_name": "Context Merge (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Context Merge Big (rgthree)": {
    "input": {
      "required": {},
      "optional": {}
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "RGTHREE_CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "IMAGE",
      "INT",
      "INT",
      "INT",
      "FLOAT",
      [
        "disneyrealcartoonmix_v10.safetensors",
        "katayamaMixXLV2_katayamaMixXLV2.safetensors",
        "realvisxlV50_v50LightningBakedvae.safetensors",
        "zavychromaxl_v100.safetensors"
      ],
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "res_multistep",
        "res_multistep_cfg_pp",
        "res_multistep_ancestral",
        "res_multistep_ancestral_cfg_pp",
        "gradient_estimation",
        "er_sde",
        "seeds_2",
        "seeds_3",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ],
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "beta",
        "linear_quadratic",
        "kl_optimal"
      ],
      "INT",
      "INT",
      "STRING",
      "STRING",
      "STRING",
      "STRING",
      "MASK",
      "CONTROL_NET"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONTEXT",
      "MODEL",
      "CLIP",
      "VAE",
      "POSITIVE",
      "NEGATIVE",
      "LATENT",
      "IMAGE",
      "SEED",
      "STEPS",
      "STEP_REFINER",
      "CFG",
      "CKPT_NAME",
      "SAMPLER",
      "SCHEDULER",
      "CLIP_WIDTH",
      "CLIP_HEIGHT",
      "TEXT_POS_G",
      "TEXT_POS_L",
      "TEXT_NEG_G",
      "TEXT_NEG_L",
      "MASK",
      "CONTROL_NET"
    ],
    "name": "Context Merge Big (rgthree)",
    "display_name": "Context Merge Big (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Display Int (rgthree)": {
    "input": {
      "required": {
        "input": [
          "INT",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "input"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Display Int (rgthree)",
    "display_name": "Display Int (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": true
  },
  "Display Any (rgthree)": {
    "input": {
      "required": {
        "source": [
          "*",
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "source"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Display Any (rgthree)",
    "display_name": "Display Any (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": true
  },
  "Lora Loader Stack (rgthree)": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "lora_01": [
          [
            "None"
          ]
        ],
        "strength_01": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_02": [
          [
            "None"
          ]
        ],
        "strength_02": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_03": [
          [
            "None"
          ]
        ],
        "strength_03": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "lora_04": [
          [
            "None"
          ]
        ],
        "strength_04": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -10.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_01",
        "strength_01",
        "lora_02",
        "strength_02",
        "lora_03",
        "strength_03",
        "lora_04",
        "strength_04"
      ]
    },
    "output": [
      "MODEL",
      "CLIP"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP"
    ],
    "name": "Lora Loader Stack (rgthree)",
    "display_name": "Lora Loader Stack (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Seed (rgthree)": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": -1125899906842624,
            "max": 1125899906842624
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "seed"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEED"
    ],
    "name": "Seed (rgthree)",
    "display_name": "Seed (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Image Inset Crop (rgthree)": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "measurement": [
          [
            "Pixels",
            "Percentage"
          ]
        ],
        "left": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "right": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "top": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ],
        "bottom": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 16384,
            "step": 8
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "measurement",
        "left",
        "right",
        "top",
        "bottom"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "Image Inset Crop (rgthree)",
    "display_name": "Image Inset Crop (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Power Prompt (rgthree)": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      },
      "optional": {
        "opt_model": [
          "MODEL"
        ],
        "opt_clip": [
          "CLIP"
        ],
        "insert_lora": [
          [
            "CHOOSE",
            "DISABLE LORAS"
          ]
        ],
        "insert_embedding": [
          [
            "CHOOSE"
          ]
        ],
        "insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      },
      "hidden": {
        "values_insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt"
      ],
      "optional": [
        "opt_model",
        "opt_clip",
        "insert_lora",
        "insert_embedding",
        "insert_saved"
      ],
      "hidden": [
        "values_insert_saved"
      ]
    },
    "output": [
      "CONDITIONING",
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONDITIONING",
      "MODEL",
      "CLIP",
      "TEXT"
    ],
    "name": "Power Prompt (rgthree)",
    "display_name": "Power Prompt (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Power Prompt - Simple (rgthree)": {
    "input": {
      "required": {
        "prompt": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      },
      "optional": {
        "opt_clip": [
          "CLIP"
        ],
        "insert_embedding": [
          [
            "CHOOSE"
          ]
        ],
        "insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      },
      "hidden": {
        "values_insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt"
      ],
      "optional": [
        "opt_clip",
        "insert_embedding",
        "insert_saved"
      ],
      "hidden": [
        "values_insert_saved"
      ]
    },
    "output": [
      "CONDITIONING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "CONDITIONING",
      "TEXT"
    ],
    "name": "Power Prompt - Simple (rgthree)",
    "display_name": "Power Prompt - Simple (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "KSampler Config (rgthree)": {
    "input": {
      "required": {
        "steps_total": [
          "INT",
          {
            "default": 30,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "refiner_step": [
          "INT",
          {
            "default": 24,
            "min": 1,
            "max": 16384,
            "step": 1
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "step": 0.5
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "steps_total",
        "refiner_step",
        "cfg",
        "sampler_name",
        "scheduler"
      ]
    },
    "output": [
      "INT",
      "INT",
      "FLOAT",
      [
        "euler",
        "euler_cfg_pp",
        "euler_ancestral",
        "euler_ancestral_cfg_pp",
        "heun",
        "heunpp2",
        "dpm_2",
        "dpm_2_ancestral",
        "lms",
        "dpm_fast",
        "dpm_adaptive",
        "dpmpp_2s_ancestral",
        "dpmpp_2s_ancestral_cfg_pp",
        "dpmpp_sde",
        "dpmpp_sde_gpu",
        "dpmpp_2m",
        "dpmpp_2m_cfg_pp",
        "dpmpp_2m_sde",
        "dpmpp_2m_sde_gpu",
        "dpmpp_3m_sde",
        "dpmpp_3m_sde_gpu",
        "ddpm",
        "lcm",
        "ipndm",
        "ipndm_v",
        "deis",
        "res_multistep",
        "res_multistep_cfg_pp",
        "res_multistep_ancestral",
        "res_multistep_ancestral_cfg_pp",
        "gradient_estimation",
        "er_sde",
        "seeds_2",
        "seeds_3",
        "ddim",
        "uni_pc",
        "uni_pc_bh2"
      ],
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "beta",
        "linear_quadratic",
        "kl_optimal"
      ]
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "STEPS",
      "REFINER_STEP",
      "CFG",
      "SAMPLER",
      "SCHEDULER"
    ],
    "name": "KSampler Config (rgthree)",
    "display_name": "KSampler Config (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "SDXL Empty Latent Image (rgthree)": {
    "input": {
      "required": {
        "dimensions": [
          [
            "1536 x 640   (landscape)",
            "1344 x 768   (landscape)",
            "1216 x 832   (landscape)",
            "1152 x 896   (landscape)",
            "1024 x 1024  (square)",
            " 896 x 1152  (portrait)",
            " 832 x 1216  (portrait)",
            " 768 x 1344  (portrait)",
            " 640 x 1536  (portrait)"
          ],
          {
            "default": "1024 x 1024  (square)"
          }
        ],
        "clip_scale": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 1.0,
            "max": 10.0,
            "step": 0.5
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 64
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "dimensions",
        "clip_scale",
        "batch_size"
      ]
    },
    "output": [
      "LATENT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "CLIP_WIDTH",
      "CLIP_HEIGHT"
    ],
    "name": "SDXL Empty Latent Image (rgthree)",
    "display_name": "SDXL Empty Latent Image (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "SDXL Power Prompt - Positive (rgthree)": {
    "input": {
      "required": {
        "prompt_g": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "prompt_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      },
      "optional": {
        "opt_model": [
          "MODEL"
        ],
        "opt_clip": [
          "CLIP"
        ],
        "opt_clip_width": [
          "INT",
          {
            "forceInput": true,
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "opt_clip_height": [
          "INT",
          {
            "forceInput": true,
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "insert_lora": [
          [
            "CHOOSE",
            "DISABLE LORAS"
          ]
        ],
        "insert_embedding": [
          [
            "CHOOSE"
          ]
        ],
        "insert_saved": [
          [
            "CHOOSE"
          ]
        ],
        "target_width": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "target_height": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "crop_width": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "crop_height": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ]
      },
      "hidden": {
        "values_insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt_g",
        "prompt_l"
      ],
      "optional": [
        "opt_model",
        "opt_clip",
        "opt_clip_width",
        "opt_clip_height",
        "insert_lora",
        "insert_embedding",
        "insert_saved",
        "target_width",
        "target_height",
        "crop_width",
        "crop_height"
      ],
      "hidden": [
        "values_insert_saved"
      ]
    },
    "output": [
      "CONDITIONING",
      "MODEL",
      "CLIP",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "CONDITIONING",
      "MODEL",
      "CLIP",
      "TEXT_G",
      "TEXT_L"
    ],
    "name": "SDXL Power Prompt - Positive (rgthree)",
    "display_name": "SDXL Power Prompt - Positive (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "SDXL Power Prompt - Simple / Negative (rgthree)": {
    "input": {
      "required": {
        "prompt_g": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ],
        "prompt_l": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true
          }
        ]
      },
      "optional": {
        "opt_clip": [
          "CLIP"
        ],
        "opt_clip_width": [
          "INT",
          {
            "forceInput": true,
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "opt_clip_height": [
          "INT",
          {
            "forceInput": true,
            "default": 1024.0,
            "min": 0,
            "max": 16384
          }
        ],
        "insert_embedding": [
          [
            "CHOOSE"
          ]
        ],
        "insert_saved": [
          [
            "CHOOSE"
          ]
        ],
        "target_width": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "target_height": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "crop_width": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ],
        "crop_height": [
          "INT",
          {
            "default": -1,
            "min": -1,
            "max": 16384
          }
        ]
      },
      "hidden": {
        "values_insert_saved": [
          [
            "CHOOSE"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "prompt_g",
        "prompt_l"
      ],
      "optional": [
        "opt_clip",
        "opt_clip_width",
        "opt_clip_height",
        "insert_embedding",
        "insert_saved",
        "target_width",
        "target_height",
        "crop_width",
        "crop_height"
      ],
      "hidden": [
        "values_insert_saved"
      ]
    },
    "output": [
      "CONDITIONING",
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "CONDITIONING",
      "TEXT_G",
      "TEXT_L"
    ],
    "name": "SDXL Power Prompt - Simple / Negative (rgthree)",
    "display_name": "SDXL Power Prompt - Simple / Negative (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Any Switch (rgthree)": {
    "input": {
      "required": {},
      "optional": {}
    },
    "input_order": {
      "required": [],
      "optional": []
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "Any Switch (rgthree)",
    "display_name": "Any Switch (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "Image Comparer (rgthree)": {
    "input": {
      "required": {},
      "optional": {
        "image_a": [
          "IMAGE"
        ],
        "image_b": [
          "IMAGE"
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "image_a",
        "image_b"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "Image Comparer (rgthree)",
    "display_name": "Image Comparer (rgthree)",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": true
  },
  "Power Lora Loader (rgthree)": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ]
      },
      "optional": {},
      "hidden": {}
    },
    "input_order": {
      "required": [
        "model",
        "clip"
      ],
      "optional": [],
      "hidden": []
    },
    "output": [
      "MODEL",
      "CLIP"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP"
    ],
    "name": "Power Lora Loader (rgthree)",
    "display_name": "Power Lora Loader (rgthree)",
    "description": "",
    "python_module": "custom_nodes.rgthree-comfy",
    "category": "rgthree",
    "output_node": false
  },
  "SAMLoader": {
    "input": {
      "required": {
        "model_name": [
          [
            "sam_vit_b_01ec64.pth"
          ],
          {
            "tooltip": "The detection accuracy varies depending on the SAM model. ESAM can only be used if ComfyUI-YoloWorld-EfficientSAM is installed."
          }
        ],
        "device_mode": [
          [
            "AUTO",
            "Prefer GPU",
            "CPU"
          ],
          {
            "tooltip": "AUTO: Only applicable when a GPU is available. It temporarily loads the SAM_MODEL into VRAM only when the detection function is used.\nPrefer GPU: Tries to keep the SAM_MODEL on the GPU whenever possible. This can be used when there is sufficient VRAM available.\nCPU: Always loads only on the CPU."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name",
        "device_mode"
      ]
    },
    "output": [
      "SAM_MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SAM_MODEL"
    ],
    "name": "SAMLoader",
    "display_name": "SAMLoader (Impact)",
    "description": "Load the SAM (Segment Anything) model. This can be used in places that utilize SAM detection functionality, such as SAMDetector or SimpleDetector.\nThe SAM detection functionality in Impact Pack must use the SAM_MODEL loaded through this node.",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack",
    "output_node": false
  },
  "CLIPSegDetectorProvider": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "multiline": false,
            "tooltip": "Enter the targets to be detected, separated by commas"
          }
        ],
        "blur": [
          "FLOAT",
          {
            "min": 0,
            "max": 15,
            "step": 0.1,
            "default": 7,
            "tooltip": "Blurs the detected mask"
          }
        ],
        "threshold": [
          "FLOAT",
          {
            "min": 0,
            "max": 1,
            "step": 0.05,
            "default": 0.4,
            "tooltip": "Detects only areas that are certain above the threshold."
          }
        ],
        "dilation_factor": [
          "INT",
          {
            "min": 0,
            "max": 10,
            "step": 1,
            "default": 4,
            "tooltip": "Dilates the detected mask."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "text",
        "blur",
        "threshold",
        "dilation_factor"
      ]
    },
    "output": [
      "BBOX_DETECTOR"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BBOX_DETECTOR"
    ],
    "name": "CLIPSegDetectorProvider",
    "display_name": "CLIPSegDetectorProvider",
    "description": "Provides a detection function using CLIPSeg, which generates masks based on text prompts.\nTo use this node, the CLIPSeg custom node must be installed.",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ONNXDetectorProvider": {
    "input": {
      "required": {
        "model_name": [
          []
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name"
      ]
    },
    "output": [
      "BBOX_DETECTOR"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BBOX_DETECTOR"
    ],
    "name": "ONNXDetectorProvider",
    "display_name": "ONNXDetectorProvider",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack",
    "output_node": false
  },
  "BitwiseAndMaskForEach": {
    "input": {
      "required": {
        "base_segs": [
          "SEGS"
        ],
        "mask_segs": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "base_segs",
        "mask_segs"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "BitwiseAndMaskForEach",
    "display_name": "Pixelwise(SEGS & SEGS)",
    "description": "Retains only the overlapping areas between the masks included in base_segs and the mask regions of mask_segs. SEGS with no overlapping mask areas are filtered out.",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "SubtractMaskForEach": {
    "input": {
      "required": {
        "base_segs": [
          "SEGS"
        ],
        "mask_segs": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "base_segs",
        "mask_segs"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "SubtractMaskForEach",
    "display_name": "Pixelwise(SEGS - SEGS)",
    "description": "Removes only the overlapping areas between the masks included in base_segs and the mask regions of mask_segs. SEGS with no overlapping mask areas are filtered out.",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "DetailerForEach": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "segs": [
          "SEGS"
        ],
        "model": [
          "MODEL",
          {
            "tooltip": "If the `ImpactDummyInput` is connected to the model, the inference stage is skipped."
          }
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "guide_size": [
          "FLOAT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "guide_size_for": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "bbox",
            "label_off": "crop_region"
          }
        ],
        "max_size": [
          "FLOAT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]",
            "OSS FLUX",
            "OSS Wan"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "noise_mask": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "force_inpaint": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "wildcard": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "cycle": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      },
      "optional": {
        "detailer_hook": [
          "DETAILER_HOOK"
        ],
        "inpaint_model": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ],
        "tiled_encode": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "tiled_decode": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "segs",
        "model",
        "clip",
        "vae",
        "guide_size",
        "guide_size_for",
        "max_size",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "denoise",
        "feather",
        "noise_mask",
        "force_inpaint",
        "wildcard",
        "cycle"
      ],
      "optional": [
        "detailer_hook",
        "inpaint_model",
        "noise_mask_feather",
        "scheduler_func_opt",
        "tiled_encode",
        "tiled_decode"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "DetailerForEach",
    "display_name": "Detailer (SEGS)",
    "description": "It enhances details by inpainting each region within the detected area bundle (SEGS) after enlarging them based on the guide size.",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "DetailerForEachDebug": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "segs": [
          "SEGS"
        ],
        "model": [
          "MODEL",
          {
            "tooltip": "If the `ImpactDummyInput` is connected to the model, the inference stage is skipped."
          }
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "guide_size": [
          "FLOAT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "guide_size_for": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "bbox",
            "label_off": "crop_region"
          }
        ],
        "max_size": [
          "FLOAT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]",
            "OSS FLUX",
            "OSS Wan"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "noise_mask": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "force_inpaint": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "wildcard": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "cycle": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      },
      "optional": {
        "detailer_hook": [
          "DETAILER_HOOK"
        ],
        "inpaint_model": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ],
        "tiled_encode": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "tiled_decode": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "segs",
        "model",
        "clip",
        "vae",
        "guide_size",
        "guide_size_for",
        "max_size",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "denoise",
        "feather",
        "noise_mask",
        "force_inpaint",
        "wildcard",
        "cycle"
      ],
      "optional": [
        "detailer_hook",
        "inpaint_model",
        "noise_mask_feather",
        "scheduler_func_opt",
        "tiled_encode",
        "tiled_decode"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      true,
      true,
      true,
      true
    ],
    "output_name": [
      "image",
      "cropped",
      "cropped_refined",
      "cropped_refined_alpha",
      "cnet_images"
    ],
    "name": "DetailerForEachDebug",
    "display_name": "DetailerDebug (SEGS)",
    "description": "It enhances details by inpainting each region within the detected area bundle (SEGS) after enlarging them based on the guide size.",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "DetailerForEachPipe": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "segs": [
          "SEGS"
        ],
        "guide_size": [
          "FLOAT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "guide_size_for": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "bbox",
            "label_off": "crop_region"
          }
        ],
        "max_size": [
          "FLOAT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]",
            "OSS FLUX",
            "OSS Wan"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "noise_mask": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "force_inpaint": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "basic_pipe": [
          "BASIC_PIPE",
          {
            "tooltip": "If the `ImpactDummyInput` is connected to the model in the basic_pipe, the inference stage is skipped."
          }
        ],
        "wildcard": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "refiner_ratio": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0
          }
        ],
        "cycle": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      },
      "optional": {
        "detailer_hook": [
          "DETAILER_HOOK"
        ],
        "refiner_basic_pipe_opt": [
          "BASIC_PIPE"
        ],
        "inpaint_model": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ],
        "tiled_encode": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "tiled_decode": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "segs",
        "guide_size",
        "guide_size_for",
        "max_size",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "feather",
        "noise_mask",
        "force_inpaint",
        "basic_pipe",
        "wildcard",
        "refiner_ratio",
        "cycle"
      ],
      "optional": [
        "detailer_hook",
        "refiner_basic_pipe_opt",
        "inpaint_model",
        "noise_mask_feather",
        "scheduler_func_opt",
        "tiled_encode",
        "tiled_decode"
      ]
    },
    "output": [
      "IMAGE",
      "SEGS",
      "BASIC_PIPE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      true
    ],
    "output_name": [
      "image",
      "segs",
      "basic_pipe",
      "cnet_images"
    ],
    "name": "DetailerForEachPipe",
    "display_name": "Detailer (SEGS/pipe)",
    "description": "It enhances details by inpainting each region within the detected area bundle (SEGS) after enlarging them based on the guide size.",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "DetailerForEachDebugPipe": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "segs": [
          "SEGS"
        ],
        "guide_size": [
          "FLOAT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "guide_size_for": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "bbox",
            "label_off": "crop_region"
          }
        ],
        "max_size": [
          "FLOAT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]",
            "OSS FLUX",
            "OSS Wan"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "noise_mask": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "force_inpaint": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "basic_pipe": [
          "BASIC_PIPE",
          {
            "tooltip": "If the `ImpactDummyInput` is connected to the model in the basic_pipe, the inference stage is skipped."
          }
        ],
        "wildcard": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "refiner_ratio": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0
          }
        ],
        "cycle": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      },
      "optional": {
        "detailer_hook": [
          "DETAILER_HOOK"
        ],
        "refiner_basic_pipe_opt": [
          "BASIC_PIPE"
        ],
        "inpaint_model": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ],
        "tiled_encode": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "tiled_decode": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "segs",
        "guide_size",
        "guide_size_for",
        "max_size",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "feather",
        "noise_mask",
        "force_inpaint",
        "basic_pipe",
        "wildcard",
        "refiner_ratio",
        "cycle"
      ],
      "optional": [
        "detailer_hook",
        "refiner_basic_pipe_opt",
        "inpaint_model",
        "noise_mask_feather",
        "scheduler_func_opt",
        "tiled_encode",
        "tiled_decode"
      ]
    },
    "output": [
      "IMAGE",
      "SEGS",
      "BASIC_PIPE",
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      true,
      true,
      true,
      true
    ],
    "output_name": [
      "image",
      "segs",
      "basic_pipe",
      "cropped",
      "cropped_refined",
      "cropped_refined_alpha",
      "cnet_images"
    ],
    "name": "DetailerForEachDebugPipe",
    "display_name": "DetailerDebug (SEGS/pipe)",
    "description": "It enhances details by inpainting each region within the detected area bundle (SEGS) after enlarging them based on the guide size.",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "DetailerForEachPipeForAnimateDiff": {
    "input": {
      "required": {
        "image_frames": [
          "IMAGE"
        ],
        "segs": [
          "SEGS"
        ],
        "guide_size": [
          "FLOAT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "guide_size_for": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "bbox",
            "label_off": "crop_region"
          }
        ],
        "max_size": [
          "FLOAT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]",
            "OSS FLUX",
            "OSS Wan"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "basic_pipe": [
          "BASIC_PIPE",
          {
            "tooltip": "If the `ImpactDummyInput` is connected to the model in the basic_pipe, the inference stage is skipped."
          }
        ],
        "refiner_ratio": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0
          }
        ]
      },
      "optional": {
        "detailer_hook": [
          "DETAILER_HOOK"
        ],
        "refiner_basic_pipe_opt": [
          "BASIC_PIPE"
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "image_frames",
        "segs",
        "guide_size",
        "guide_size_for",
        "max_size",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "feather",
        "basic_pipe",
        "refiner_ratio"
      ],
      "optional": [
        "detailer_hook",
        "refiner_basic_pipe_opt",
        "noise_mask_feather",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "IMAGE",
      "SEGS",
      "BASIC_PIPE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      true
    ],
    "output_name": [
      "image",
      "segs",
      "basic_pipe",
      "cnet_images"
    ],
    "name": "DetailerForEachPipeForAnimateDiff",
    "display_name": "Detailer For AnimateDiff (SEGS/pipe)",
    "description": "This node enhances details by inpainting each region within the detected area bundle (SEGS) after enlarging them based on the guide size.\nThis node is a specialized detailer node for enhancing video details, such as in AnimateDiff. It can handle cases where the masks contained in SEGS serve as batch masks spanning multiple frames.",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "SAMDetectorCombined": {
    "input": {
      "required": {
        "sam_model": [
          "SAM_MODEL",
          {
            "tooltip": "Segment Anything Model for Silhouette Detection.\nBe sure to use the SAM_MODEL loaded through the SAMLoader (Impact) node as input."
          }
        ],
        "segs": [
          "SEGS",
          {
            "tooltip": "This is the segment information detected by the detector.\nIt refines the Mask through the SAM (Segment Anything) detector for all areas pointed to by SEGS, and combines all Masks to return as a single Mask."
          }
        ],
        "image": [
          "IMAGE",
          {
            "tooltip": "It is assumed that segs contains only the information about the detected areas, and does not include the image. SAM (Segment Anything) operates by referencing this image."
          }
        ],
        "detection_hint": [
          [
            "center-1",
            "horizontal-2",
            "vertical-2",
            "rect-4",
            "diamond-4",
            "mask-area",
            "mask-points",
            "mask-point-bbox",
            "none"
          ],
          {
            "tooltip": "It is recommended to use only center-1.\nWhen refining the mask of SEGS with the SAM (Segment Anything) model, center-1 uses only the rectangular area of SEGS and a single point at the exact center as hints.\nOther options were added during the experimental stage and do not work well."
          }
        ],
        "dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1,
            "tooltip": "Set the value to dilate the result mask. If the value is negative, it erodes the mask."
          }
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.93,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "Set the sensitivity threshold for the mask detected by SAM (Segment Anything). A higher value generates a more specific mask with a narrower range. For example, when pointing to a person's area, it might detect clothes, which is a narrower range, instead of the entire person."
          }
        ],
        "bbox_expansion": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1,
            "tooltip": "When performing SAM (Segment Anything) detection within the SEGS area, the rectangular area of SEGS is expanded and used as a hint."
          }
        ],
        "mask_hint_threshold": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "When detection_hint is mask-area, the mask of SEGS is used as a point hint for SAM (Segment Anything).\nIn this case, only the areas of the mask with brightness values equal to or greater than mask_hint_threshold are used as hints."
          }
        ],
        "mask_hint_use_negative": [
          [
            "False",
            "Small",
            "Outter"
          ],
          {
            "tooltip": "When detecting with SAM (Segment Anything), negative hints are applied as follows:\nSmall: When the SEGS is smaller than 10 pixels in size\nOuter: Sampling the image area outside the SEGS region at regular intervals"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sam_model",
        "segs",
        "image",
        "detection_hint",
        "dilation",
        "threshold",
        "bbox_expansion",
        "mask_hint_threshold",
        "mask_hint_use_negative"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "SAMDetectorCombined",
    "display_name": "SAMDetector (combined)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Detector",
    "output_node": false
  },
  "SAMDetectorSegmented": {
    "input": {
      "required": {
        "sam_model": [
          "SAM_MODEL",
          {
            "tooltip": "Segment Anything Model for Silhouette Detection.\nBe sure to use the SAM_MODEL loaded through the SAMLoader (Impact) node as input."
          }
        ],
        "segs": [
          "SEGS",
          {
            "tooltip": "This is the segment information detected by the detector.\nFor the SEGS region, the masks detected by SAM (Segment Anything) are created as a unified mask and a batch of individual masks."
          }
        ],
        "image": [
          "IMAGE",
          {
            "tooltip": "It is assumed that segs contains only the information about the detected areas, and does not include the image. SAM (Segment Anything) operates by referencing this image."
          }
        ],
        "detection_hint": [
          [
            "center-1",
            "horizontal-2",
            "vertical-2",
            "rect-4",
            "diamond-4",
            "mask-area",
            "mask-points",
            "mask-point-bbox",
            "none"
          ],
          {
            "tooltip": "It is recommended to use only center-1.\nWhen refining the mask of SEGS with the SAM (Segment Anything) model, center-1 uses only the rectangular area of SEGS and a single point at the exact center as hints.\nOther options were added during the experimental stage and do not work well."
          }
        ],
        "dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1,
            "tooltip": "Set the value to dilate the result mask. If the value is negative, it erodes the mask."
          }
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.93,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "bbox_expansion": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1,
            "tooltip": "When performing SAM (Segment Anything) detection within the SEGS area, the rectangular area of SEGS is expanded and used as a hint."
          }
        ],
        "mask_hint_threshold": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "When detection_hint is mask-area, the mask of SEGS is used as a point hint for SAM (Segment Anything).\nIn this case, only the areas of the mask with brightness values equal to or greater than mask_hint_threshold are used as hints."
          }
        ],
        "mask_hint_use_negative": [
          [
            "False",
            "Small",
            "Outter"
          ],
          {
            "tooltip": "When detecting with SAM (Segment Anything), negative hints are applied as follows:\nSmall: When the SEGS is smaller than 10 pixels in size\nOuter: Sampling the image area outside the SEGS region at regular intervals"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "sam_model",
        "segs",
        "image",
        "detection_hint",
        "dilation",
        "threshold",
        "bbox_expansion",
        "mask_hint_threshold",
        "mask_hint_use_negative"
      ]
    },
    "output": [
      "MASK",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "combined_mask",
      "batch_masks"
    ],
    "name": "SAMDetectorSegmented",
    "display_name": "SAMDetector (segmented)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Detector",
    "output_node": false
  },
  "FaceDetailer": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "model": [
          "MODEL",
          {
            "tooltip": "If the `ImpactDummyInput` is connected to the model, the inference stage is skipped."
          }
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "guide_size": [
          "FLOAT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "guide_size_for": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "bbox",
            "label_off": "crop_region"
          }
        ],
        "max_size": [
          "FLOAT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]",
            "OSS FLUX",
            "OSS Wan"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "noise_mask": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "force_inpaint": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "bbox_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "bbox_dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "bbox_crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 10,
            "step": 0.1
          }
        ],
        "sam_detection_hint": [
          [
            "center-1",
            "horizontal-2",
            "vertical-2",
            "rect-4",
            "diamond-4",
            "mask-area",
            "mask-points",
            "mask-point-bbox",
            "none"
          ]
        ],
        "sam_dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "sam_threshold": [
          "FLOAT",
          {
            "default": 0.93,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "sam_bbox_expansion": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "sam_mask_hint_threshold": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "sam_mask_hint_use_negative": [
          [
            "False",
            "Small",
            "Outter"
          ]
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "bbox_detector": [
          "BBOX_DETECTOR"
        ],
        "wildcard": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "cycle": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      },
      "optional": {
        "sam_model_opt": [
          "SAM_MODEL"
        ],
        "segm_detector_opt": [
          "SEGM_DETECTOR"
        ],
        "detailer_hook": [
          "DETAILER_HOOK"
        ],
        "inpaint_model": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ],
        "tiled_encode": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "tiled_decode": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "model",
        "clip",
        "vae",
        "guide_size",
        "guide_size_for",
        "max_size",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "denoise",
        "feather",
        "noise_mask",
        "force_inpaint",
        "bbox_threshold",
        "bbox_dilation",
        "bbox_crop_factor",
        "sam_detection_hint",
        "sam_dilation",
        "sam_threshold",
        "sam_bbox_expansion",
        "sam_mask_hint_threshold",
        "sam_mask_hint_use_negative",
        "drop_size",
        "bbox_detector",
        "wildcard",
        "cycle"
      ],
      "optional": [
        "sam_model_opt",
        "segm_detector_opt",
        "detailer_hook",
        "inpaint_model",
        "noise_mask_feather",
        "scheduler_func_opt",
        "tiled_encode",
        "tiled_decode"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "MASK",
      "DETAILER_PIPE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      true,
      true,
      false,
      false,
      true
    ],
    "output_name": [
      "image",
      "cropped_refined",
      "cropped_enhanced_alpha",
      "mask",
      "detailer_pipe",
      "cnet_images"
    ],
    "name": "FaceDetailer",
    "display_name": "FaceDetailer",
    "description": "This node enhances details by automatically detecting specific objects in the input image using detection models (bbox, segm, sam) and regenerating the image by enlarging the detected area based on the guide size.\nAlthough this node is specialized to simplify the commonly used facial detail enhancement workflow, it can also be used for various automatic inpainting purposes depending on the detection model.",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Simple",
    "output_node": false
  },
  "FaceDetailerPipe": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "detailer_pipe": [
          "DETAILER_PIPE",
          {
            "tooltip": "If the `ImpactDummyInput` is connected to the model in the detailer_pipe, the inference stage is skipped."
          }
        ],
        "guide_size": [
          "FLOAT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "guide_size_for": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "bbox",
            "label_off": "crop_region"
          }
        ],
        "max_size": [
          "FLOAT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]",
            "OSS FLUX",
            "OSS Wan"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "noise_mask": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "force_inpaint": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "bbox_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "bbox_dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "bbox_crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 10,
            "step": 0.1
          }
        ],
        "sam_detection_hint": [
          [
            "center-1",
            "horizontal-2",
            "vertical-2",
            "rect-4",
            "diamond-4",
            "mask-area",
            "mask-points",
            "mask-point-bbox",
            "none"
          ]
        ],
        "sam_dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "sam_threshold": [
          "FLOAT",
          {
            "default": 0.93,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "sam_bbox_expansion": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "sam_mask_hint_threshold": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "sam_mask_hint_use_negative": [
          [
            "False",
            "Small",
            "Outter"
          ]
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "refiner_ratio": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0
          }
        ],
        "cycle": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      },
      "optional": {
        "inpaint_model": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ],
        "tiled_encode": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "tiled_decode": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "detailer_pipe",
        "guide_size",
        "guide_size_for",
        "max_size",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "feather",
        "noise_mask",
        "force_inpaint",
        "bbox_threshold",
        "bbox_dilation",
        "bbox_crop_factor",
        "sam_detection_hint",
        "sam_dilation",
        "sam_threshold",
        "sam_bbox_expansion",
        "sam_mask_hint_threshold",
        "sam_mask_hint_use_negative",
        "drop_size",
        "refiner_ratio",
        "cycle"
      ],
      "optional": [
        "inpaint_model",
        "noise_mask_feather",
        "scheduler_func_opt",
        "tiled_encode",
        "tiled_decode"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "MASK",
      "DETAILER_PIPE",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      true,
      true,
      false,
      false,
      true
    ],
    "output_name": [
      "image",
      "cropped_refined",
      "cropped_enhanced_alpha",
      "mask",
      "detailer_pipe",
      "cnet_images"
    ],
    "name": "FaceDetailerPipe",
    "display_name": "FaceDetailer (pipe)",
    "description": "This node enhances details by automatically detecting specific objects in the input image using detection models (bbox, segm, sam) and regenerating the image by enlarging the detected area based on the guide size.\nAlthough this node is specialized to simplify the commonly used facial detail enhancement workflow, it can also be used for various automatic inpainting purposes depending on the detection model.",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Simple",
    "output_node": false
  },
  "MaskDetailerPipe": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "mask": [
          "MASK"
        ],
        "basic_pipe": [
          "BASIC_PIPE"
        ],
        "guide_size": [
          "FLOAT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "guide_size_for": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "mask bbox",
            "label_off": "crop region"
          }
        ],
        "max_size": [
          "FLOAT",
          {
            "default": 1024,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "mask_mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "masked only",
            "label_off": "whole"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]",
            "OSS FLUX",
            "OSS Wan"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 10,
            "step": 0.1
          }
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "refiner_ratio": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 100
          }
        ],
        "cycle": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      },
      "optional": {
        "refiner_basic_pipe_opt": [
          "BASIC_PIPE"
        ],
        "detailer_hook": [
          "DETAILER_HOOK"
        ],
        "inpaint_model": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "bbox_fill": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "contour_fill": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "mask",
        "basic_pipe",
        "guide_size",
        "guide_size_for",
        "max_size",
        "mask_mode",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "feather",
        "crop_factor",
        "drop_size",
        "refiner_ratio",
        "batch_size",
        "cycle"
      ],
      "optional": [
        "refiner_basic_pipe_opt",
        "detailer_hook",
        "inpaint_model",
        "noise_mask_feather",
        "bbox_fill",
        "contour_fill",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "IMAGE",
      "IMAGE",
      "IMAGE",
      "BASIC_PIPE",
      "BASIC_PIPE"
    ],
    "output_is_list": [
      false,
      true,
      true,
      false,
      false
    ],
    "output_name": [
      "image",
      "cropped_refined",
      "cropped_enhanced_alpha",
      "basic_pipe",
      "refiner_basic_pipe_opt"
    ],
    "name": "MaskDetailerPipe",
    "display_name": "MaskDetailer (pipe)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "ToDetailerPipe": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "bbox_detector": [
          "BBOX_DETECTOR"
        ],
        "wildcard": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text"
          ]
        ],
        "Select to add Wildcard": [
          [
            "Select the Wildcard to add to the text"
          ]
        ]
      },
      "optional": {
        "sam_model_opt": [
          "SAM_MODEL"
        ],
        "segm_detector_opt": [
          "SEGM_DETECTOR"
        ],
        "detailer_hook": [
          "DETAILER_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "vae",
        "positive",
        "negative",
        "bbox_detector",
        "wildcard",
        "Select to add LoRA",
        "Select to add Wildcard"
      ],
      "optional": [
        "sam_model_opt",
        "segm_detector_opt",
        "detailer_hook"
      ]
    },
    "output": [
      "DETAILER_PIPE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "detailer_pipe"
    ],
    "name": "ToDetailerPipe",
    "display_name": "ToDetailerPipe",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "ToDetailerPipeSDXL": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "refiner_model": [
          "MODEL"
        ],
        "refiner_clip": [
          "CLIP"
        ],
        "refiner_positive": [
          "CONDITIONING"
        ],
        "refiner_negative": [
          "CONDITIONING"
        ],
        "bbox_detector": [
          "BBOX_DETECTOR"
        ],
        "wildcard": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text"
          ]
        ],
        "Select to add Wildcard": [
          [
            "Select the Wildcard to add to the text"
          ]
        ]
      },
      "optional": {
        "sam_model_opt": [
          "SAM_MODEL"
        ],
        "segm_detector_opt": [
          "SEGM_DETECTOR"
        ],
        "detailer_hook": [
          "DETAILER_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "vae",
        "positive",
        "negative",
        "refiner_model",
        "refiner_clip",
        "refiner_positive",
        "refiner_negative",
        "bbox_detector",
        "wildcard",
        "Select to add LoRA",
        "Select to add Wildcard"
      ],
      "optional": [
        "sam_model_opt",
        "segm_detector_opt",
        "detailer_hook"
      ]
    },
    "output": [
      "DETAILER_PIPE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "detailer_pipe"
    ],
    "name": "ToDetailerPipeSDXL",
    "display_name": "ToDetailerPipeSDXL",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "FromDetailerPipe": {
    "input": {
      "required": {
        "detailer_pipe": [
          "DETAILER_PIPE"
        ]
      }
    },
    "input_order": {
      "required": [
        "detailer_pipe"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "BBOX_DETECTOR",
      "SAM_MODEL",
      "SEGM_DETECTOR",
      "DETAILER_HOOK"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "clip",
      "vae",
      "positive",
      "negative",
      "bbox_detector",
      "sam_model_opt",
      "segm_detector_opt",
      "detailer_hook"
    ],
    "name": "FromDetailerPipe",
    "display_name": "FromDetailerPipe",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "FromDetailerPipe_v2": {
    "input": {
      "required": {
        "detailer_pipe": [
          "DETAILER_PIPE"
        ]
      }
    },
    "input_order": {
      "required": [
        "detailer_pipe"
      ]
    },
    "output": [
      "DETAILER_PIPE",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "BBOX_DETECTOR",
      "SAM_MODEL",
      "SEGM_DETECTOR",
      "DETAILER_HOOK"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "detailer_pipe",
      "model",
      "clip",
      "vae",
      "positive",
      "negative",
      "bbox_detector",
      "sam_model_opt",
      "segm_detector_opt",
      "detailer_hook"
    ],
    "name": "FromDetailerPipe_v2",
    "display_name": "FromDetailerPipe_v2",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "FromDetailerPipeSDXL": {
    "input": {
      "required": {
        "detailer_pipe": [
          "DETAILER_PIPE"
        ]
      }
    },
    "input_order": {
      "required": [
        "detailer_pipe"
      ]
    },
    "output": [
      "DETAILER_PIPE",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING",
      "BBOX_DETECTOR",
      "SAM_MODEL",
      "SEGM_DETECTOR",
      "DETAILER_HOOK",
      "MODEL",
      "CLIP",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "detailer_pipe",
      "model",
      "clip",
      "vae",
      "positive",
      "negative",
      "bbox_detector",
      "sam_model_opt",
      "segm_detector_opt",
      "detailer_hook",
      "refiner_model",
      "refiner_clip",
      "refiner_positive",
      "refiner_negative"
    ],
    "name": "FromDetailerPipeSDXL",
    "display_name": "FromDetailer (SDXL/pipe)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "AnyPipeToBasic": {
    "input": {
      "required": {
        "any_pipe": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "any_pipe"
      ]
    },
    "output": [
      "BASIC_PIPE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "basic_pipe"
    ],
    "name": "AnyPipeToBasic",
    "display_name": "Any PIPE -> BasicPipe",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "ToBasicPipe": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "vae",
        "positive",
        "negative"
      ]
    },
    "output": [
      "BASIC_PIPE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "basic_pipe"
    ],
    "name": "ToBasicPipe",
    "display_name": "ToBasicPipe",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "FromBasicPipe": {
    "input": {
      "required": {
        "basic_pipe": [
          "BASIC_PIPE"
        ]
      }
    },
    "input_order": {
      "required": [
        "basic_pipe"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "clip",
      "vae",
      "positive",
      "negative"
    ],
    "name": "FromBasicPipe",
    "display_name": "FromBasicPipe",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "FromBasicPipe_v2": {
    "input": {
      "required": {
        "basic_pipe": [
          "BASIC_PIPE"
        ]
      }
    },
    "input_order": {
      "required": [
        "basic_pipe"
      ]
    },
    "output": [
      "BASIC_PIPE",
      "MODEL",
      "CLIP",
      "VAE",
      "CONDITIONING",
      "CONDITIONING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "basic_pipe",
      "model",
      "clip",
      "vae",
      "positive",
      "negative"
    ],
    "name": "FromBasicPipe_v2",
    "display_name": "FromBasicPipe_v2",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "BasicPipeToDetailerPipe": {
    "input": {
      "required": {
        "basic_pipe": [
          "BASIC_PIPE"
        ],
        "bbox_detector": [
          "BBOX_DETECTOR"
        ],
        "wildcard": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text"
          ]
        ],
        "Select to add Wildcard": [
          [
            "Select the Wildcard to add to the text"
          ]
        ]
      },
      "optional": {
        "sam_model_opt": [
          "SAM_MODEL"
        ],
        "segm_detector_opt": [
          "SEGM_DETECTOR"
        ],
        "detailer_hook": [
          "DETAILER_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "basic_pipe",
        "bbox_detector",
        "wildcard",
        "Select to add LoRA",
        "Select to add Wildcard"
      ],
      "optional": [
        "sam_model_opt",
        "segm_detector_opt",
        "detailer_hook"
      ]
    },
    "output": [
      "DETAILER_PIPE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "detailer_pipe"
    ],
    "name": "BasicPipeToDetailerPipe",
    "display_name": "BasicPipe -> DetailerPipe",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "BasicPipeToDetailerPipeSDXL": {
    "input": {
      "required": {
        "base_basic_pipe": [
          "BASIC_PIPE"
        ],
        "refiner_basic_pipe": [
          "BASIC_PIPE"
        ],
        "bbox_detector": [
          "BBOX_DETECTOR"
        ],
        "wildcard": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text"
          ]
        ],
        "Select to add Wildcard": [
          [
            "Select the Wildcard to add to the text"
          ]
        ]
      },
      "optional": {
        "sam_model_opt": [
          "SAM_MODEL"
        ],
        "segm_detector_opt": [
          "SEGM_DETECTOR"
        ],
        "detailer_hook": [
          "DETAILER_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "base_basic_pipe",
        "refiner_basic_pipe",
        "bbox_detector",
        "wildcard",
        "Select to add LoRA",
        "Select to add Wildcard"
      ],
      "optional": [
        "sam_model_opt",
        "segm_detector_opt",
        "detailer_hook"
      ]
    },
    "output": [
      "DETAILER_PIPE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "detailer_pipe"
    ],
    "name": "BasicPipeToDetailerPipeSDXL",
    "display_name": "BasicPipe -> DetailerPipe (SDXL)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "DetailerPipeToBasicPipe": {
    "input": {
      "required": {
        "detailer_pipe": [
          "DETAILER_PIPE"
        ]
      }
    },
    "input_order": {
      "required": [
        "detailer_pipe"
      ]
    },
    "output": [
      "BASIC_PIPE",
      "BASIC_PIPE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "base_basic_pipe",
      "refiner_basic_pipe"
    ],
    "name": "DetailerPipeToBasicPipe",
    "display_name": "DetailerPipe -> BasicPipe",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "EditBasicPipe": {
    "input": {
      "required": {
        "basic_pipe": [
          "BASIC_PIPE"
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ]
      }
    },
    "input_order": {
      "required": [
        "basic_pipe"
      ],
      "optional": [
        "model",
        "clip",
        "vae",
        "positive",
        "negative"
      ]
    },
    "output": [
      "BASIC_PIPE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "basic_pipe"
    ],
    "name": "EditBasicPipe",
    "display_name": "Edit BasicPipe",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "EditDetailerPipe": {
    "input": {
      "required": {
        "detailer_pipe": [
          "DETAILER_PIPE"
        ],
        "wildcard": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text"
          ]
        ],
        "Select to add Wildcard": [
          [
            "Select the Wildcard to add to the text"
          ]
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "bbox_detector": [
          "BBOX_DETECTOR"
        ],
        "sam_model": [
          "SAM_MODEL"
        ],
        "segm_detector": [
          "SEGM_DETECTOR"
        ],
        "detailer_hook": [
          "DETAILER_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "detailer_pipe",
        "wildcard",
        "Select to add LoRA",
        "Select to add Wildcard"
      ],
      "optional": [
        "model",
        "clip",
        "vae",
        "positive",
        "negative",
        "bbox_detector",
        "sam_model",
        "segm_detector",
        "detailer_hook"
      ]
    },
    "output": [
      "DETAILER_PIPE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "detailer_pipe"
    ],
    "name": "EditDetailerPipe",
    "display_name": "Edit DetailerPipe",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "EditDetailerPipeSDXL": {
    "input": {
      "required": {
        "detailer_pipe": [
          "DETAILER_PIPE"
        ],
        "wildcard": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text"
          ]
        ],
        "Select to add Wildcard": [
          [
            "Select the Wildcard to add to the text"
          ]
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "refiner_model": [
          "MODEL"
        ],
        "refiner_clip": [
          "CLIP"
        ],
        "refiner_positive": [
          "CONDITIONING"
        ],
        "refiner_negative": [
          "CONDITIONING"
        ],
        "bbox_detector": [
          "BBOX_DETECTOR"
        ],
        "sam_model": [
          "SAM_MODEL"
        ],
        "segm_detector": [
          "SEGM_DETECTOR"
        ],
        "detailer_hook": [
          "DETAILER_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "detailer_pipe",
        "wildcard",
        "Select to add LoRA",
        "Select to add Wildcard"
      ],
      "optional": [
        "model",
        "clip",
        "vae",
        "positive",
        "negative",
        "refiner_model",
        "refiner_clip",
        "refiner_positive",
        "refiner_negative",
        "bbox_detector",
        "sam_model",
        "segm_detector",
        "detailer_hook"
      ]
    },
    "output": [
      "DETAILER_PIPE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "detailer_pipe"
    ],
    "name": "EditDetailerPipeSDXL",
    "display_name": "Edit DetailerPipe (SDXL)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Pipe",
    "output_node": false
  },
  "LatentPixelScale": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "scale_method": [
          [
            "nearest-exact",
            "bilinear",
            "lanczos",
            "area"
          ]
        ],
        "scale_factor": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 0.1,
            "max": 10000,
            "step": 0.1
          }
        ],
        "vae": [
          "VAE"
        ],
        "use_tiled_vae": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ]
      },
      "optional": {
        "upscale_model_opt": [
          "UPSCALE_MODEL"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "scale_method",
        "scale_factor",
        "vae",
        "use_tiled_vae"
      ],
      "optional": [
        "upscale_model_opt"
      ]
    },
    "output": [
      "LATENT",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "IMAGE"
    ],
    "name": "LatentPixelScale",
    "display_name": "Latent Scale (on Pixel Space)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "PixelKSampleUpscalerProvider": {
    "input": {
      "required": {
        "scale_method": [
          [
            "nearest-exact",
            "bilinear",
            "lanczos",
            "area"
          ]
        ],
        "model": [
          "MODEL"
        ],
        "vae": [
          "VAE"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]",
            "OSS FLUX",
            "OSS Wan"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "use_tiled_vae": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 4096,
            "step": 64
          }
        ]
      },
      "optional": {
        "upscale_model_opt": [
          "UPSCALE_MODEL"
        ],
        "pk_hook_opt": [
          "PK_HOOK"
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "scale_method",
        "model",
        "vae",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "denoise",
        "use_tiled_vae",
        "tile_size"
      ],
      "optional": [
        "upscale_model_opt",
        "pk_hook_opt",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "UPSCALER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "UPSCALER"
    ],
    "name": "PixelKSampleUpscalerProvider",
    "display_name": "PixelKSampleUpscalerProvider",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "PixelKSampleUpscalerProviderPipe": {
    "input": {
      "required": {
        "scale_method": [
          [
            "nearest-exact",
            "bilinear",
            "lanczos",
            "area"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]",
            "OSS FLUX",
            "OSS Wan"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "use_tiled_vae": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "basic_pipe": [
          "BASIC_PIPE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 4096,
            "step": 64
          }
        ]
      },
      "optional": {
        "upscale_model_opt": [
          "UPSCALE_MODEL"
        ],
        "pk_hook_opt": [
          "PK_HOOK"
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ],
        "tile_cnet_opt": [
          "CONTROL_NET"
        ],
        "tile_cnet_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "scale_method",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "use_tiled_vae",
        "basic_pipe",
        "tile_size"
      ],
      "optional": [
        "upscale_model_opt",
        "pk_hook_opt",
        "scheduler_func_opt",
        "tile_cnet_opt",
        "tile_cnet_strength"
      ]
    },
    "output": [
      "UPSCALER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "UPSCALER"
    ],
    "name": "PixelKSampleUpscalerProviderPipe",
    "display_name": "PixelKSampleUpscalerProviderPipe",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "IterativeLatentUpscale": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 1,
            "max": 10000,
            "step": 0.1
          }
        ],
        "steps": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 10000,
            "step": 1
          }
        ],
        "temp_prefix": [
          "STRING",
          {
            "default": ""
          }
        ],
        "upscaler": [
          "UPSCALER"
        ],
        "step_mode": [
          [
            "simple",
            "geometric"
          ],
          {
            "default": "simple"
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "samples",
        "upscale_factor",
        "steps",
        "temp_prefix",
        "upscaler",
        "step_mode"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "LATENT",
      "VAE"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "latent",
      "vae"
    ],
    "name": "IterativeLatentUpscale",
    "display_name": "Iterative Upscale (Latent/on Pixel Space)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "IterativeImageUpscale": {
    "input": {
      "required": {
        "pixels": [
          "IMAGE"
        ],
        "upscale_factor": [
          "FLOAT",
          {
            "default": 1.5,
            "min": 1,
            "max": 10000,
            "step": 0.1
          }
        ],
        "steps": [
          "INT",
          {
            "default": 3,
            "min": 1,
            "max": 10000,
            "step": 1
          }
        ],
        "temp_prefix": [
          "STRING",
          {
            "default": ""
          }
        ],
        "upscaler": [
          "UPSCALER"
        ],
        "vae": [
          "VAE"
        ],
        "step_mode": [
          [
            "simple",
            "geometric"
          ],
          {
            "default": "simple"
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "pixels",
        "upscale_factor",
        "steps",
        "temp_prefix",
        "upscaler",
        "vae",
        "step_mode"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "image"
    ],
    "name": "IterativeImageUpscale",
    "display_name": "Iterative Upscale (Image)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "PixelTiledKSampleUpscalerProvider": {
    "input": {
      "required": {
        "scale_method": [
          [
            "nearest-exact",
            "bilinear",
            "lanczos",
            "area"
          ]
        ],
        "model": [
          "MODEL"
        ],
        "vae": [
          "VAE"
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "tile_width": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 16384,
            "step": 64
          }
        ],
        "tile_height": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 16384,
            "step": 64
          }
        ],
        "tiling_strategy": [
          [
            "random",
            "padded",
            "simple"
          ]
        ]
      },
      "optional": {
        "upscale_model_opt": [
          "UPSCALE_MODEL"
        ],
        "pk_hook_opt": [
          "PK_HOOK"
        ],
        "tile_cnet_opt": [
          "CONTROL_NET"
        ],
        "tile_cnet_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "overlap": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 4096,
            "step": 32
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "scale_method",
        "model",
        "vae",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "denoise",
        "tile_width",
        "tile_height",
        "tiling_strategy"
      ],
      "optional": [
        "upscale_model_opt",
        "pk_hook_opt",
        "tile_cnet_opt",
        "tile_cnet_strength",
        "overlap"
      ]
    },
    "output": [
      "UPSCALER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "UPSCALER"
    ],
    "name": "PixelTiledKSampleUpscalerProvider",
    "display_name": "PixelTiledKSampleUpscalerProvider",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "PixelTiledKSampleUpscalerProviderPipe": {
    "input": {
      "required": {
        "scale_method": [
          [
            "nearest-exact",
            "bilinear",
            "lanczos",
            "area"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "tile_width": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 16384,
            "step": 64
          }
        ],
        "tile_height": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 16384,
            "step": 64
          }
        ],
        "tiling_strategy": [
          [
            "random",
            "padded",
            "simple"
          ]
        ],
        "basic_pipe": [
          "BASIC_PIPE"
        ]
      },
      "optional": {
        "upscale_model_opt": [
          "UPSCALE_MODEL"
        ],
        "pk_hook_opt": [
          "PK_HOOK"
        ],
        "tile_cnet_opt": [
          "CONTROL_NET"
        ],
        "tile_cnet_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "scale_method",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "tile_width",
        "tile_height",
        "tiling_strategy",
        "basic_pipe"
      ],
      "optional": [
        "upscale_model_opt",
        "pk_hook_opt",
        "tile_cnet_opt",
        "tile_cnet_strength"
      ]
    },
    "output": [
      "UPSCALER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "UPSCALER"
    ],
    "name": "PixelTiledKSampleUpscalerProviderPipe",
    "display_name": "PixelTiledKSampleUpscalerProviderPipe",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "TwoSamplersForMaskUpscalerProvider": {
    "input": {
      "required": {
        "scale_method": [
          [
            "nearest-exact",
            "bilinear",
            "lanczos",
            "area"
          ]
        ],
        "full_sample_schedule": [
          [
            "none",
            "interleave1",
            "interleave2",
            "interleave3",
            "last1",
            "last2",
            "interleave1+last1",
            "interleave2+last1",
            "interleave3+last1"
          ]
        ],
        "use_tiled_vae": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "base_sampler": [
          "KSAMPLER"
        ],
        "mask_sampler": [
          "KSAMPLER"
        ],
        "mask": [
          "MASK"
        ],
        "vae": [
          "VAE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 4096,
            "step": 64
          }
        ]
      },
      "optional": {
        "full_sampler_opt": [
          "KSAMPLER"
        ],
        "upscale_model_opt": [
          "UPSCALE_MODEL"
        ],
        "pk_hook_base_opt": [
          "PK_HOOK"
        ],
        "pk_hook_mask_opt": [
          "PK_HOOK"
        ],
        "pk_hook_full_opt": [
          "PK_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "scale_method",
        "full_sample_schedule",
        "use_tiled_vae",
        "base_sampler",
        "mask_sampler",
        "mask",
        "vae",
        "tile_size"
      ],
      "optional": [
        "full_sampler_opt",
        "upscale_model_opt",
        "pk_hook_base_opt",
        "pk_hook_mask_opt",
        "pk_hook_full_opt"
      ]
    },
    "output": [
      "UPSCALER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "UPSCALER"
    ],
    "name": "TwoSamplersForMaskUpscalerProvider",
    "display_name": "TwoSamplersForMask Upscaler Provider",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "TwoSamplersForMaskUpscalerProviderPipe": {
    "input": {
      "required": {
        "scale_method": [
          [
            "nearest-exact",
            "bilinear",
            "lanczos",
            "area"
          ]
        ],
        "full_sample_schedule": [
          [
            "none",
            "interleave1",
            "interleave2",
            "interleave3",
            "last1",
            "last2",
            "interleave1+last1",
            "interleave2+last1",
            "interleave3+last1"
          ]
        ],
        "use_tiled_vae": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "base_sampler": [
          "KSAMPLER"
        ],
        "mask_sampler": [
          "KSAMPLER"
        ],
        "mask": [
          "MASK"
        ],
        "basic_pipe": [
          "BASIC_PIPE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 4096,
            "step": 64
          }
        ]
      },
      "optional": {
        "full_sampler_opt": [
          "KSAMPLER"
        ],
        "upscale_model_opt": [
          "UPSCALE_MODEL"
        ],
        "pk_hook_base_opt": [
          "PK_HOOK"
        ],
        "pk_hook_mask_opt": [
          "PK_HOOK"
        ],
        "pk_hook_full_opt": [
          "PK_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "scale_method",
        "full_sample_schedule",
        "use_tiled_vae",
        "base_sampler",
        "mask_sampler",
        "mask",
        "basic_pipe",
        "tile_size"
      ],
      "optional": [
        "full_sampler_opt",
        "upscale_model_opt",
        "pk_hook_base_opt",
        "pk_hook_mask_opt",
        "pk_hook_full_opt"
      ]
    },
    "output": [
      "UPSCALER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "UPSCALER"
    ],
    "name": "TwoSamplersForMaskUpscalerProviderPipe",
    "display_name": "TwoSamplersForMask Upscaler Provider (pipe)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "PixelKSampleHookCombine": {
    "input": {
      "required": {
        "hook1": [
          "PK_HOOK"
        ],
        "hook2": [
          "PK_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "hook1",
        "hook2"
      ]
    },
    "output": [
      "PK_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "PK_HOOK"
    ],
    "name": "PixelKSampleHookCombine",
    "display_name": "PixelKSampleHookCombine",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "DenoiseScheduleHookProvider": {
    "input": {
      "required": {
        "schedule_for_iteration": [
          [
            "simple"
          ]
        ],
        "target_denoise": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "schedule_for_iteration",
        "target_denoise"
      ]
    },
    "output": [
      "PK_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "PK_HOOK"
    ],
    "name": "DenoiseScheduleHookProvider",
    "display_name": "DenoiseScheduleHookProvider",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "StepsScheduleHookProvider": {
    "input": {
      "required": {
        "schedule_for_iteration": [
          [
            "simple"
          ]
        ],
        "target_steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "schedule_for_iteration",
        "target_steps"
      ]
    },
    "output": [
      "PK_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "PK_HOOK"
    ],
    "name": "StepsScheduleHookProvider",
    "display_name": "StepsScheduleHookProvider",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "CfgScheduleHookProvider": {
    "input": {
      "required": {
        "schedule_for_iteration": [
          [
            "simple"
          ]
        ],
        "target_cfg": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 0.0,
            "max": 100.0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "schedule_for_iteration",
        "target_cfg"
      ]
    },
    "output": [
      "PK_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "PK_HOOK"
    ],
    "name": "CfgScheduleHookProvider",
    "display_name": "CfgScheduleHookProvider",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "NoiseInjectionHookProvider": {
    "input": {
      "required": {
        "schedule_for_iteration": [
          [
            "simple"
          ]
        ],
        "source": [
          [
            "CPU",
            "GPU"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "start_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 200.0,
            "step": 0.01
          }
        ],
        "end_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 200.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "schedule_for_iteration",
        "source",
        "seed",
        "start_strength",
        "end_strength"
      ]
    },
    "output": [
      "PK_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "PK_HOOK"
    ],
    "name": "NoiseInjectionHookProvider",
    "display_name": "NoiseInjectionHookProvider",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "UnsamplerHookProvider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "steps": [
          "INT",
          {
            "default": 25,
            "min": 1,
            "max": 10000
          }
        ],
        "start_end_at_step": [
          "INT",
          {
            "default": 21,
            "min": 0,
            "max": 10000
          }
        ],
        "end_end_at_step": [
          "INT",
          {
            "default": 24,
            "min": 0,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "normalize": [
          [
            "disable",
            "enable"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "schedule_for_iteration": [
          [
            "simple"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "steps",
        "start_end_at_step",
        "end_end_at_step",
        "cfg",
        "sampler_name",
        "scheduler",
        "normalize",
        "positive",
        "negative",
        "schedule_for_iteration"
      ]
    },
    "output": [
      "PK_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "PK_HOOK"
    ],
    "name": "UnsamplerHookProvider",
    "display_name": "UnsamplerHookProvider",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "CoreMLDetailerHookProvider": {
    "input": {
      "required": {
        "mode": [
          [
            "512x512",
            "768x768",
            "512x768",
            "768x512"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "mode"
      ]
    },
    "output": [
      "DETAILER_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DETAILER_HOOK"
    ],
    "name": "CoreMLDetailerHookProvider",
    "display_name": "CoreMLDetailerHookProvider",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "PreviewDetailerHookProvider": {
    "input": {
      "required": {
        "quality": [
          "INT",
          {
            "default": 95,
            "min": 20,
            "max": 100
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "quality"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "DETAILER_HOOK",
      "UPSCALER_HOOK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "DETAILER_HOOK",
      "UPSCALER_HOOK"
    ],
    "name": "PreviewDetailerHookProvider",
    "display_name": "PreviewDetailerHookProvider",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "DetailerHookCombine": {
    "input": {
      "required": {
        "hook1": [
          "DETAILER_HOOK"
        ],
        "hook2": [
          "DETAILER_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "hook1",
        "hook2"
      ]
    },
    "output": [
      "DETAILER_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DETAILER_HOOK"
    ],
    "name": "DetailerHookCombine",
    "display_name": "DetailerHookCombine",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "NoiseInjectionDetailerHookProvider": {
    "input": {
      "required": {
        "schedule_for_cycle": [
          [
            "skip_start",
            "from_start"
          ]
        ],
        "source": [
          [
            "CPU",
            "GPU"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "start_strength": [
          "FLOAT",
          {
            "default": 2.0,
            "min": 0.0,
            "max": 200.0,
            "step": 0.01
          }
        ],
        "end_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 200.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "schedule_for_cycle",
        "source",
        "seed",
        "start_strength",
        "end_strength"
      ]
    },
    "output": [
      "DETAILER_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DETAILER_HOOK"
    ],
    "name": "NoiseInjectionDetailerHookProvider",
    "display_name": "NoiseInjectionDetailerHookProvider",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "UnsamplerDetailerHookProvider": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "steps": [
          "INT",
          {
            "default": 25,
            "min": 1,
            "max": 10000
          }
        ],
        "start_end_at_step": [
          "INT",
          {
            "default": 21,
            "min": 0,
            "max": 10000
          }
        ],
        "end_end_at_step": [
          "INT",
          {
            "default": 24,
            "min": 0,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "normalize": [
          [
            "disable",
            "enable"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "schedule_for_cycle": [
          [
            "skip_start",
            "from_start"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "steps",
        "start_end_at_step",
        "end_end_at_step",
        "cfg",
        "sampler_name",
        "scheduler",
        "normalize",
        "positive",
        "negative",
        "schedule_for_cycle"
      ]
    },
    "output": [
      "DETAILER_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DETAILER_HOOK"
    ],
    "name": "UnsamplerDetailerHookProvider",
    "display_name": "UnsamplerDetailerHookProvider",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "DenoiseSchedulerDetailerHookProvider": {
    "input": {
      "required": {
        "schedule_for_cycle": [
          [
            "simple"
          ]
        ],
        "target_denoise": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "schedule_for_cycle",
        "target_denoise"
      ]
    },
    "output": [
      "DETAILER_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DETAILER_HOOK"
    ],
    "name": "DenoiseSchedulerDetailerHookProvider",
    "display_name": "DenoiseSchedulerDetailerHookProvider",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "SEGSOrderedFilterDetailerHookProvider": {
    "input": {
      "required": {
        "target": [
          [
            "area(=w*h)",
            "width",
            "height",
            "x1",
            "y1",
            "x2",
            "y2"
          ]
        ],
        "order": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "descending",
            "label_off": "ascending"
          }
        ],
        "take_start": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "take_count": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "target",
        "order",
        "take_start",
        "take_count"
      ]
    },
    "output": [
      "DETAILER_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DETAILER_HOOK"
    ],
    "name": "SEGSOrderedFilterDetailerHookProvider",
    "display_name": "SEGSOrderedFilterDetailerHookProvider",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "SEGSRangeFilterDetailerHookProvider": {
    "input": {
      "required": {
        "target": [
          [
            "area(=w*h)",
            "width",
            "height",
            "x1",
            "y1",
            "x2",
            "y2",
            "length_percent"
          ]
        ],
        "mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "inside",
            "label_off": "outside"
          }
        ],
        "min_value": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "max_value": [
          "INT",
          {
            "default": 67108864,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "target",
        "mode",
        "min_value",
        "max_value"
      ]
    },
    "output": [
      "DETAILER_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DETAILER_HOOK"
    ],
    "name": "SEGSRangeFilterDetailerHookProvider",
    "display_name": "SEGSRangeFilterDetailerHookProvider",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "SEGSLabelFilterDetailerHookProvider": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "preset": [
          [
            "all",
            "hand",
            "face",
            "mouth",
            "eyes",
            "eyebrows",
            "pupils",
            "left_eyebrow",
            "left_eye",
            "left_pupil",
            "right_eyebrow",
            "right_eye",
            "right_pupil",
            "short_sleeved_shirt",
            "long_sleeved_shirt",
            "short_sleeved_outwear",
            "long_sleeved_outwear",
            "vest",
            "sling",
            "shorts",
            "trousers",
            "skirt",
            "short_sleeved_dress",
            "long_sleeved_dress",
            "vest_dress",
            "sling_dress",
            "person",
            "bicycle",
            "car",
            "motorcycle",
            "airplane",
            "bus",
            "train",
            "truck",
            "boat",
            "traffic light",
            "fire hydrant",
            "stop sign",
            "parking meter",
            "bench",
            "bird",
            "cat",
            "dog",
            "horse",
            "sheep",
            "cow",
            "elephant",
            "bear",
            "zebra",
            "giraffe",
            "backpack",
            "umbrella",
            "handbag",
            "tie",
            "suitcase",
            "frisbee",
            "skis",
            "snowboard",
            "sports ball",
            "kite",
            "baseball bat",
            "baseball glove",
            "skateboard",
            "surfboard",
            "tennis racket",
            "bottle",
            "wine glass",
            "cup",
            "fork",
            "knife",
            "spoon",
            "bowl",
            "banana",
            "apple",
            "sandwich",
            "orange",
            "broccoli",
            "carrot",
            "hot dog",
            "pizza",
            "donut",
            "cake",
            "chair",
            "couch",
            "potted plant",
            "bed",
            "dining table",
            "toilet",
            "tv",
            "laptop",
            "mouse",
            "remote",
            "keyboard",
            "cell phone",
            "microwave",
            "oven",
            "toaster",
            "sink",
            "refrigerator",
            "book",
            "clock",
            "vase",
            "scissors",
            "teddy bear",
            "hair drier",
            "toothbrush"
          ]
        ],
        "labels": [
          "STRING",
          {
            "multiline": true,
            "placeholder": "List the types of segments to be allowed, separated by commas"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "preset",
        "labels"
      ]
    },
    "output": [
      "DETAILER_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DETAILER_HOOK"
    ],
    "name": "SEGSLabelFilterDetailerHookProvider",
    "display_name": "SEGSLabelFilterDetailerHookProvider",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "VariationNoiseDetailerHookProvider": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed",
        "strength"
      ]
    },
    "output": [
      "DETAILER_HOOK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "DETAILER_HOOK"
    ],
    "name": "VariationNoiseDetailerHookProvider",
    "display_name": "VariationNoiseDetailerHookProvider",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "BitwiseAndMask": {
    "input": {
      "required": {
        "mask1": [
          "MASK"
        ],
        "mask2": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask1",
        "mask2"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "BitwiseAndMask",
    "display_name": "Pixelwise(MASK & MASK)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "SubtractMask": {
    "input": {
      "required": {
        "mask1": [
          "MASK"
        ],
        "mask2": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask1",
        "mask2"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "SubtractMask",
    "display_name": "Pixelwise(MASK - MASK)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "AddMask": {
    "input": {
      "required": {
        "mask1": [
          "MASK"
        ],
        "mask2": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask1",
        "mask2"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "AddMask",
    "display_name": "Pixelwise(MASK + MASK)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "MaskRectArea": {
    "input": {
      "required": {},
      "hidden": {
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [],
      "hidden": [
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskRectArea",
    "display_name": "Mask Rect Area",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "MaskRectAreaAdvanced": {
    "input": {
      "required": {},
      "hidden": {
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [],
      "hidden": [
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskRectAreaAdvanced",
    "display_name": "Mask Rect Area (Advanced)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "ImpactSegsAndMask": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "mask"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactSegsAndMask",
    "display_name": "Pixelwise(SEGS & MASK)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "ImpactSegsAndMaskForEach": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "masks"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactSegsAndMaskForEach",
    "display_name": "Pixelwise(SEGS & MASKS ForEach)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "EmptySegs": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "EmptySegs",
    "display_name": "EmptySegs",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactFlattenMask": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ImpactFlattenMask",
    "display_name": "Flatten Mask Batch",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "MediaPipeFaceMeshToSEGS": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "bbox_fill": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "crop_min_size": [
          "INT",
          {
            "min": 10,
            "max": 16384,
            "step": 1,
            "default": 50
          }
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 1
          }
        ],
        "dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "face": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "Enabled",
            "label_off": "Disabled"
          }
        ],
        "mouth": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "Enabled",
            "label_off": "Disabled"
          }
        ],
        "left_eyebrow": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "Enabled",
            "label_off": "Disabled"
          }
        ],
        "left_eye": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "Enabled",
            "label_off": "Disabled"
          }
        ],
        "left_pupil": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "Enabled",
            "label_off": "Disabled"
          }
        ],
        "right_eyebrow": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "Enabled",
            "label_off": "Disabled"
          }
        ],
        "right_eye": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "Enabled",
            "label_off": "Disabled"
          }
        ],
        "right_pupil": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "Enabled",
            "label_off": "Disabled"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "crop_factor",
        "bbox_fill",
        "crop_min_size",
        "drop_size",
        "dilation",
        "face",
        "mouth",
        "left_eyebrow",
        "left_eye",
        "left_pupil",
        "right_eyebrow",
        "right_eye",
        "right_pupil"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "MediaPipeFaceMeshToSEGS",
    "display_name": "MediaPipe FaceMesh to SEGS",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "MaskToSEGS": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "combined": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "True",
            "label_off": "False"
          }
        ],
        "crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "bbox_fill": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "contour_fill": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "combined",
        "crop_factor",
        "bbox_fill",
        "drop_size",
        "contour_fill"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "MaskToSEGS",
    "display_name": "MASK to SEGS",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "MaskToSEGS_for_AnimateDiff": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "combined": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "True",
            "label_off": "False"
          }
        ],
        "crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "bbox_fill": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "contour_fill": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "combined",
        "crop_factor",
        "bbox_fill",
        "drop_size",
        "contour_fill"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "MaskToSEGS_for_AnimateDiff",
    "display_name": "MASK to SEGS for AnimateDiff",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "ToBinaryMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "threshold": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 255
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "threshold"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ToBinaryMask",
    "display_name": "ToBinaryMask",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "MasksToMaskList": {
    "input": {
      "required": {
        "masks": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "masks"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MasksToMaskList",
    "display_name": "Mask Batch to Mask List",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "MaskListToMaskBatch": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "MaskListToMaskBatch",
    "display_name": "Mask List to Mask Batch",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "ImageListToImageBatch": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImageListToImageBatch",
    "display_name": "Image List to Image Batch",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "SetDefaultImageForSEGS": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "image": [
          "IMAGE"
        ],
        "override": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "image",
        "override"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "SetDefaultImageForSEGS",
    "display_name": "Set Default Image for SEGS",
    "description": "If the SEGS have not passed through the detailer, they contain only detection area information without an image. This node sets a default image for the SEGS.",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "RemoveImageFromSEGS": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "RemoveImageFromSEGS",
    "display_name": "Remove Image from SEGS",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "BboxDetectorSEGS": {
    "input": {
      "required": {
        "bbox_detector": [
          "BBOX_DETECTOR"
        ],
        "image": [
          "IMAGE"
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "labels": [
          "STRING",
          {
            "multiline": true,
            "default": "all",
            "placeholder": "List the types of segments to be allowed, separated by commas"
          }
        ]
      },
      "optional": {
        "detailer_hook": [
          "DETAILER_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "bbox_detector",
        "image",
        "threshold",
        "dilation",
        "crop_factor",
        "drop_size",
        "labels"
      ],
      "optional": [
        "detailer_hook"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "BboxDetectorSEGS",
    "display_name": "BBOX Detector (SEGS)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Detector",
    "output_node": false
  },
  "SegmDetectorSEGS": {
    "input": {
      "required": {
        "segm_detector": [
          "SEGM_DETECTOR"
        ],
        "image": [
          "IMAGE"
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "labels": [
          "STRING",
          {
            "multiline": true,
            "default": "all",
            "placeholder": "List the types of segments to be allowed, separated by commas"
          }
        ]
      },
      "optional": {
        "detailer_hook": [
          "DETAILER_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "segm_detector",
        "image",
        "threshold",
        "dilation",
        "crop_factor",
        "drop_size",
        "labels"
      ],
      "optional": [
        "detailer_hook"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "SegmDetectorSEGS",
    "display_name": "SEGM Detector (SEGS)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Detector",
    "output_node": false
  },
  "ONNXDetectorSEGS": {
    "input": {
      "required": {
        "bbox_detector": [
          "BBOX_DETECTOR"
        ],
        "image": [
          "IMAGE"
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "labels": [
          "STRING",
          {
            "multiline": true,
            "default": "all",
            "placeholder": "List the types of segments to be allowed, separated by commas"
          }
        ]
      },
      "optional": {
        "detailer_hook": [
          "DETAILER_HOOK"
        ]
      }
    },
    "input_order": {
      "required": [
        "bbox_detector",
        "image",
        "threshold",
        "dilation",
        "crop_factor",
        "drop_size",
        "labels"
      ],
      "optional": [
        "detailer_hook"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ONNXDetectorSEGS",
    "display_name": "ONNX Detector (SEGS/legacy) - use BBOXDetector",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Detector",
    "output_node": false
  },
  "ImpactSimpleDetectorSEGS_for_AD": {
    "input": {
      "required": {
        "bbox_detector": [
          "BBOX_DETECTOR"
        ],
        "image_frames": [
          "IMAGE"
        ],
        "bbox_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "bbox_dilation": [
          "INT",
          {
            "default": 0,
            "min": -255,
            "max": 255,
            "step": 1
          }
        ],
        "crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "sub_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "sub_dilation": [
          "INT",
          {
            "default": 0,
            "min": -255,
            "max": 255,
            "step": 1
          }
        ],
        "sub_bbox_expansion": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "sam_mask_hint_threshold": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "masking_mode": [
          [
            "Pivot SEGS",
            "Combine neighboring frames",
            "Don't combine"
          ]
        ],
        "segs_pivot": [
          [
            "Combined mask",
            "1st frame mask"
          ]
        ],
        "sam_model_opt": [
          "SAM_MODEL",
          {
            "tooltip": "[OPTIONAL]\nSegment Anything Model for Silhouette Detection.\nBe sure to use the SAM_MODEL loaded through the SAMLoader (Impact) node as input.\nGiven this input, it refines the rectangular areas detected by BBOX_DETECTOR into silhouette shapes through SAM.\nsam_model_opt takes priority over segm_detector_opt."
          }
        ],
        "segm_detector_opt": [
          "SEGM_DETECTOR"
        ]
      }
    },
    "input_order": {
      "required": [
        "bbox_detector",
        "image_frames",
        "bbox_threshold",
        "bbox_dilation",
        "crop_factor",
        "drop_size",
        "sub_threshold",
        "sub_dilation",
        "sub_bbox_expansion",
        "sam_mask_hint_threshold"
      ],
      "optional": [
        "masking_mode",
        "segs_pivot",
        "sam_model_opt",
        "segm_detector_opt"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactSimpleDetectorSEGS_for_AD",
    "display_name": "Simple Detector for AnimateDiff (SEGS)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Detector",
    "output_node": false
  },
  "ImpactSimpleDetectorSEGS": {
    "input": {
      "required": {
        "bbox_detector": [
          "BBOX_DETECTOR"
        ],
        "image": [
          "IMAGE"
        ],
        "bbox_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "bbox_dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "sub_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "sub_dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "sub_bbox_expansion": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "sam_mask_hint_threshold": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "post_dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "sam_model_opt": [
          "SAM_MODEL",
          {
            "tooltip": "[OPTIONAL]\nSegment Anything Model for Silhouette Detection.\nBe sure to use the SAM_MODEL loaded through the SAMLoader (Impact) node as input.\nGiven this input, it refines the rectangular areas detected by BBOX_DETECTOR into silhouette shapes through SAM.\nsam_model_opt takes priority over segm_detector_opt."
          }
        ],
        "segm_detector_opt": [
          "SEGM_DETECTOR"
        ]
      }
    },
    "input_order": {
      "required": [
        "bbox_detector",
        "image",
        "bbox_threshold",
        "bbox_dilation",
        "crop_factor",
        "drop_size",
        "sub_threshold",
        "sub_dilation",
        "sub_bbox_expansion",
        "sam_mask_hint_threshold"
      ],
      "optional": [
        "post_dilation",
        "sam_model_opt",
        "segm_detector_opt"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactSimpleDetectorSEGS",
    "display_name": "Simple Detector (SEGS)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Detector",
    "output_node": false
  },
  "ImpactSimpleDetectorSEGSPipe": {
    "input": {
      "required": {
        "detailer_pipe": [
          "DETAILER_PIPE"
        ],
        "image": [
          "IMAGE"
        ],
        "bbox_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "bbox_dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "drop_size": [
          "INT",
          {
            "min": 1,
            "max": 16384,
            "step": 1,
            "default": 10
          }
        ],
        "sub_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "sub_dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ],
        "sub_bbox_expansion": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 1000,
            "step": 1
          }
        ],
        "sam_mask_hint_threshold": [
          "FLOAT",
          {
            "default": 0.7,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "post_dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "detailer_pipe",
        "image",
        "bbox_threshold",
        "bbox_dilation",
        "crop_factor",
        "drop_size",
        "sub_threshold",
        "sub_dilation",
        "sub_bbox_expansion",
        "sam_mask_hint_threshold"
      ],
      "optional": [
        "post_dilation"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactSimpleDetectorSEGSPipe",
    "display_name": "Simple Detector (SEGS/pipe)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Detector",
    "output_node": false
  },
  "ImpactControlNetApplySEGS": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "segs_preprocessor": [
          "SEGS_PREPROCESSOR"
        ],
        "control_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "control_net",
        "strength"
      ],
      "optional": [
        "segs_preprocessor",
        "control_image"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactControlNetApplySEGS",
    "display_name": "ControlNetApply (SEGS) - DEPRECATED",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false,
    "deprecated": true
  },
  "ImpactControlNetApplyAdvancedSEGS": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ]
      },
      "optional": {
        "segs_preprocessor": [
          "SEGS_PREPROCESSOR"
        ],
        "control_image": [
          "IMAGE"
        ],
        "vae": [
          "VAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "control_net",
        "strength",
        "start_percent",
        "end_percent"
      ],
      "optional": [
        "segs_preprocessor",
        "control_image",
        "vae"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactControlNetApplyAdvancedSEGS",
    "display_name": "ControlNetApply (SEGS)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactControlNetClearSEGS": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactControlNetClearSEGS",
    "display_name": "ImpactControlNetClearSEGS",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactIPAdapterApplySEGS": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "ipadapter_pipe": [
          "IPADAPTER_PIPE"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 0.7,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "noise": [
          "FLOAT",
          {
            "default": 0.4,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "weight_type": [
          [
            "original",
            "linear",
            "channel penalty"
          ],
          {
            "default": "channel penalty"
          }
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 0.9,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "unfold_batch": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "faceid_v2": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "weight_v2": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 3,
            "step": 0.05
          }
        ],
        "context_crop_factor": [
          "FLOAT",
          {
            "default": 1.2,
            "min": 1.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "reference_image": [
          "IMAGE"
        ]
      },
      "optional": {
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "neg_image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "ipadapter_pipe",
        "weight",
        "noise",
        "weight_type",
        "start_at",
        "end_at",
        "unfold_batch",
        "faceid_v2",
        "weight_v2",
        "context_crop_factor",
        "reference_image"
      ],
      "optional": [
        "combine_embeds",
        "neg_image"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactIPAdapterApplySEGS",
    "display_name": "IPAdapterApply (SEGS)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactDecomposeSEGS": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs"
      ]
    },
    "output": [
      "SEGS_HEADER",
      "SEG_ELT"
    ],
    "output_is_list": [
      false,
      true
    ],
    "output_name": [
      "SEGS_HEADER",
      "SEG_ELT"
    ],
    "name": "ImpactDecomposeSEGS",
    "display_name": "Decompose (SEGS)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactAssembleSEGS": {
    "input": {
      "required": {
        "seg_header": [
          "SEGS_HEADER"
        ],
        "seg_elt": [
          "SEG_ELT"
        ]
      }
    },
    "input_order": {
      "required": [
        "seg_header",
        "seg_elt"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactAssembleSEGS",
    "display_name": "Assemble (SEGS)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactFrom_SEG_ELT": {
    "input": {
      "required": {
        "seg_elt": [
          "SEG_ELT"
        ]
      }
    },
    "input_order": {
      "required": [
        "seg_elt"
      ]
    },
    "output": [
      "SEG_ELT",
      "IMAGE",
      "MASK",
      "SEG_ELT_crop_region",
      "SEG_ELT_bbox",
      "SEG_ELT_control_net_wrapper",
      "FLOAT",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "seg_elt",
      "cropped_image",
      "cropped_mask",
      "crop_region",
      "bbox",
      "control_net_wrapper",
      "confidence",
      "label"
    ],
    "name": "ImpactFrom_SEG_ELT",
    "display_name": "From SEG_ELT",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactEdit_SEG_ELT": {
    "input": {
      "required": {
        "seg_elt": [
          "SEG_ELT"
        ]
      },
      "optional": {
        "cropped_image_opt": [
          "IMAGE"
        ],
        "cropped_mask_opt": [
          "MASK"
        ],
        "crop_region_opt": [
          "SEG_ELT_crop_region"
        ],
        "bbox_opt": [
          "SEG_ELT_bbox"
        ],
        "control_net_wrapper_opt": [
          "SEG_ELT_control_net_wrapper"
        ],
        "confidence_opt": [
          "FLOAT",
          {
            "min": 0,
            "max": 1.0,
            "step": 0.1,
            "forceInput": true
          }
        ],
        "label_opt": [
          "STRING",
          {
            "multiline": false,
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seg_elt"
      ],
      "optional": [
        "cropped_image_opt",
        "cropped_mask_opt",
        "crop_region_opt",
        "bbox_opt",
        "control_net_wrapper_opt",
        "confidence_opt",
        "label_opt"
      ]
    },
    "output": [
      "SEG_ELT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEG_ELT"
    ],
    "name": "ImpactEdit_SEG_ELT",
    "display_name": "Edit SEG_ELT",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactDilate_Mask_SEG_ELT": {
    "input": {
      "required": {
        "seg_elt": [
          "SEG_ELT"
        ],
        "dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seg_elt",
        "dilation"
      ]
    },
    "output": [
      "SEG_ELT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEG_ELT"
    ],
    "name": "ImpactDilate_Mask_SEG_ELT",
    "display_name": "Dilate Mask (SEG_ELT)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactDilateMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "dilation"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ImpactDilateMask",
    "display_name": "Dilate Mask",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactGaussianBlurMask": {
    "input": {
      "required": {
        "mask": [
          "MASK"
        ],
        "kernel_size": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 10.0,
            "min": 0.1,
            "max": 100.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "kernel_size",
        "sigma"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ImpactGaussianBlurMask",
    "display_name": "Gaussian Blur Mask",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactDilateMaskInSEGS": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "dilation": [
          "INT",
          {
            "default": 10,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "dilation"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactDilateMaskInSEGS",
    "display_name": "Dilate Mask (SEGS)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactGaussianBlurMaskInSEGS": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "kernel_size": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "sigma": [
          "FLOAT",
          {
            "default": 10.0,
            "min": 0.1,
            "max": 100.0,
            "step": 0.1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "kernel_size",
        "sigma"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactGaussianBlurMaskInSEGS",
    "display_name": "Gaussian Blur Mask (SEGS)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactScaleBy_BBOX_SEG_ELT": {
    "input": {
      "required": {
        "seg": [
          "SEG_ELT"
        ],
        "scale_by": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.01,
            "max": 8.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seg",
        "scale_by"
      ]
    },
    "output": [
      "SEG_ELT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEG_ELT"
    ],
    "name": "ImpactScaleBy_BBOX_SEG_ELT",
    "display_name": "ScaleBy BBOX (SEG_ELT)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactFrom_SEG_ELT_bbox": {
    "input": {
      "required": {
        "bbox": [
          "SEG_ELT_bbox"
        ]
      }
    },
    "input_order": {
      "required": [
        "bbox"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "left",
      "top",
      "right",
      "bottom"
    ],
    "name": "ImpactFrom_SEG_ELT_bbox",
    "display_name": "From SEG_ELT bbox",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactFrom_SEG_ELT_crop_region": {
    "input": {
      "required": {
        "crop_region": [
          "SEG_ELT_crop_region"
        ]
      }
    },
    "input_order": {
      "required": [
        "crop_region"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "left",
      "top",
      "right",
      "bottom"
    ],
    "name": "ImpactFrom_SEG_ELT_crop_region",
    "display_name": "From SEG_ELT crop_region",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactCount_Elts_in_SEGS": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "ImpactCount_Elts_in_SEGS",
    "display_name": "Count Elts in SEGS",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "BboxDetectorCombined_v2": {
    "input": {
      "required": {
        "bbox_detector": [
          "BBOX_DETECTOR"
        ],
        "image": [
          "IMAGE"
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "dilation": [
          "INT",
          {
            "default": 4,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "bbox_detector",
        "image",
        "threshold",
        "dilation"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "BboxDetectorCombined_v2",
    "display_name": "BBOX Detector (combined)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Detector",
    "output_node": false
  },
  "SegmDetectorCombined_v2": {
    "input": {
      "required": {
        "segm_detector": [
          "SEGM_DETECTOR"
        ],
        "image": [
          "IMAGE"
        ],
        "threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "dilation": [
          "INT",
          {
            "default": 0,
            "min": -512,
            "max": 512,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "segm_detector",
        "image",
        "threshold",
        "dilation"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "SegmDetectorCombined_v2",
    "display_name": "SEGM Detector (combined)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Detector",
    "output_node": false
  },
  "SegsToCombinedMask": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "SegsToCombinedMask",
    "display_name": "SEGS to MASK (combined)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Operation",
    "output_node": false
  },
  "KSamplerProvider": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": "Random seed to use for generating CPU noise for sampling."
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "tooltip": "total sampling steps"
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "tooltip": "classifier free guidance value"
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "tooltip": "sampler"
          }
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]",
            "OSS FLUX",
            "OSS Wan"
          ],
          {
            "tooltip": "noise schedule"
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."
          }
        ],
        "basic_pipe": [
          "BASIC_PIPE",
          {
            "tooltip": "basic_pipe input for sampling"
          }
        ]
      },
      "optional": {
        "scheduler_func_opt": [
          "SCHEDULER_FUNC",
          {
            "tooltip": "[OPTIONAL] Noise schedule generation function. If this is set, the scheduler widget will be ignored."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "basic_pipe"
      ],
      "optional": [
        "scheduler_func_opt"
      ]
    },
    "output": [
      "KSAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "KSAMPLER"
    ],
    "name": "KSamplerProvider",
    "display_name": "KSamplerProvider",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Sampler",
    "output_node": false,
    "output_tooltips": [
      "sampler wrapper. (Can be used when generating a regional_prompt.)"
    ]
  },
  "TwoSamplersForMask": {
    "input": {
      "required": {
        "latent_image": [
          "LATENT",
          {
            "tooltip": "input latent image"
          }
        ],
        "base_sampler": [
          "KSAMPLER",
          {
            "tooltip": "Sampler to apply to the region outside the mask."
          }
        ],
        "mask_sampler": [
          "KSAMPLER",
          {
            "tooltip": "Sampler to apply to the masked region."
          }
        ],
        "mask": [
          "MASK",
          {
            "tooltip": "region mask"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latent_image",
        "base_sampler",
        "mask_sampler",
        "mask"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "TwoSamplersForMask",
    "display_name": "TwoSamplersForMask",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Sampler",
    "output_node": false,
    "output_tooltips": [
      "result latent"
    ]
  },
  "TiledKSamplerProvider": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": "Random seed to use for generating CPU noise for sampling."
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "tooltip": "total sampling steps"
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "tooltip": "classifier free guidance value"
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "tooltip": "sampler"
          }
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ],
          {
            "tooltip": "noise schedule"
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."
          }
        ],
        "tile_width": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 16384,
            "step": 64,
            "tooltip": "Sets the width of the tile to be used in TiledKSampler."
          }
        ],
        "tile_height": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 16384,
            "step": 64,
            "tooltip": "Sets the height of the tile to be used in TiledKSampler."
          }
        ],
        "tiling_strategy": [
          [
            "random",
            "padded",
            "simple"
          ],
          {
            "tooltip": "Sets the tiling strategy for TiledKSampler."
          }
        ],
        "basic_pipe": [
          "BASIC_PIPE",
          {
            "tooltip": "basic_pipe input for sampling"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "tile_width",
        "tile_height",
        "tiling_strategy",
        "basic_pipe"
      ]
    },
    "output": [
      "KSAMPLER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "KSAMPLER"
    ],
    "name": "TiledKSamplerProvider",
    "display_name": "TiledKSamplerProvider",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Sampler",
    "output_node": false,
    "output_tooltips": [
      "sampler wrapper. (Can be used when generating a regional_prompt.)"
    ]
  },
  "KSamplerAdvancedProvider": {
    "input": {
      "required": {
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "toolip": "classifier free guidance value"
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "toolip": "sampler"
          }
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]",
            "OSS FLUX",
            "OSS Wan"
          ],
          {
            "toolip": "noise schedule"
          }
        ],
        "sigma_factor": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01,
            "toolip": "Multiplier of noise schedule"
          }
        ],
        "basic_pipe": [
          "BASIC_PIPE",
          {
            "toolip": "basic_pipe input for sampling"
          }
        ]
      },
      "optional": {
        "sampler_opt": [
          "SAMPLER",
          {
            "toolip": "[OPTIONAL] Uses the passed sampler instead of internal impact_sampler."
          }
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC",
          {
            "toolip": "[OPTIONAL] Noise schedule generation function. If this is set, the scheduler widget will be ignored."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "cfg",
        "sampler_name",
        "scheduler",
        "sigma_factor",
        "basic_pipe"
      ],
      "optional": [
        "sampler_opt",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "KSAMPLER_ADVANCED"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "KSAMPLER_ADVANCED"
    ],
    "name": "KSamplerAdvancedProvider",
    "display_name": "KSamplerAdvancedProvider",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Sampler",
    "output_node": false,
    "output_tooltips": [
      "sampler wrapper. (Can be used when generating a regional_prompt.)"
    ]
  },
  "TwoAdvancedSamplersForMask": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": "Random seed to use for generating CPU noise for sampling."
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "tooltip": "total sampling steps"
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."
          }
        ],
        "samples": [
          "LATENT",
          {
            "tooltip": "input latent image"
          }
        ],
        "base_sampler": [
          "KSAMPLER_ADVANCED",
          {
            "tooltip": "Sampler to apply to the region outside the mask."
          }
        ],
        "mask_sampler": [
          "KSAMPLER_ADVANCED",
          {
            "tooltip": "Sampler to apply to the masked region."
          }
        ],
        "mask": [
          "MASK",
          {
            "tooltip": "region mask"
          }
        ],
        "overlap_factor": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 10000,
            "tooltip": "To smooth the seams of the region boundaries, expand the mask by the overlap_factor amount to overlap with other regions."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "seed",
        "steps",
        "denoise",
        "samples",
        "base_sampler",
        "mask_sampler",
        "mask",
        "overlap_factor"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "TwoAdvancedSamplersForMask",
    "display_name": "TwoAdvancedSamplersForMask",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Sampler",
    "output_node": false,
    "output_tooltips": [
      "result latent"
    ]
  },
  "ImpactNegativeConditioningPlaceholder": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ImpactNegativeConditioningPlaceholder",
    "display_name": "Negative Cond Placeholder",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/sampling",
    "output_node": false,
    "output_tooltips": [
      "This is a Placeholder for the FLUX model that does not use Negative Conditioning."
    ]
  },
  "PreviewBridge": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "image": [
          "STRING",
          {
            "default": ""
          }
        ]
      },
      "optional": {
        "block": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "if_empty_mask",
            "label_off": "never",
            "tooltip": "is_empty_mask: If the mask is empty, the execution is stopped.\nnever: The execution is never stopped."
          }
        ],
        "restore_mask": [
          [
            "never",
            "always",
            "if_same_size"
          ],
          {
            "tooltip": "if_same_size: If the changed input image is the same size as the previous image, restore using the last saved mask\nalways: Whenever the input image changes, always restore using the last saved mask\nnever: Do not restore the mask.\n`restore_mask` has higher priority than `block`"
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "image"
      ],
      "optional": [
        "block",
        "restore_mask"
      ],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "PreviewBridge",
    "display_name": "Preview Bridge (Image)",
    "description": "This is a feature that allows you to edit and send a Mask over a image.\nIf the block is set to 'is_empty_mask', the execution is stopped when the mask is empty.",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": true
  },
  "PreviewBridgeLatent": {
    "input": {
      "required": {
        "latent": [
          "LATENT"
        ],
        "image": [
          "STRING",
          {
            "default": ""
          }
        ],
        "preview_method": [
          [
            "Latent2RGB-FLUX.1",
            "Latent2RGB-SDXL",
            "Latent2RGB-SD15",
            "Latent2RGB-SD3",
            "Latent2RGB-SD-X4",
            "Latent2RGB-Playground-2.5",
            "Latent2RGB-SC-Prior",
            "Latent2RGB-SC-B",
            "Latent2RGB-LTXV",
            "TAEF1",
            "TAESDXL",
            "TAESD15",
            "TAESD3"
          ]
        ]
      },
      "optional": {
        "vae_opt": [
          "VAE"
        ],
        "block": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "if_empty_mask",
            "label_off": "never",
            "tooltip": "is_empty_mask: If the mask is empty, the execution is stopped.\nnever: The execution is never stopped. Instead, it returns a white mask."
          }
        ],
        "restore_mask": [
          [
            "never",
            "always",
            "if_same_size"
          ],
          {
            "tooltip": "if_same_size: If the changed input latent is the same size as the previous latent, restore using the last saved mask\nalways: Whenever the input latent changes, always restore using the last saved mask\nnever: Do not restore the mask.\n`restore_mask` has higher priority than `block`\nIf the input latent already has a mask, do not restore mask."
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "latent",
        "image",
        "preview_method"
      ],
      "optional": [
        "vae_opt",
        "block",
        "restore_mask"
      ],
      "hidden": [
        "unique_id",
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "LATENT",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "LATENT",
      "MASK"
    ],
    "name": "PreviewBridgeLatent",
    "display_name": "Preview Bridge (Latent)",
    "description": "This is a feature that allows you to edit and send a Mask over a latent image.\nIf the block is set to 'is_empty_mask', the execution is stopped when the mask is empty.",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": true
  },
  "ImageSender": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "ImgSender"
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "images",
        "filename_prefix",
        "link_id"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ImageSender",
    "display_name": "Image Sender",
    "description": "Saves the input images to your ComfyUI output directory.",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": true
  },
  "ImageReceiver": {
    "input": {
      "required": {
        "image": [
          [
            "1.mp4",
            "1743139954017_TDV72HWXg9.jpeg",
            "1743586696790_gZJJX9pmlv.jpeg",
            "2.jpeg",
            "2.mp4",
            "3.jpeg",
            "3.mp4",
            "4.jpeg",
            "4.mp4",
            "5.mp4",
            "5.png",
            "6.jpeg",
            "6.mp4",
            "WanI2V_Result_00016.mp4",
            "WanI2V_Result_00036.mp4",
            "WanI2V_Result_00056.mp4",
            "bird_input_1.png",
            "example.png",
            "finalVideo_v42_2025-04-03.mp4",
            "pass_2_upscaled_00001_ (1).png",
            "pass_2_upscaled_00001_.png"
          ]
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "save_to_workflow": [
          "BOOLEAN",
          {
            "default": false
          }
        ],
        "image_data": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "trigger_always": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enable",
            "label_off": "disable"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "link_id",
        "save_to_workflow",
        "image_data",
        "trigger_always"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ImageReceiver",
    "display_name": "Image Receiver",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "LatentSender": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "filename_prefix": [
          "STRING",
          {
            "default": "latents/LatentSender"
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "preview_method": [
          [
            "Latent2RGB-FLUX.1",
            "Latent2RGB-SDXL",
            "Latent2RGB-SD15",
            "Latent2RGB-SD3",
            "Latent2RGB-SD-X4",
            "Latent2RGB-Playground-2.5",
            "Latent2RGB-SC-Prior",
            "Latent2RGB-SC-B",
            "Latent2RGB-LTXV",
            "TAEF1",
            "TAESDXL",
            "TAESD15",
            "TAESD3"
          ]
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "samples",
        "filename_prefix",
        "link_id",
        "preview_method"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "LatentSender",
    "display_name": "LatentSender",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": true
  },
  "LatentReceiver": {
    "input": {
      "required": {
        "latent": [
          []
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "trigger_always": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enable",
            "label_off": "disable"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "latent",
        "link_id",
        "trigger_always"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "LatentReceiver",
    "display_name": "LatentReceiver",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImageMaskSwitch": {
    "input": {
      "required": {
        "select": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 4,
            "step": 1
          }
        ],
        "images1": [
          "IMAGE"
        ]
      },
      "optional": {
        "mask1_opt": [
          "MASK"
        ],
        "images2_opt": [
          "IMAGE"
        ],
        "mask2_opt": [
          "MASK"
        ],
        "images3_opt": [
          "IMAGE"
        ],
        "mask3_opt": [
          "MASK"
        ],
        "images4_opt": [
          "IMAGE"
        ],
        "mask4_opt": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "select",
        "images1"
      ],
      "optional": [
        "mask1_opt",
        "images2_opt",
        "mask2_opt",
        "images3_opt",
        "mask3_opt",
        "images4_opt",
        "mask4_opt"
      ]
    },
    "output": [
      "IMAGE",
      "MASK"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "MASK"
    ],
    "name": "ImageMaskSwitch",
    "display_name": "Switch (images, mask)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": true
  },
  "LatentSwitch": {
    "input": {
      "required": {
        "select": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 999999,
            "step": 1,
            "tooltip": "The input number you want to output among the inputs"
          }
        ],
        "sel_mode": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "select_on_prompt",
            "label_off": "select_on_execution",
            "forceInput": false,
            "tooltip": "In the case of 'select_on_execution', the selection is dynamically determined at the time of workflow execution. 'select_on_prompt' is an option that exists for older versions of ComfyUI, and it makes the decision before the workflow execution."
          }
        ]
      },
      "optional": {
        "input1": [
          "*",
          {
            "lazy": true,
            "tooltip": "Any input. When connected, one more input slot is added."
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "select",
        "sel_mode"
      ],
      "optional": [
        "input1"
      ],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*",
      "STRING",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "selected_value",
      "selected_label",
      "selected_index"
    ],
    "name": "LatentSwitch",
    "display_name": "Switch (latent/legacy)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false,
    "output_tooltips": [
      "Output is generated only from the input chosen by the 'select' value.",
      "Slot label of the selected input slot",
      "Outputs the select value as is"
    ]
  },
  "SEGSSwitch": {
    "input": {
      "required": {
        "select": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 999999,
            "step": 1,
            "tooltip": "The input number you want to output among the inputs"
          }
        ],
        "sel_mode": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "select_on_prompt",
            "label_off": "select_on_execution",
            "forceInput": false,
            "tooltip": "In the case of 'select_on_execution', the selection is dynamically determined at the time of workflow execution. 'select_on_prompt' is an option that exists for older versions of ComfyUI, and it makes the decision before the workflow execution."
          }
        ]
      },
      "optional": {
        "input1": [
          "*",
          {
            "lazy": true,
            "tooltip": "Any input. When connected, one more input slot is added."
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "select",
        "sel_mode"
      ],
      "optional": [
        "input1"
      ],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*",
      "STRING",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "selected_value",
      "selected_label",
      "selected_index"
    ],
    "name": "SEGSSwitch",
    "display_name": "Switch (SEGS/legacy)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false,
    "output_tooltips": [
      "Output is generated only from the input chosen by the 'select' value.",
      "Slot label of the selected input slot",
      "Outputs the select value as is"
    ]
  },
  "ImpactSwitch": {
    "input": {
      "required": {
        "select": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 999999,
            "step": 1,
            "tooltip": "The input number you want to output among the inputs"
          }
        ],
        "sel_mode": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "select_on_prompt",
            "label_off": "select_on_execution",
            "forceInput": false,
            "tooltip": "In the case of 'select_on_execution', the selection is dynamically determined at the time of workflow execution. 'select_on_prompt' is an option that exists for older versions of ComfyUI, and it makes the decision before the workflow execution."
          }
        ]
      },
      "optional": {
        "input1": [
          "*",
          {
            "lazy": true,
            "tooltip": "Any input. When connected, one more input slot is added."
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "select",
        "sel_mode"
      ],
      "optional": [
        "input1"
      ],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*",
      "STRING",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "selected_value",
      "selected_label",
      "selected_index"
    ],
    "name": "ImpactSwitch",
    "display_name": "Switch (Any)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false,
    "output_tooltips": [
      "Output is generated only from the input chosen by the 'select' value.",
      "Slot label of the selected input slot",
      "Outputs the select value as is"
    ]
  },
  "ImpactInversedSwitch": {
    "input": {
      "required": {
        "select": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 999999,
            "step": 1,
            "tooltip": "The output number you want to send from the input"
          }
        ],
        "input": [
          "*",
          {
            "tooltip": "Any input. When connected, one more input slot is added."
          }
        ]
      },
      "optional": {
        "sel_mode": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "select_on_prompt",
            "label_off": "select_on_execution",
            "forceInput": false,
            "tooltip": "In the case of 'select_on_execution', the selection is dynamically determined at the time of workflow execution. 'select_on_prompt' is an option that exists for older versions of ComfyUI, and it makes the decision before the workflow execution."
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "select",
        "input"
      ],
      "optional": [
        "sel_mode"
      ],
      "hidden": [
        "prompt",
        "unique_id"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "ImpactInversedSwitch",
    "display_name": "Inversed Switch (Any)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false,
    "output_tooltips": [
      "Output occurs only from the output selected by the 'select' value.\nWhen slots are connected, additional slots are created."
    ]
  },
  "ImpactWildcardProcessor": {
    "input": {
      "required": {
        "wildcard_text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false,
            "tooltip": "Enter a prompt using wildcard syntax."
          }
        ],
        "populated_text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false,
            "tooltip": "The actual value passed during the execution of 'ImpactWildcardProcessor' is what is shown here. The behavior varies slightly depending on the mode. Wildcard syntax can also be used in 'populated_text'."
          }
        ],
        "mode": [
          [
            "populate",
            "fixed",
            "reproduce"
          ],
          {
            "default": "populate",
            "tooltip": "populate: Before running the workflow, it overwrites the existing value of 'populated_text' with the prompt processed from 'wildcard_text'. In this mode, 'populated_text' cannot be edited.\nfixed: Ignores wildcard_text and keeps 'populated_text' as is. You can edit 'populated_text' in this mode.\nreproduce: This mode operates as 'fixed' mode only once for reproduction, and then it switches to 'populate' mode."
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": "Determines the random seed to be used for wildcard processing."
          }
        ],
        "Select to add Wildcard": [
          [
            "Select the Wildcard to add to the text"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "wildcard_text",
        "populated_text",
        "mode",
        "seed",
        "Select to add Wildcard"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "processed text"
    ],
    "name": "ImpactWildcardProcessor",
    "display_name": "ImpactWildcardProcessor",
    "description": "The 'ImpactWildcardProcessor' processes text prompts written in wildcard syntax and outputs the processed text prompt.\n\nTIP: Before the workflow is executed, the processing result of 'wildcard_text' is displayed in 'populated_text', and the populated text is saved along with the workflow. If you want to use a seed converted as input, write the prompt directly in 'populated_text' instead of 'wildcard_text', and set the mode to 'fixed'.",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Prompt",
    "output_node": false
  },
  "ImpactWildcardEncode": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "wildcard_text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false,
            "tooltip": "Enter a prompt using wildcard syntax."
          }
        ],
        "populated_text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false,
            "tooltip": "The actual value passed during the execution of 'ImpactWildcardEncode' is what is shown here. The behavior varies slightly depending on the mode. Wildcard syntax can also be used in 'populated_text'."
          }
        ],
        "mode": [
          [
            "populate",
            "fixed",
            "reproduce"
          ],
          {
            "tooltip": "populate: Before running the workflow, it overwrites the existing value of 'populated_text' with the prompt processed from 'wildcard_text'. In this mode, 'populated_text' cannot be edited.\nfixed: Ignores wildcard_text and keeps 'populated_text' as is. You can edit 'populated_text' in this mode\n.reproduce: This mode operates as 'fixed' mode only once for reproduction, and then it switches to 'populate' mode."
          }
        ],
        "Select to add LoRA": [
          [
            "Select the LoRA to add to the text"
          ]
        ],
        "Select to add Wildcard": [
          [
            "Select the Wildcard to add to the text"
          ]
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": "Determines the random seed to be used for wildcard processing."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "wildcard_text",
        "populated_text",
        "mode",
        "Select to add LoRA",
        "Select to add Wildcard",
        "seed"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "CONDITIONING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "clip",
      "conditioning",
      "populated_text"
    ],
    "name": "ImpactWildcardEncode",
    "display_name": "ImpactWildcardEncode",
    "description": "The 'ImpactWildcardEncode' node processes text prompts written in wildcard syntax and outputs them as conditioning. It also supports LoRA syntax, with the applied LoRA reflected in the model's output.\n\nTIP1: Before the workflow is executed, the processing result of 'wildcard_text' is displayed in 'populated_text', and the populated text is saved along with the workflow. If you want to use a seed converted as input, write the prompt directly in 'populated_text' instead of 'wildcard_text', and set the mode to 'fixed'.\nTIP2: If the 'Inspire Pack' is installed, LBW(LoRA Block Weight) syntax can also be applied.",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Prompt",
    "output_node": false
  },
  "SEGSUpscaler": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "segs": [
          "SEGS"
        ],
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP"
        ],
        "vae": [
          "VAE"
        ],
        "rescale_factor": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.01,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "resampling_method": [
          [
            "lanczos",
            "nearest",
            "bilinear",
            "bicubic"
          ]
        ],
        "supersample": [
          [
            "true",
            "false"
          ]
        ],
        "rounding_modulus": [
          "INT",
          {
            "default": 8,
            "min": 8,
            "max": 1024,
            "step": 8
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]",
            "OSS FLUX",
            "OSS Wan"
          ]
        ],
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "inpaint_model": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ]
      },
      "optional": {
        "upscale_model_opt": [
          "UPSCALE_MODEL"
        ],
        "upscaler_hook_opt": [
          "UPSCALER_HOOK"
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "segs",
        "model",
        "clip",
        "vae",
        "rescale_factor",
        "resampling_method",
        "supersample",
        "rounding_modulus",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "positive",
        "negative",
        "denoise",
        "feather",
        "inpaint_model",
        "noise_mask_feather"
      ],
      "optional": [
        "upscale_model_opt",
        "upscaler_hook_opt",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "SEGSUpscaler",
    "display_name": "Upscaler (SEGS)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "SEGSUpscalerPipe": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "segs": [
          "SEGS"
        ],
        "basic_pipe": [
          "BASIC_PIPE"
        ],
        "rescale_factor": [
          "FLOAT",
          {
            "default": 2,
            "min": 0.01,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "resampling_method": [
          [
            "lanczos",
            "nearest",
            "bilinear",
            "bicubic"
          ]
        ],
        "supersample": [
          [
            "true",
            "false"
          ]
        ],
        "rounding_modulus": [
          "INT",
          {
            "default": 8,
            "min": 8,
            "max": 1024,
            "step": 8
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]",
            "OSS FLUX",
            "OSS Wan"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "inpaint_model": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ]
      },
      "optional": {
        "upscale_model_opt": [
          "UPSCALE_MODEL"
        ],
        "upscaler_hook_opt": [
          "UPSCALER_HOOK"
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "segs",
        "basic_pipe",
        "rescale_factor",
        "resampling_method",
        "supersample",
        "rounding_modulus",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "feather",
        "inpaint_model",
        "noise_mask_feather"
      ],
      "optional": [
        "upscale_model_opt",
        "upscaler_hook_opt",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "SEGSUpscalerPipe",
    "display_name": "Upscaler (SEGS/pipe)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Upscale",
    "output_node": false
  },
  "SEGSDetailer": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "segs": [
          "SEGS"
        ],
        "guide_size": [
          "FLOAT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "guide_size_for": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "bbox",
            "label_off": "crop_region"
          }
        ],
        "max_size": [
          "FLOAT",
          {
            "default": 768,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]",
            "OSS FLUX",
            "OSS Wan"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "noise_mask": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "force_inpaint": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "basic_pipe": [
          "BASIC_PIPE",
          {
            "tooltip": "If the `ImpactDummyInput` is connected to the model in the basic_pipe, the inference stage is skipped."
          }
        ],
        "refiner_ratio": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0
          }
        ],
        "batch_size": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 100
          }
        ],
        "cycle": [
          "INT",
          {
            "default": 1,
            "min": 1,
            "max": 10,
            "step": 1
          }
        ]
      },
      "optional": {
        "refiner_basic_pipe_opt": [
          "BASIC_PIPE"
        ],
        "inpaint_model": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "segs",
        "guide_size",
        "guide_size_for",
        "max_size",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "noise_mask",
        "force_inpaint",
        "basic_pipe",
        "refiner_ratio",
        "batch_size",
        "cycle"
      ],
      "optional": [
        "refiner_basic_pipe_opt",
        "inpaint_model",
        "noise_mask_feather",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "SEGS",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      true
    ],
    "output_name": [
      "segs",
      "cnet_images"
    ],
    "name": "SEGSDetailer",
    "display_name": "SEGSDetailer",
    "description": "This node enhances details by inpainting each region within the detected area bundle (SEGS) after enlarging them based on the guide size.\nThis node is applied specifically to SEGS rather than the entire image. To apply it to the entire image, use the 'SEGS Paste' node.",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "SEGSPaste": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "segs": [
          "SEGS"
        ],
        "feather": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "alpha": [
          "INT",
          {
            "default": 255,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ]
      },
      "optional": {
        "ref_image_opt": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "segs",
        "feather",
        "alpha"
      ],
      "optional": [
        "ref_image_opt"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "SEGSPaste",
    "display_name": "SEGSPaste",
    "description": "This node provides a function to paste the enhanced SEGS, improved through the SEGS detailer, back onto the original image.",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "SEGSPreview": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "alpha_mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enable",
            "label_off": "disable"
          }
        ],
        "min_alpha": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "fallback_image_opt": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "alpha_mode",
        "min_alpha"
      ],
      "optional": [
        "fallback_image_opt"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "SEGSPreview",
    "display_name": "SEGSPreview",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": true
  },
  "SEGSPreviewCNet": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "SEGSPreviewCNet",
    "display_name": "SEGSPreview (CNET Image)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": true
  },
  "SEGSToImageList": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ]
      },
      "optional": {
        "fallback_image_opt": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs"
      ],
      "optional": [
        "fallback_image_opt"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "SEGSToImageList",
    "display_name": "SEGSToImageList",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactSEGSToMaskList": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ImpactSEGSToMaskList",
    "display_name": "SEGS to Mask List",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactSEGSToMaskBatch": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ImpactSEGSToMaskBatch",
    "display_name": "SEGS to Mask Batch",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactSEGSConcat": {
    "input": {
      "required": {
        "segs1": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs1"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactSEGSConcat",
    "display_name": "SEGS Concat",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactSEGSPicker": {
    "input": {
      "required": {
        "picks": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false,
            "pysssss.autocomplete": false
          }
        ],
        "segs": [
          "SEGS"
        ]
      },
      "optional": {
        "fallback_image_opt": [
          "IMAGE"
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "picks",
        "segs"
      ],
      "optional": [
        "fallback_image_opt"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactSEGSPicker",
    "display_name": "Picker (SEGS)",
    "description": "This node provides a function to select only the chosen SEGS from the input SEGS.",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactMakeTileSEGS": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "bbox_size": [
          "INT",
          {
            "default": 512,
            "min": 64,
            "max": 4096,
            "step": 8
          }
        ],
        "crop_factor": [
          "FLOAT",
          {
            "default": 3.0,
            "min": 1.0,
            "max": 10,
            "step": 0.01
          }
        ],
        "min_overlap": [
          "INT",
          {
            "default": 5,
            "min": 0,
            "max": 512,
            "step": 1
          }
        ],
        "filter_segs_dilation": [
          "INT",
          {
            "default": 20,
            "min": -255,
            "max": 255,
            "step": 1
          }
        ],
        "mask_irregularity": [
          "FLOAT",
          {
            "default": 0,
            "min": 0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "irregular_mask_mode": [
          [
            "Reuse fast",
            "Reuse quality",
            "All random fast",
            "All random quality"
          ]
        ]
      },
      "optional": {
        "filter_in_segs_opt": [
          "SEGS"
        ],
        "filter_out_segs_opt": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "bbox_size",
        "crop_factor",
        "min_overlap",
        "filter_segs_dilation",
        "mask_irregularity",
        "irregular_mask_mode"
      ],
      "optional": [
        "filter_in_segs_opt",
        "filter_out_segs_opt"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactMakeTileSEGS",
    "display_name": "Make Tile SEGS",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/__for_testing",
    "output_node": false
  },
  "ImpactSEGSMerge": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactSEGSMerge",
    "display_name": "SEGS Merge",
    "description": "SEGS contains multiple SEGs. SEGS Merge integrates several SEGs into a single merged SEG. The label is changed to `merged` and the confidence becomes the minimum confidence. The applied controlnet and cropped_image are removed.",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "SEGSDetailerForAnimateDiff": {
    "input": {
      "required": {
        "image_frames": [
          "IMAGE"
        ],
        "segs": [
          "SEGS"
        ],
        "guide_size": [
          "FLOAT",
          {
            "default": 512,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "guide_size_for": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "bbox",
            "label_off": "crop_region"
          }
        ],
        "max_size": [
          "FLOAT",
          {
            "default": 768,
            "min": 64,
            "max": 16384,
            "step": 8
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]",
            "OSS FLUX",
            "OSS Wan"
          ]
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0001,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "basic_pipe": [
          "BASIC_PIPE",
          {
            "tooltip": "If the `ImpactDummyInput` is connected to the model in the basic_pipe, the inference stage is skipped."
          }
        ],
        "refiner_ratio": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0
          }
        ]
      },
      "optional": {
        "refiner_basic_pipe_opt": [
          "BASIC_PIPE"
        ],
        "noise_mask_feather": [
          "INT",
          {
            "default": 20,
            "min": 0,
            "max": 100,
            "step": 1
          }
        ],
        "scheduler_func_opt": [
          "SCHEDULER_FUNC"
        ]
      }
    },
    "input_order": {
      "required": [
        "image_frames",
        "segs",
        "guide_size",
        "guide_size_for",
        "max_size",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "denoise",
        "basic_pipe",
        "refiner_ratio"
      ],
      "optional": [
        "refiner_basic_pipe_opt",
        "noise_mask_feather",
        "scheduler_func_opt"
      ]
    },
    "output": [
      "SEGS",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      true
    ],
    "output_name": [
      "segs",
      "cnet_images"
    ],
    "name": "SEGSDetailerForAnimateDiff",
    "display_name": "SEGSDetailer For AnimateDiff (SEGS/pipe)",
    "description": "This node enhances details by inpainting each region within the detected area bundle (SEGS) after enlarging them based on the guide size.\nThis node is applied specifically to SEGS rather than the entire image. To apply it to the entire image, use the 'SEGS Paste' node.\nAs a specialized detailer node for improving video details, such as in AnimateDiff, this node can handle cases where the masks contained in SEGS serve as batch masks spanning multiple frames.",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Detailer",
    "output_node": false
  },
  "ImpactKSamplerBasicPipe": {
    "input": {
      "required": {
        "basic_pipe": [
          "BASIC_PIPE",
          {
            "tooltip": "basic_pipe input for sampling"
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": "Random seed to use for generating CPU noise for sampling."
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "tooltip": "total sampling steps"
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "tooltip": "classifier free guidance value"
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "tooltip": "sampler"
          }
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]",
            "OSS FLUX",
            "OSS Wan"
          ],
          {
            "tooltip": "noise schedule"
          }
        ],
        "latent_image": [
          "LATENT",
          {
            "tooltip": "input latent image"
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."
          }
        ]
      },
      "optional": {
        "scheduler_func_opt": [
          "SCHEDULER_FUNC",
          {
            "tooltip": "[OPTIONAL] Noise schedule generation function. If this is set, the scheduler widget will be ignored."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "basic_pipe",
        "seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "latent_image",
        "denoise"
      ],
      "optional": [
        "scheduler_func_opt"
      ]
    },
    "output": [
      "BASIC_PIPE",
      "LATENT",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "BASIC_PIPE",
      "LATENT",
      "VAE"
    ],
    "name": "ImpactKSamplerBasicPipe",
    "display_name": "KSampler (pipe)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/sampling",
    "output_node": false,
    "output_tooltips": [
      "passthrough input basic_pipe",
      "result latent",
      "VAE in basic_pipe"
    ]
  },
  "ImpactKSamplerAdvancedBasicPipe": {
    "input": {
      "required": {
        "basic_pipe": [
          "BASIC_PIPE",
          {
            "tooltip": "basic_pipe input for sampling"
          }
        ],
        "add_noise": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enable",
            "label_off": "disable",
            "tooltip": "Whether to add noise"
          }
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": "Random seed to use for generating CPU noise for sampling."
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "tooltip": "total sampling steps"
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 8.0,
            "min": 0.0,
            "max": 100.0,
            "tooltip": "classifier free guidance value"
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ],
          {
            "tooltip": "sampler"
          }
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]",
            "OSS FLUX",
            "OSS Wan"
          ],
          {
            "tooltip": "noise schedule"
          }
        ],
        "latent_image": [
          "LATENT",
          {
            "tooltip": "input latent image"
          }
        ],
        "start_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000,
            "tooltip": "The starting step of the sampling to be applied at this node within the range of 'steps'."
          }
        ],
        "end_at_step": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000,
            "tooltip": "The step at which sampling applied at this node will stop within the range of steps (if greater than steps, sampling will continue only up to steps)."
          }
        ],
        "return_with_leftover_noise": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enable",
            "label_off": "disable",
            "tooltip": "Whether to return the latent with noise remaining if the noise has not been completely removed according to the noise schedule, or to completely remove the noise before returning it."
          }
        ]
      },
      "optional": {
        "scheduler_func_opt": [
          "SCHEDULER_FUNC",
          {
            "tooltip": "[OPTIONAL] Noise schedule generation function. If this is set, the scheduler widget will be ignored."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "basic_pipe",
        "add_noise",
        "noise_seed",
        "steps",
        "cfg",
        "sampler_name",
        "scheduler",
        "latent_image",
        "start_at_step",
        "end_at_step",
        "return_with_leftover_noise"
      ],
      "optional": [
        "scheduler_func_opt"
      ]
    },
    "output": [
      "BASIC_PIPE",
      "LATENT",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "BASIC_PIPE",
      "LATENT",
      "VAE"
    ],
    "name": "ImpactKSamplerAdvancedBasicPipe",
    "display_name": "KSampler (Advanced/pipe)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/sampling",
    "output_node": false,
    "output_tooltips": [
      "passthrough input basic_pipe",
      "result latent",
      "VAE in basic_pipe"
    ]
  },
  "ReencodeLatent": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "tile_mode": [
          [
            "None",
            "Both",
            "Decode(input) only",
            "Encode(output) only"
          ]
        ],
        "input_vae": [
          "VAE"
        ],
        "output_vae": [
          "VAE"
        ],
        "tile_size": [
          "INT",
          {
            "default": 512,
            "min": 320,
            "max": 4096,
            "step": 64
          }
        ]
      },
      "optional": {
        "overlap": [
          "INT",
          {
            "default": 64,
            "min": 0,
            "max": 4096,
            "step": 32,
            "tooltip": "This setting applies when 'tile_mode' is enabled."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "tile_mode",
        "input_vae",
        "output_vae",
        "tile_size"
      ],
      "optional": [
        "overlap"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "ReencodeLatent",
    "display_name": "Reencode Latent",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ReencodeLatentPipe": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ],
        "tile_mode": [
          [
            "None",
            "Both",
            "Decode(input) only",
            "Encode(output) only"
          ]
        ],
        "input_basic_pipe": [
          "BASIC_PIPE"
        ],
        "output_basic_pipe": [
          "BASIC_PIPE"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples",
        "tile_mode",
        "input_basic_pipe",
        "output_basic_pipe"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "ReencodeLatentPipe",
    "display_name": "Reencode Latent (pipe)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactImageBatchToImageList": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImpactImageBatchToImageList",
    "display_name": "Image Batch to Image List",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactMakeImageList": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image1"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImpactMakeImageList",
    "display_name": "Make Image List",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactMakeImageBatch": {
    "input": {
      "required": {
        "image1": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image1"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ImpactMakeImageBatch",
    "display_name": "Make Image Batch",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactMakeAnyList": {
    "input": {
      "required": {},
      "optional": {
        "value1": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "value1"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "*"
    ],
    "name": "ImpactMakeAnyList",
    "display_name": "Make List (Any)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactMakeMaskList": {
    "input": {
      "required": {
        "mask1": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask1"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ImpactMakeMaskList",
    "display_name": "Make Mask List",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactMakeMaskBatch": {
    "input": {
      "required": {
        "mask1": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "mask1"
      ]
    },
    "output": [
      "MASK"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MASK"
    ],
    "name": "ImpactMakeMaskBatch",
    "display_name": "Make Mask Batch",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactSelectNthItemOfAnyList": {
    "input": {
      "required": {
        "any_list": [
          "*"
        ],
        "index": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1,
            "tooltip": "The index of the item you want to select from the list."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "any_list",
        "index"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "ImpactSelectNthItemOfAnyList",
    "display_name": "Select Nth Item (Any list)",
    "description": "Selects the Nth item from a list. If the index is out of range, it returns the last item in the list.",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "RegionalSampler": {
    "input": {
      "required": {
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": "Random seed to use for generating CPU noise for sampling."
          }
        ],
        "seed_2nd": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": "Additional noise seed. The behavior is determined by seed_2nd_mode."
          }
        ],
        "seed_2nd_mode": [
          [
            "ignore",
            "fixed",
            "seed+seed_2nd",
            "seed-seed_2nd",
            "increment",
            "decrement",
            "randomize"
          ],
          {
            "tooltip": "application method of seed_2nd. 1) ignore: Do not use seed_2nd. In the base only sampling stage, the seed is applied as a noise seed, and in the regional sampling stage, denoising is performed as it is without additional noise. 2) Others: In the base only sampling stage, the seed is applied as a noise seed, and once it is closed so that there is no leftover noise, new noise is added with seed_2nd and the regional samping stage is performed. a) fixed: Use seed_2nd as it is as an additional noise seed. b) seed+seed_2nd: Apply the value of seed+seed_2nd as an additional noise seed. c) seed-seed_2nd: Apply the value of seed-seed_2nd as an additional noise seed. d) increment: Not implemented yet. Same with fixed. e) decrement: Not implemented yet. Same with fixed. f) randomize: Not implemented yet. Same with fixed."
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "tooltip": "total sampling steps"
          }
        ],
        "base_only_steps": [
          "INT",
          {
            "default": 2,
            "min": 0,
            "max": 10000,
            "tooltip": "total sampling steps"
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "The amount of noise to remove. This amount is the noise added at the start, and the higher it is, the more the input latent will be modified before being returned."
          }
        ],
        "samples": [
          "LATENT",
          {
            "tooltip": "input latent image"
          }
        ],
        "base_sampler": [
          "KSAMPLER_ADVANCED",
          {
            "tooltip": "The sampler applied outside the area set by the regional_prompt."
          }
        ],
        "regional_prompts": [
          "REGIONAL_PROMPTS",
          {
            "tooltip": "The prompt applied to each region"
          }
        ],
        "overlap_factor": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 10000,
            "tooltip": "To smooth the seams of the region boundaries, expand the mask set in regional_prompts by the overlap_factor amount to overlap with other regions."
          }
        ],
        "restore_latent": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled",
            "tooltip": "At each step, restore the noise outside the mask area to its original state, as per the principle of inpainting. This option is provided for backward compatibility, and it is recommended to always set it to true."
          }
        ],
        "additional_mode": [
          [
            "DISABLE",
            "ratio additional",
            "ratio between"
          ],
          {
            "default": "ratio between",
            "tooltip": "..._sde or uni_pc and other special samplers are used, the region is not properly denoised, and it causes a phenomenon that destroys the overall harmony. To compensate for this, a recovery operation is performed using another sampler. This requires a longer time for sampling because a second sampling is performed at each step in each region using a special sampler. 1) DISABLE: Disable this feature. 2) ratio additional: After performing the denoise amount to be performed in the step with the sampler set in the region, the recovery sampler is additionally applied by the additional_sigma_ratio. If you use this option, the total denoise amount increases by additional_sigma_ratio. 3) ratio between: The denoise amount to be performed in the step with the sampler set in the region and the denoise amount to be applied to the recovery sampler are divided by additional_sigma_ratio, and denoise is performed for each denoise amount. If you use this option, the total denoise amount does not change."
          }
        ],
        "additional_sampler": [
          [
            "AUTO",
            "euler",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_fast",
            "dpmpp_2m",
            "ddpm"
          ],
          {
            "tooltip": "1) AUTO: Automatically set the recovery sampler. If the sampler is uni_pc, uni_pc_bh2, dpmpp_sde, dpmpp_sde_gpu, the dpm_fast sampler is selected If the sampler is dpmpp_2m_sde, dpmpp_2m_sde_gpu, dpmpp_3m_sde, dpmpp_3m_sde_gpu, the dpmpp_2m sampler is selected. 2) Others: Manually set the recovery sampler."
          }
        ],
        "additional_sigma_ratio": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "Multiplier of noise schedule to be applied according to additional_mode."
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "seed",
        "seed_2nd",
        "seed_2nd_mode",
        "steps",
        "base_only_steps",
        "denoise",
        "samples",
        "base_sampler",
        "regional_prompts",
        "overlap_factor",
        "restore_latent",
        "additional_mode",
        "additional_sampler",
        "additional_sigma_ratio"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "RegionalSampler",
    "display_name": "RegionalSampler",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Regional",
    "output_node": false,
    "output_tooltips": [
      "result latent"
    ]
  },
  "RegionalSamplerAdvanced": {
    "input": {
      "required": {
        "add_noise": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled",
            "tooltip": "Whether to add noise"
          }
        ],
        "noise_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": "Random seed to use for generating CPU noise for sampling."
          }
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000,
            "tooltip": "total sampling steps"
          }
        ],
        "start_at_step": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 10000,
            "tooltip": "The starting step of the sampling to be applied at this node within the range of 'steps'."
          }
        ],
        "end_at_step": [
          "INT",
          {
            "default": 10000,
            "min": 0,
            "max": 10000,
            "tooltip": "The step at which sampling applied at this node will stop within the range of steps (if greater than steps, sampling will continue only up to steps)."
          }
        ],
        "overlap_factor": [
          "INT",
          {
            "default": 10,
            "min": 0,
            "max": 10000,
            "tooltip": "To smooth the seams of the region boundaries, expand the mask set in regional_prompts by the overlap_factor amount to overlap with other regions."
          }
        ],
        "restore_latent": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "enabled",
            "label_off": "disabled",
            "tooltip": "At each step, restore the noise outside the mask area to its original state, as per the principle of inpainting. This option is provided for backward compatibility, and it is recommended to always set it to true."
          }
        ],
        "return_with_leftover_noise": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled",
            "tooltip": "Whether to return the latent with noise remaining if the noise has not been completely removed according to the noise schedule, or to completely remove the noise before returning it."
          }
        ],
        "latent_image": [
          "LATENT",
          {
            "tooltip": "input latent image"
          }
        ],
        "base_sampler": [
          "KSAMPLER_ADVANCED",
          {
            "tooltip": "The sampler applied outside the area set by the regional_prompt."
          }
        ],
        "regional_prompts": [
          "REGIONAL_PROMPTS",
          {
            "tooltip": "The prompt applied to each region"
          }
        ],
        "additional_mode": [
          [
            "DISABLE",
            "ratio additional",
            "ratio between"
          ],
          {
            "default": "ratio between",
            "tooltip": "..._sde or uni_pc and other special samplers are used, the region is not properly denoised, and it causes a phenomenon that destroys the overall harmony. To compensate for this, a recovery operation is performed using another sampler. This requires a longer time for sampling because a second sampling is performed at each step in each region using a special sampler. 1) DISABLE: Disable this feature. 2) ratio additional: After performing the denoise amount to be performed in the step with the sampler set in the region, the recovery sampler is additionally applied by the additional_sigma_ratio. If you use this option, the total denoise amount increases by additional_sigma_ratio. 3) ratio between: The denoise amount to be performed in the step with the sampler set in the region and the denoise amount to be applied to the recovery sampler are divided by additional_sigma_ratio, and denoise is performed for each denoise amount. If you use this option, the total denoise amount does not change."
          }
        ],
        "additional_sampler": [
          [
            "AUTO",
            "euler",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_fast",
            "dpmpp_2m",
            "ddpm"
          ],
          {
            "tooltip": "1) AUTO: Automatically set the recovery sampler. If the sampler is uni_pc, uni_pc_bh2, dpmpp_sde, dpmpp_sde_gpu, the dpm_fast sampler is selected If the sampler is dpmpp_2m_sde, dpmpp_2m_sde_gpu, dpmpp_3m_sde, dpmpp_3m_sde_gpu, the dpmpp_2m sampler is selected. 2) Others: Manually set the recovery sampler."
          }
        ],
        "additional_sigma_ratio": [
          "FLOAT",
          {
            "default": 0.3,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "Multiplier of noise schedule to be applied according to additional_mode."
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "add_noise",
        "noise_seed",
        "steps",
        "start_at_step",
        "end_at_step",
        "overlap_factor",
        "restore_latent",
        "return_with_leftover_noise",
        "latent_image",
        "base_sampler",
        "regional_prompts",
        "additional_mode",
        "additional_sampler",
        "additional_sigma_ratio"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "RegionalSamplerAdvanced",
    "display_name": "RegionalSamplerAdvanced",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Regional",
    "output_node": false,
    "output_tooltips": [
      "result latent"
    ]
  },
  "CombineRegionalPrompts": {
    "input": {
      "required": {
        "regional_prompts1": [
          "REGIONAL_PROMPTS",
          {
            "tooltip": "input regional_prompts. (Connecting to the input slot increases the number of additional slots.)"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "regional_prompts1"
      ]
    },
    "output": [
      "REGIONAL_PROMPTS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "REGIONAL_PROMPTS"
    ],
    "name": "CombineRegionalPrompts",
    "display_name": "CombineRegionalPrompts",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Regional",
    "output_node": false,
    "output_tooltips": [
      "Combined REGIONAL_PROMPTS"
    ]
  },
  "RegionalPrompt": {
    "input": {
      "required": {
        "mask": [
          "MASK",
          {
            "tooltip": "region mask"
          }
        ],
        "advanced_sampler": [
          "KSAMPLER_ADVANCED",
          {
            "tooltip": "sampler for specified region"
          }
        ]
      },
      "optional": {
        "variation_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615,
            "tooltip": "Sets the extra seed to be used for noise variation."
          }
        ],
        "variation_strength": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "Sets the strength of the noise variation."
          }
        ],
        "variation_method": [
          [
            "linear",
            "slerp"
          ],
          {
            "tooltip": "Sets how the original noise and extra noise are blended together."
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "mask",
        "advanced_sampler"
      ],
      "optional": [
        "variation_seed",
        "variation_strength",
        "variation_method"
      ]
    },
    "output": [
      "REGIONAL_PROMPTS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "REGIONAL_PROMPTS"
    ],
    "name": "RegionalPrompt",
    "display_name": "RegionalPrompt",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Regional",
    "output_node": false,
    "output_tooltips": [
      "regional prompts. (Can be used in the RegionalSampler.)"
    ]
  },
  "ImpactCombineConditionings": {
    "input": {
      "required": {
        "conditioning1": [
          "CONDITIONING",
          {
            "tooltip": "input conditionings. (Connecting to the input slot increases the number of additional slots.)"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning1"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ImpactCombineConditionings",
    "display_name": "Combine Conditionings",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false,
    "output_tooltips": [
      "Combined conditioning"
    ]
  },
  "ImpactConcatConditionings": {
    "input": {
      "required": {
        "conditioning1": [
          "CONDITIONING",
          {
            "tooltip": "input conditionings. (Connecting to the input slot increases the number of additional slots.)"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "conditioning1"
      ]
    },
    "output": [
      "CONDITIONING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "CONDITIONING"
    ],
    "name": "ImpactConcatConditionings",
    "display_name": "Concat Conditionings",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false,
    "output_tooltips": [
      "Concatenated conditioning"
    ]
  },
  "ImpactSEGSLabelAssign": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "labels": [
          "STRING",
          {
            "multiline": true,
            "placeholder": "List the label to be assigned in order of segs, separated by commas"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "labels"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SEGS"
    ],
    "name": "ImpactSEGSLabelAssign",
    "display_name": "SEGS Assign (label)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactSEGSLabelFilter": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "preset": [
          [
            "all",
            "hand",
            "face",
            "mouth",
            "eyes",
            "eyebrows",
            "pupils",
            "left_eyebrow",
            "left_eye",
            "left_pupil",
            "right_eyebrow",
            "right_eye",
            "right_pupil",
            "short_sleeved_shirt",
            "long_sleeved_shirt",
            "short_sleeved_outwear",
            "long_sleeved_outwear",
            "vest",
            "sling",
            "shorts",
            "trousers",
            "skirt",
            "short_sleeved_dress",
            "long_sleeved_dress",
            "vest_dress",
            "sling_dress",
            "person",
            "bicycle",
            "car",
            "motorcycle",
            "airplane",
            "bus",
            "train",
            "truck",
            "boat",
            "traffic light",
            "fire hydrant",
            "stop sign",
            "parking meter",
            "bench",
            "bird",
            "cat",
            "dog",
            "horse",
            "sheep",
            "cow",
            "elephant",
            "bear",
            "zebra",
            "giraffe",
            "backpack",
            "umbrella",
            "handbag",
            "tie",
            "suitcase",
            "frisbee",
            "skis",
            "snowboard",
            "sports ball",
            "kite",
            "baseball bat",
            "baseball glove",
            "skateboard",
            "surfboard",
            "tennis racket",
            "bottle",
            "wine glass",
            "cup",
            "fork",
            "knife",
            "spoon",
            "bowl",
            "banana",
            "apple",
            "sandwich",
            "orange",
            "broccoli",
            "carrot",
            "hot dog",
            "pizza",
            "donut",
            "cake",
            "chair",
            "couch",
            "potted plant",
            "bed",
            "dining table",
            "toilet",
            "tv",
            "laptop",
            "mouse",
            "remote",
            "keyboard",
            "cell phone",
            "microwave",
            "oven",
            "toaster",
            "sink",
            "refrigerator",
            "book",
            "clock",
            "vase",
            "scissors",
            "teddy bear",
            "hair drier",
            "toothbrush"
          ]
        ],
        "labels": [
          "STRING",
          {
            "multiline": true,
            "placeholder": "List the types of segments to be allowed, separated by commas"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "preset",
        "labels"
      ]
    },
    "output": [
      "SEGS",
      "SEGS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "filtered_SEGS",
      "remained_SEGS"
    ],
    "name": "ImpactSEGSLabelFilter",
    "display_name": "SEGS Filter (label)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactSEGSRangeFilter": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "target": [
          [
            "area(=w*h)",
            "width",
            "height",
            "x1",
            "y1",
            "x2",
            "y2",
            "length_percent",
            "confidence(0-100)"
          ]
        ],
        "mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "inside",
            "label_off": "outside"
          }
        ],
        "min_value": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "max_value": [
          "INT",
          {
            "default": 67108864,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "target",
        "mode",
        "min_value",
        "max_value"
      ]
    },
    "output": [
      "SEGS",
      "SEGS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "filtered_SEGS",
      "remained_SEGS"
    ],
    "name": "ImpactSEGSRangeFilter",
    "display_name": "SEGS Filter (range)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactSEGSOrderedFilter": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "target": [
          [
            "area(=w*h)",
            "width",
            "height",
            "x1",
            "y1",
            "x2",
            "y2",
            "confidence",
            "none"
          ]
        ],
        "order": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "descending",
            "label_off": "ascending"
          }
        ],
        "take_start": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ],
        "take_count": [
          "INT",
          {
            "default": 1,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "target",
        "order",
        "take_start",
        "take_count"
      ]
    },
    "output": [
      "SEGS",
      "SEGS"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "filtered_SEGS",
      "remained_SEGS"
    ],
    "name": "ImpactSEGSOrderedFilter",
    "display_name": "SEGS Filter (ordered)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactSEGSIntersectionFilter": {
    "input": {
      "required": {
        "segs1": [
          "SEGS"
        ],
        "segs2": [
          "SEGS"
        ],
        "ioa_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "segs1",
        "segs2",
        "ioa_threshold"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "filtered_SEGS"
    ],
    "name": "ImpactSEGSIntersectionFilter",
    "display_name": "SEGS Filter (intersection)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactSEGSNMSFilter": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ],
        "iou_threshold": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "segs",
        "iou_threshold"
      ]
    },
    "output": [
      "SEGS"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "filtered_SEGS"
    ],
    "name": "ImpactSEGSNMSFilter",
    "display_name": "SEGS Filter (non max suppression)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactCompare": {
    "input": {
      "required": {
        "cmp": [
          [
            "a = b",
            "a <> b",
            "a > b",
            "a < b",
            "a >= b",
            "a <= b",
            "tt",
            "ff"
          ]
        ],
        "a": [
          "*"
        ],
        "b": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "cmp",
        "a",
        "b"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "ImpactCompare",
    "display_name": "ImpactCompare",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Logic",
    "output_node": false
  },
  "ImpactConditionalBranch": {
    "input": {
      "required": {
        "cond": [
          "BOOLEAN"
        ],
        "tt_value": [
          "*",
          {
            "lazy": true
          }
        ],
        "ff_value": [
          "*",
          {
            "lazy": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "cond",
        "tt_value",
        "ff_value"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "ImpactConditionalBranch",
    "display_name": "ImpactConditionalBranch",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Logic",
    "output_node": false
  },
  "ImpactConditionalBranchSelMode": {
    "input": {
      "required": {
        "cond": [
          "BOOLEAN"
        ]
      },
      "optional": {
        "tt_value": [
          "*"
        ],
        "ff_value": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "cond"
      ],
      "optional": [
        "tt_value",
        "ff_value"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "ImpactConditionalBranchSelMode",
    "display_name": "ImpactConditionalBranchSelMode",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Logic",
    "output_node": false
  },
  "ImpactIfNone": {
    "input": {
      "required": {},
      "optional": {
        "signal": [
          "*"
        ],
        "any_input": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [],
      "optional": [
        "signal",
        "any_input"
      ]
    },
    "output": [
      "*",
      "BOOLEAN"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "signal_opt",
      "bool"
    ],
    "name": "ImpactIfNone",
    "display_name": "ImpactIfNone",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Logic",
    "output_node": false
  },
  "ImpactConvertDataType": {
    "input": {
      "required": {
        "value": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "STRING",
      "FLOAT",
      "INT",
      "BOOLEAN"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "STRING",
      "FLOAT",
      "INT",
      "BOOLEAN"
    ],
    "name": "ImpactConvertDataType",
    "display_name": "ImpactConvertDataType",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Logic",
    "output_node": false
  },
  "ImpactLogicalOperators": {
    "input": {
      "required": {
        "operator": [
          [
            "and",
            "or",
            "xor"
          ]
        ],
        "bool_a": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ],
        "bool_b": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "operator",
        "bool_a",
        "bool_b"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "ImpactLogicalOperators",
    "display_name": "ImpactLogicalOperators",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Logic",
    "output_node": false
  },
  "ImpactInt": {
    "input": {
      "required": {
        "value": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "ImpactInt",
    "display_name": "ImpactInt",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Logic",
    "output_node": false
  },
  "ImpactFloat": {
    "input": {
      "required": {
        "value": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -3.402823466e+38,
            "max": 3.402823466e+38
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "FLOAT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "FLOAT"
    ],
    "name": "ImpactFloat",
    "display_name": "ImpactFloat",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Logic",
    "output_node": false
  },
  "ImpactBoolean": {
    "input": {
      "required": {
        "value": [
          "BOOLEAN",
          {
            "default": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "ImpactBoolean",
    "display_name": "ImpactBoolean",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Logic",
    "output_node": false
  },
  "ImpactValueSender": {
    "input": {
      "required": {
        "value": [
          "*"
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ]
      },
      "optional": {
        "signal_opt": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "value",
        "link_id"
      ],
      "optional": [
        "signal_opt"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "signal"
    ],
    "name": "ImpactValueSender",
    "display_name": "ImpactValueSender",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Logic",
    "output_node": true
  },
  "ImpactValueReceiver": {
    "input": {
      "required": {
        "typ": [
          [
            "STRING",
            "INT",
            "FLOAT",
            "BOOLEAN"
          ]
        ],
        "value": [
          "STRING",
          {
            "default": ""
          }
        ],
        "link_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 9223372036854775807,
            "step": 1
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "typ",
        "value",
        "link_id"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "ImpactValueReceiver",
    "display_name": "ImpactValueReceiver",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Logic",
    "output_node": false
  },
  "ImpactImageInfo": {
    "input": {
      "required": {
        "value": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "batch",
      "height",
      "width",
      "channel"
    ],
    "name": "ImpactImageInfo",
    "display_name": "ImpactImageInfo",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Logic/_for_test",
    "output_node": false
  },
  "ImpactLatentInfo": {
    "input": {
      "required": {
        "value": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "INT",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "batch",
      "height",
      "width",
      "channel"
    ],
    "name": "ImpactLatentInfo",
    "display_name": "ImpactLatentInfo",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Logic/_for_test",
    "output_node": false
  },
  "ImpactMinMax": {
    "input": {
      "required": {
        "mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "max",
            "label_off": "min"
          }
        ],
        "a": [
          "*"
        ],
        "b": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "mode",
        "a",
        "b"
      ]
    },
    "output": [
      "INT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "INT"
    ],
    "name": "ImpactMinMax",
    "display_name": "ImpactMinMax",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Logic/_for_test",
    "output_node": false
  },
  "ImpactNeg": {
    "input": {
      "required": {
        "value": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "ImpactNeg",
    "display_name": "ImpactNeg",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Logic",
    "output_node": false
  },
  "ImpactConditionalStopIteration": {
    "input": {
      "required": {
        "cond": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "cond"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ImpactConditionalStopIteration",
    "display_name": "ImpactConditionalStopIteration",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Logic",
    "output_node": true
  },
  "ImpactStringSelector": {
    "input": {
      "required": {
        "strings": [
          "STRING",
          {
            "multiline": true
          }
        ],
        "multiline": [
          "BOOLEAN",
          {
            "default": false,
            "label_on": "enabled",
            "label_off": "disabled"
          }
        ],
        "select": [
          "INT",
          {
            "min": 0,
            "max": 9223372036854775807,
            "step": 1,
            "default": 0
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "strings",
        "multiline",
        "select"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "ImpactStringSelector",
    "display_name": "String Selector",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "StringListToString": {
    "input": {
      "required": {
        "join_with": [
          "STRING",
          {
            "default": "\\n"
          }
        ],
        "string_list": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "join_with",
        "string_list"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "StringListToString",
    "display_name": "String List to String",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "WildcardPromptFromString": {
    "input": {
      "required": {
        "string": [
          "STRING",
          {
            "forceInput": true
          }
        ],
        "delimiter": [
          "STRING",
          {
            "multiline": false,
            "default": "\\n"
          }
        ],
        "prefix_all": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "postfix_all": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "restrict_to_tags": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "exclude_tags": [
          "STRING",
          {
            "multiline": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "string",
        "delimiter",
        "prefix_all",
        "postfix_all",
        "restrict_to_tags",
        "exclude_tags"
      ]
    },
    "output": [
      "STRING",
      "STRING"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "wildcard",
      "segs_labels"
    ],
    "name": "WildcardPromptFromString",
    "display_name": "Wildcard Prompt from String",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactExecutionOrderController": {
    "input": {
      "required": {
        "signal": [
          "*"
        ],
        "value": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "signal",
        "value"
      ]
    },
    "output": [
      "*",
      "*"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "signal",
      "value"
    ],
    "name": "ImpactExecutionOrderController",
    "display_name": "Execution Order Controller",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactListBridge": {
    "input": {
      "required": {
        "list_input": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "list_input"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "list_output"
    ],
    "name": "ImpactListBridge",
    "display_name": "List Bridge",
    "description": "When passing the list output through this node, it collects and organizes the data before forwarding it, which ensures that the previous stage's sub-workflow has been completed.",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "RemoveNoiseMask": {
    "input": {
      "required": {
        "samples": [
          "LATENT"
        ]
      }
    },
    "input_order": {
      "required": [
        "samples"
      ]
    },
    "output": [
      "LATENT"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "LATENT"
    ],
    "name": "RemoveNoiseMask",
    "display_name": "Remove Noise Mask",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "ImpactLogger": {
    "input": {
      "required": {
        "data": [
          "*"
        ],
        "text": [
          "STRING",
          {
            "multiline": true
          }
        ]
      },
      "hidden": {
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO",
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "data",
        "text"
      ],
      "hidden": [
        "prompt",
        "extra_pnginfo",
        "unique_id"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ImpactLogger",
    "display_name": "ImpactLogger",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Debug",
    "output_node": true
  },
  "ImpactDummyInput": {
    "input": {
      "required": {}
    },
    "input_order": {
      "required": []
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "ImpactDummyInput",
    "display_name": "ImpactDummyInput",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Debug",
    "output_node": false
  },
  "ImpactQueueTrigger": {
    "input": {
      "required": {
        "signal": [
          "*"
        ],
        "mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "Trigger",
            "label_off": "Don't trigger"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "signal",
        "mode"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "signal_opt"
    ],
    "name": "ImpactQueueTrigger",
    "display_name": "Queue Trigger",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Logic/_for_test",
    "output_node": true
  },
  "ImpactQueueTriggerCountdown": {
    "input": {
      "required": {
        "count": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "total": [
          "INT",
          {
            "default": 10,
            "min": 1,
            "max": 18446744073709551615
          }
        ],
        "mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "Trigger",
            "label_off": "Don't trigger"
          }
        ]
      },
      "optional": {
        "signal": [
          "*"
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID"
      }
    },
    "input_order": {
      "required": [
        "count",
        "total",
        "mode"
      ],
      "optional": [
        "signal"
      ],
      "hidden": [
        "unique_id"
      ]
    },
    "output": [
      "*",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "signal_opt",
      "count",
      "total"
    ],
    "name": "ImpactQueueTriggerCountdown",
    "display_name": "Queue Trigger (Countdown)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Logic/_for_test",
    "output_node": true
  },
  "ImpactSetWidgetValue": {
    "input": {
      "required": {
        "signal": [
          "*"
        ],
        "node_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "widget_name": [
          "STRING",
          {
            "multiline": false
          }
        ]
      },
      "optional": {
        "boolean_value": [
          "BOOLEAN",
          {
            "forceInput": true
          }
        ],
        "int_value": [
          "INT",
          {
            "forceInput": true
          }
        ],
        "float_value": [
          "FLOAT",
          {
            "forceInput": true
          }
        ],
        "string_value": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "signal",
        "node_id",
        "widget_name"
      ],
      "optional": [
        "boolean_value",
        "int_value",
        "float_value",
        "string_value"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "signal_opt"
    ],
    "name": "ImpactSetWidgetValue",
    "display_name": "Set Widget Value",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Logic/_for_test",
    "output_node": true
  },
  "ImpactNodeSetMuteState": {
    "input": {
      "required": {
        "signal": [
          "*"
        ],
        "node_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "set_state": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "active",
            "label_off": "mute"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "signal",
        "node_id",
        "set_state"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "signal_opt"
    ],
    "name": "ImpactNodeSetMuteState",
    "display_name": "Set Mute State",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Logic/_for_test",
    "output_node": true
  },
  "ImpactControlBridge": {
    "input": {
      "required": {
        "value": [
          "*"
        ],
        "mode": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "Active",
            "label_off": "Stop/Mute/Bypass"
          }
        ],
        "behavior": [
          [
            "Stop",
            "Mute",
            "Bypass"
          ]
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "prompt": "PROMPT",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "value",
        "mode",
        "behavior"
      ],
      "hidden": [
        "unique_id",
        "prompt",
        "extra_pnginfo"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "value"
    ],
    "name": "ImpactControlBridge",
    "display_name": "Control Bridge",
    "description": "When behavior is Stop and mode is active, the input value is passed directly to the output.\nWhen behavior is Mute/Bypass and mode is active, the node connected to the output is changed to active state.\nWhen behavior is Stop and mode is Stop/Mute/Bypass, the workflow execution of the current node is halted.\nWhen behavior is Mute/Bypass and mode is Stop/Mute/Bypass, the node connected to the output is changed to Mute/Bypass state.",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Logic",
    "output_node": true
  },
  "ImpactIsNotEmptySEGS": {
    "input": {
      "required": {
        "segs": [
          "SEGS"
        ]
      }
    },
    "input_order": {
      "required": [
        "segs"
      ]
    },
    "output": [
      "BOOLEAN"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "BOOLEAN"
    ],
    "name": "ImpactIsNotEmptySEGS",
    "display_name": "SEGS isn't Empty",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Logic",
    "output_node": false
  },
  "ImpactSleep": {
    "input": {
      "required": {
        "signal": [
          "*"
        ],
        "seconds": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0,
            "max": 3600
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "signal",
        "seconds"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "signal_opt"
    ],
    "name": "ImpactSleep",
    "display_name": "Sleep",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Logic/_for_test",
    "output_node": true
  },
  "ImpactRemoteBoolean": {
    "input": {
      "required": {
        "node_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "widget_name": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "value": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "True",
            "label_off": "False"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "node_id",
        "widget_name",
        "value"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ImpactRemoteBoolean",
    "display_name": "Remote Boolean (on prompt)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Logic/_for_test",
    "output_node": true
  },
  "ImpactRemoteInt": {
    "input": {
      "required": {
        "node_id": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "widget_name": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "value": [
          "INT",
          {
            "default": 0,
            "min": -18446744073709551615,
            "max": 18446744073709551615
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "node_id",
        "widget_name",
        "value"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "ImpactRemoteInt",
    "display_name": "Remote Int (on prompt)",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Logic/_for_test",
    "output_node": true
  },
  "ImpactHFTransformersClassifierProvider": {
    "input": {
      "required": {
        "preset_repo_id": [
          [
            "rizvandwiki/gender-classification-2",
            "NTQAI/pedestrian_gender_recognition",
            "Leilab/gender_class",
            "ProjectPersonal/GenderClassifier",
            "crangana/trained-gender",
            "cledoux42/GenderNew_v002",
            "ivensamdh/genderage2",
            "Manual repo id"
          ]
        ],
        "manual_repo_id": [
          "STRING",
          {
            "multiline": false
          }
        ],
        "device_mode": [
          [
            "AUTO",
            "Prefer GPU",
            "CPU"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "preset_repo_id",
        "manual_repo_id",
        "device_mode"
      ]
    },
    "output": [
      "TRANSFORMERS_CLASSIFIER"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "TRANSFORMERS_CLASSIFIER"
    ],
    "name": "ImpactHFTransformersClassifierProvider",
    "display_name": "HF Transformers Classifier Provider",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/HuggingFace",
    "output_node": false
  },
  "ImpactSEGSClassify": {
    "input": {
      "required": {
        "classifier": [
          "TRANSFORMERS_CLASSIFIER"
        ],
        "segs": [
          "SEGS"
        ],
        "preset_expr": [
          [
            "#Female > #Male",
            "#Female < #Male",
            "female > 0.5",
            "male > 0.5",
            "Age16to25 > 0.1",
            "Age50to69 > 0.1",
            "Manual expr"
          ]
        ],
        "manual_expr": [
          "STRING",
          {
            "multiline": false
          }
        ]
      },
      "optional": {
        "ref_image_opt": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "classifier",
        "segs",
        "preset_expr",
        "manual_expr"
      ],
      "optional": [
        "ref_image_opt"
      ]
    },
    "output": [
      "SEGS",
      "SEGS",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      true
    ],
    "output_name": [
      "filtered_SEGS",
      "remained_SEGS",
      "detected_labels"
    ],
    "name": "ImpactSEGSClassify",
    "display_name": "SEGS Classify",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/HuggingFace",
    "output_node": false
  },
  "ImpactSchedulerAdapter": {
    "input": {
      "required": {
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ],
          {
            "defaultInput": true
          }
        ],
        "extra_scheduler": [
          [
            "None",
            "AYS SDXL",
            "AYS SD1",
            "AYS SVD",
            "GITS[coeff=1.2]",
            "LTXV[default]",
            "OSS FLUX",
            "OSS Wan"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "scheduler",
        "extra_scheduler"
      ]
    },
    "output": [
      [
        "normal",
        "karras",
        "exponential",
        "sgm_uniform",
        "simple",
        "ddim_uniform",
        "beta",
        "linear_quadratic",
        "kl_optimal",
        "AYS SDXL",
        "AYS SD1",
        "AYS SVD",
        "GITS[coeff=1.2]",
        "LTXV[default]",
        "OSS FLUX",
        "OSS Wan"
      ]
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "scheduler"
    ],
    "name": "ImpactSchedulerAdapter",
    "display_name": "Impact Scheduler Adapter",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/Util",
    "output_node": false
  },
  "GITSSchedulerFuncProvider": {
    "input": {
      "required": {
        "coeff": [
          "FLOAT",
          {
            "default": 1.2,
            "min": 0.8,
            "max": 1.5,
            "step": 0.05,
            "tooltip": "coeff factor of GITS Scheduler"
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "denoise amount for noise schedule"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "coeff",
        "denoise"
      ]
    },
    "output": [
      "SCHEDULER_FUNC"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "SCHEDULER_FUNC"
    ],
    "name": "GITSSchedulerFuncProvider",
    "display_name": "GITSScheduler Func Provider",
    "description": "",
    "python_module": "custom_nodes.comfyui-impact-pack",
    "category": "ImpactPack/sampling",
    "output_node": false,
    "output_tooltips": [
      "Returns a function that generates a noise schedule using GITSScheduler. This can be used in place of a predetermined noise schedule to dynamically generate a noise schedule based on the steps."
    ]
  },
  "LoadText|pysssss": {
    "input": {
      "required": {
        "root_dir": [
          [
            "input",
            "output",
            "temp"
          ],
          {}
        ],
        "file": [
          [
            "[none]"
          ],
          {
            "pysssss.binding": [
              {
                "source": "root_dir",
                "callback": [
                  {
                    "type": "set",
                    "target": "$this.disabled",
                    "value": true
                  },
                  {
                    "type": "fetch",
                    "url": "/pysssss/text-file/{$source.value}",
                    "then": [
                      {
                        "type": "set",
                        "target": "$this.options.values",
                        "value": "$result"
                      },
                      {
                        "type": "validate-combo"
                      },
                      {
                        "type": "set",
                        "target": "$this.disabled",
                        "value": false
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "root_dir",
        "file"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "LoadText|pysssss",
    "display_name": "Load Text \ud83d\udc0d",
    "description": "",
    "python_module": "custom_nodes.comfyui-custom-scripts",
    "category": "utils",
    "output_node": false
  },
  "SaveText|pysssss": {
    "input": {
      "required": {
        "root_dir": [
          [
            "input",
            "output",
            "temp"
          ],
          {}
        ],
        "file": [
          "STRING",
          {
            "default": "file.txt"
          }
        ],
        "append": [
          [
            "append",
            "overwrite",
            "new only"
          ],
          {}
        ],
        "insert": [
          "BOOLEAN",
          {
            "default": true,
            "label_on": "new line",
            "label_off": "none",
            "pysssss.binding": [
              {
                "source": "append",
                "callback": [
                  {
                    "type": "if",
                    "condition": [
                      {
                        "left": "$source.value",
                        "op": "eq",
                        "right": "\"append\""
                      }
                    ],
                    "true": [
                      {
                        "type": "set",
                        "target": "$this.disabled",
                        "value": false
                      }
                    ],
                    "false": [
                      {
                        "type": "set",
                        "target": "$this.disabled",
                        "value": true
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "text": [
          "STRING",
          {
            "forceInput": true,
            "multiline": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "root_dir",
        "file",
        "append",
        "insert",
        "text"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "SaveText|pysssss",
    "display_name": "Save Text \ud83d\udc0d",
    "description": "",
    "python_module": "custom_nodes.comfyui-custom-scripts",
    "category": "utils",
    "output_node": true
  },
  "SystemNotification|pysssss": {
    "input": {
      "required": {
        "message": [
          "STRING",
          {
            "default": "Your notification has triggered."
          }
        ],
        "any": [
          "*",
          {}
        ],
        "mode": [
          [
            "always",
            "on empty queue"
          ],
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "message",
        "any",
        "mode"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "*"
    ],
    "name": "SystemNotification|pysssss",
    "display_name": "SystemNotification \ud83d\udc0d",
    "description": "",
    "python_module": "custom_nodes.comfyui-custom-scripts",
    "category": "utils",
    "output_node": true
  },
  "StringFunction|pysssss": {
    "input": {
      "required": {
        "action": [
          [
            "append",
            "replace"
          ],
          {}
        ],
        "tidy_tags": [
          [
            "yes",
            "no"
          ],
          {}
        ]
      },
      "optional": {
        "text_a": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "text_b": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "text_c": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "action",
        "tidy_tags"
      ],
      "optional": [
        "text_a",
        "text_b",
        "text_c"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "StringFunction|pysssss",
    "display_name": "String Function \ud83d\udc0d",
    "description": "",
    "python_module": "custom_nodes.comfyui-custom-scripts",
    "category": "utils",
    "output_node": true
  },
  "ShowText|pysssss": {
    "input": {
      "required": {
        "text": [
          "STRING",
          {
            "forceInput": true
          }
        ]
      },
      "hidden": {
        "unique_id": "UNIQUE_ID",
        "extra_pnginfo": "EXTRA_PNGINFO"
      }
    },
    "input_order": {
      "required": [
        "text"
      ],
      "hidden": [
        "unique_id",
        "extra_pnginfo"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "STRING"
    ],
    "name": "ShowText|pysssss",
    "display_name": "Show Text \ud83d\udc0d",
    "description": "",
    "python_module": "custom_nodes.comfyui-custom-scripts",
    "category": "utils",
    "output_node": true
  },
  "ReroutePrimitive|pysssss": {
    "input": {
      "required": {
        "value": [
          "*"
        ]
      }
    },
    "input_order": {
      "required": [
        "value"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "*"
    ],
    "name": "ReroutePrimitive|pysssss",
    "display_name": "Reroute Primitive \ud83d\udc0d",
    "description": "",
    "python_module": "custom_nodes.comfyui-custom-scripts",
    "category": "__hidden__",
    "output_node": false
  },
  "Repeater|pysssss": {
    "input": {
      "required": {
        "source": [
          "*",
          {}
        ],
        "repeats": [
          "INT",
          {
            "min": 0,
            "max": 5000,
            "default": 2
          }
        ],
        "output": [
          [
            "single",
            "multi"
          ],
          {}
        ],
        "node_mode": [
          [
            "reuse",
            "create"
          ],
          {}
        ]
      }
    },
    "input_order": {
      "required": [
        "source",
        "repeats",
        "output",
        "node_mode"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "*"
    ],
    "name": "Repeater|pysssss",
    "display_name": "Repeater \ud83d\udc0d",
    "description": "",
    "python_module": "custom_nodes.comfyui-custom-scripts",
    "category": "utils",
    "output_node": false
  },
  "PlaySound|pysssss": {
    "input": {
      "required": {
        "any": [
          "*",
          {}
        ],
        "mode": [
          [
            "always",
            "on empty queue"
          ],
          {}
        ],
        "volume": [
          "FLOAT",
          {
            "min": 0,
            "max": 1,
            "step": 0.1,
            "default": 0.5
          }
        ],
        "file": [
          "STRING",
          {
            "default": "notify.mp3"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "any",
        "mode",
        "volume",
        "file"
      ]
    },
    "output": [
      "*"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "*"
    ],
    "name": "PlaySound|pysssss",
    "display_name": "PlaySound \ud83d\udc0d",
    "description": "",
    "python_module": "custom_nodes.comfyui-custom-scripts",
    "category": "utils",
    "output_node": true
  },
  "MathExpression|pysssss": {
    "input": {
      "required": {
        "expression": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false,
            "pysssss.autocomplete": {
              "words": [
                {
                  "text": "round",
                  "value": "round()",
                  "showValue": false,
                  "hint": "number, dp? = 0",
                  "caretOffset": -1
                },
                {
                  "text": "ceil",
                  "value": "ceil()",
                  "showValue": false,
                  "hint": "number",
                  "caretOffset": -1
                },
                {
                  "text": "floor",
                  "value": "floor()",
                  "showValue": false,
                  "hint": "number",
                  "caretOffset": -1
                },
                {
                  "text": "min",
                  "value": "min()",
                  "showValue": false,
                  "hint": "...numbers",
                  "caretOffset": -1
                },
                {
                  "text": "max",
                  "value": "max()",
                  "showValue": false,
                  "hint": "...numbers",
                  "caretOffset": -1
                },
                {
                  "text": "randomint",
                  "value": "randomint()",
                  "showValue": false,
                  "hint": "min, max",
                  "caretOffset": -1
                },
                {
                  "text": "randomchoice",
                  "value": "randomchoice()",
                  "showValue": false,
                  "hint": "...numbers",
                  "caretOffset": -1
                },
                {
                  "text": "sqrt",
                  "value": "sqrt()",
                  "showValue": false,
                  "hint": "number",
                  "caretOffset": -1
                },
                {
                  "text": "int",
                  "value": "int()",
                  "showValue": false,
                  "hint": "number",
                  "caretOffset": -1
                },
                {
                  "text": "iif",
                  "value": "iif()",
                  "showValue": false,
                  "hint": "value, truepart, falsepart",
                  "caretOffset": -1
                }
              ],
              "separator": ""
            }
          }
        ]
      },
      "optional": {
        "a": [
          "*"
        ],
        "b": [
          "*"
        ],
        "c": [
          "*"
        ]
      },
      "hidden": {
        "extra_pnginfo": "EXTRA_PNGINFO",
        "prompt": "PROMPT"
      }
    },
    "input_order": {
      "required": [
        "expression"
      ],
      "optional": [
        "a",
        "b",
        "c"
      ],
      "hidden": [
        "extra_pnginfo",
        "prompt"
      ]
    },
    "output": [
      "INT",
      "FLOAT"
    ],
    "output_is_list": [
      false,
      false
    ],
    "output_name": [
      "INT",
      "FLOAT"
    ],
    "name": "MathExpression|pysssss",
    "display_name": "Math Expression \ud83d\udc0d",
    "description": "",
    "python_module": "custom_nodes.comfyui-custom-scripts",
    "category": "utils",
    "output_node": true
  },
  "ConstrainImageforVideo|pysssss": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "max_width": [
          "INT",
          {
            "default": 1024,
            "min": 0
          }
        ],
        "max_height": [
          "INT",
          {
            "default": 1024,
            "min": 0
          }
        ],
        "min_width": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "min_height": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "crop_if_required": [
          [
            "yes",
            "no"
          ],
          {
            "default": "no"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "max_width",
        "max_height",
        "min_width",
        "min_height",
        "crop_if_required"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ConstrainImageforVideo|pysssss",
    "display_name": "Constrain Image for Video \ud83d\udc0d",
    "description": "",
    "python_module": "custom_nodes.comfyui-custom-scripts",
    "category": "image",
    "output_node": false
  },
  "ConstrainImage|pysssss": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ],
        "max_width": [
          "INT",
          {
            "default": 1024,
            "min": 0
          }
        ],
        "max_height": [
          "INT",
          {
            "default": 1024,
            "min": 0
          }
        ],
        "min_width": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "min_height": [
          "INT",
          {
            "default": 0,
            "min": 0
          }
        ],
        "crop_if_required": [
          [
            "yes",
            "no"
          ],
          {
            "default": "no"
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images",
        "max_width",
        "max_height",
        "min_width",
        "min_height",
        "crop_if_required"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      true
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "ConstrainImage|pysssss",
    "display_name": "Constrain Image \ud83d\udc0d",
    "description": "",
    "python_module": "custom_nodes.comfyui-custom-scripts",
    "category": "image",
    "output_node": false
  },
  "LoraLoader|pysssss": {
    "input": {
      "required": {
        "model": [
          "MODEL",
          {
            "tooltip": "The diffusion model the LoRA will be applied to."
          }
        ],
        "clip": [
          "CLIP",
          {
            "tooltip": "The CLIP model the LoRA will be applied to."
          }
        ],
        "lora_name": [
          [],
          {
            "tooltip": "The name of the LoRA."
          }
        ],
        "strength_model": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01,
            "tooltip": "How strongly to modify the diffusion model. This value can be negative."
          }
        ],
        "strength_clip": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01,
            "tooltip": "How strongly to modify the CLIP model. This value can be negative."
          }
        ]
      },
      "optional": {
        "prompt": [
          "STRING",
          {
            "hidden": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "clip",
        "lora_name",
        "strength_model",
        "strength_clip"
      ],
      "optional": [
        "prompt"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "example"
    ],
    "name": "LoraLoader|pysssss",
    "display_name": "Lora Loader \ud83d\udc0d",
    "description": "LoRAs are used to modify diffusion and CLIP models, altering the way in which latents are denoised such as applying styles. Multiple LoRA nodes can be linked together.",
    "python_module": "custom_nodes.comfyui-custom-scripts",
    "category": "loaders",
    "output_node": false,
    "output_tooltips": [
      "The modified diffusion model.",
      "The modified CLIP model."
    ]
  },
  "CheckpointLoader|pysssss": {
    "input": {
      "required": {
        "ckpt_name": [
          [
            "disneyrealcartoonmix_v10.safetensors",
            "katayamaMixXLV2_katayamaMixXLV2.safetensors",
            "realvisxlV50_v50LightningBakedvae.safetensors",
            "zavychromaxl_v100.safetensors"
          ],
          {
            "tooltip": "The name of the checkpoint (model) to load."
          }
        ]
      },
      "optional": {
        "prompt": [
          "STRING",
          {
            "hidden": true
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "ckpt_name"
      ],
      "optional": [
        "prompt"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "STRING"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "MODEL",
      "CLIP",
      "VAE",
      "example"
    ],
    "name": "CheckpointLoader|pysssss",
    "display_name": "Checkpoint Loader \ud83d\udc0d",
    "description": "Loads a diffusion model checkpoint, diffusion models are used to denoise latents.",
    "python_module": "custom_nodes.comfyui-custom-scripts",
    "category": "loaders",
    "output_node": false,
    "output_tooltips": [
      "The model used for denoising latents.",
      "The CLIP model used for encoding text prompts.",
      "The VAE model used for encoding and decoding images to and from latent space."
    ]
  },
  "SaveImageWebsocket": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ]
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "SaveImageWebsocket",
    "display_name": "SaveImageWebsocket",
    "description": "",
    "python_module": "custom_nodes.websocket_image_save",
    "category": "api/image",
    "output_node": true
  },
  "LayerUtility: PurgeVRAM": {
    "input": {
      "required": {
        "anything": [
          "*",
          {}
        ],
        "purge_cache": [
          "BOOLEAN",
          {
            "default": true
          }
        ],
        "purge_models": [
          "BOOLEAN",
          {
            "default": true
          }
        ]
      },
      "optional": {}
    },
    "input_order": {
      "required": [
        "anything",
        "purge_cache",
        "purge_models"
      ],
      "optional": []
    },
    "output": [],
    "output_is_list": [],
    "output_name": [],
    "name": "LayerUtility: PurgeVRAM",
    "display_name": "LayerUtility: Purge VRAM",
    "description": "",
    "python_module": "custom_nodes.comfyui_layerstyle",
    "category": "\ud83d\ude3adzNodes/LayerUtility/SystemIO",
    "output_node": true
  },
  "HeroLabsMaskCombineConditioningWithStyle": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "images": [
          "IMAGE"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "tooltip": "The text to be encoded."
          }
        ],
        "clip": [
          "CLIP",
          {
            "tooltip": "The CLIP model used for encoding the text."
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "style_image": [
          "IMAGE"
        ],
        "style_weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "style_weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer"
          ]
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "prev_conditioning": [
          "CONDITIONING"
        ],
        "prev_mask": [
          "MASK"
        ],
        "get_image_size": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "images",
        "text",
        "clip",
        "strength",
        "ipadapter",
        "style_image",
        "style_weight",
        "style_weight_type",
        "embeds_scaling"
      ],
      "optional": [
        "prev_conditioning",
        "prev_mask",
        "get_image_size"
      ]
    },
    "output": [
      "MODEL",
      "CONDITIONING",
      "MASK"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "conditioning",
      "mask"
    ],
    "name": "HeroLabsMaskCombineConditioningWithStyle",
    "display_name": "HeroLabs Mask Combine Conditioning With Style",
    "description": "",
    "python_module": "custom_nodes.comfyui-herolabs-nodes",
    "category": "herolabs",
    "output_node": false
  },
  "OptHeroLabsMaskCombineConditioningWithStyle": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "text": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": true,
            "tooltip": "The text to be encoded."
          }
        ],
        "clip": [
          "CLIP",
          {
            "tooltip": "The CLIP model used for encoding the text."
          }
        ],
        "strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "style_weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "style_weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer"
          ]
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "images": [
          "IMAGE"
        ],
        "style_image": [
          "IMAGE"
        ],
        "prev_conditioning": [
          "CONDITIONING"
        ],
        "prev_mask": [
          "MASK"
        ],
        "get_image_size": [
          "IMAGE"
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "text",
        "clip",
        "strength",
        "ipadapter",
        "style_weight",
        "style_weight_type",
        "embeds_scaling"
      ],
      "optional": [
        "images",
        "style_image",
        "prev_conditioning",
        "prev_mask",
        "get_image_size",
        "crop"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "IPADAPTER",
      "CONDITIONING",
      "MASK",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "clip",
      "ipadapter",
      "conditioning",
      "mask",
      "get_image_size"
    ],
    "name": "OptHeroLabsMaskCombineConditioningWithStyle",
    "display_name": "Opt HeroLabs Mask Combine Conditioning With Style",
    "description": "",
    "python_module": "custom_nodes.comfyui-herolabs-nodes",
    "category": "herolabs",
    "output_node": false
  },
  "HeroLabsOptInpaintModelConditioning": {
    "input": {
      "required": {
        "positive": [
          "CONDITIONING"
        ],
        "negative": [
          "CONDITIONING"
        ],
        "vae": [
          "VAE"
        ],
        "pixels": [
          "IMAGE"
        ],
        "noise_mask": [
          "BOOLEAN",
          {
            "default": true,
            "tooltip": "Add a noise mask to the latent so sampling will only happen within the mask. Might improve results or completely break things depending on the model."
          }
        ]
      },
      "optional": {
        "mask": [
          "MASK"
        ]
      }
    },
    "input_order": {
      "required": [
        "positive",
        "negative",
        "vae",
        "pixels",
        "noise_mask"
      ],
      "optional": [
        "mask"
      ]
    },
    "output": [
      "CONDITIONING",
      "CONDITIONING",
      "LATENT",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "positive",
      "negative",
      "latent",
      "vae"
    ],
    "name": "HeroLabsOptInpaintModelConditioning",
    "display_name": "HeroLabs Opt InpaintModelConditioning",
    "description": "",
    "python_module": "custom_nodes.comfyui-herolabs-nodes",
    "category": "herolabs",
    "output_node": false
  },
  "HeroLabsOptIPAdapterAdvanced": {
    "input": {
      "required": {
        "model": [
          "MODEL"
        ],
        "ipadapter": [
          "IPADAPTER"
        ],
        "weight": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -1,
            "max": 5,
            "step": 0.05
          }
        ],
        "weight_type": [
          [
            "linear",
            "ease in",
            "ease out",
            "ease in-out",
            "reverse in-out",
            "weak input",
            "weak output",
            "weak middle",
            "strong middle",
            "style transfer",
            "composition",
            "strong style transfer"
          ]
        ],
        "combine_embeds": [
          [
            "concat",
            "add",
            "subtract",
            "average",
            "norm average"
          ]
        ],
        "start_at": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "end_at": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "embeds_scaling": [
          [
            "V only",
            "K+V",
            "K+V w/ C penalty",
            "K+mean(V) w/ C penalty"
          ]
        ]
      },
      "optional": {
        "image": [
          "IMAGE"
        ],
        "image_negative": [
          "IMAGE"
        ],
        "attn_mask": [
          "MASK"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ]
      }
    },
    "input_order": {
      "required": [
        "model",
        "ipadapter",
        "weight",
        "weight_type",
        "combine_embeds",
        "start_at",
        "end_at",
        "embeds_scaling"
      ],
      "optional": [
        "image",
        "image_negative",
        "attn_mask",
        "clip_vision"
      ]
    },
    "output": [
      "MODEL"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "MODEL"
    ],
    "name": "HeroLabsOptIPAdapterAdvanced",
    "display_name": "HeroLabs Opt IPAdapterAdvanced",
    "description": "",
    "python_module": "custom_nodes.comfyui-herolabs-nodes",
    "category": "herolabs",
    "output_node": false
  },
  "HeroLabsWanI2VFlowEdit": {
    "input": {
      "required": {
        "model_name": [
          [
            "None",
            "F.1_3D\u5361\u901aIP\u5f62\u8c61+\u89c6\u89c9\u8fd0\u8425\u6d77\u62a5.safetensors",
            "Wan2.1-Fun-1.3B-Control.safetensors",
            "Wan2.1-Fun-Control-14B_fp8_e4m3fn.safetensors",
            "Wan2_1-I2V-14B-480P_fp8_e4m3fn.safetensors",
            "Wan2_1-I2V-14B-720P_fp8_e4m3fn.safetensors",
            "Wan2_1-T2V-1_3B_bf16.safetensors",
            "Wan2_1_VACE_1_3B_preview_bf16.safetensors",
            "clip_l.safetensors",
            "designPixar_v20.safetensors",
            "flux1-dev-fp8.safetensors",
            "flux1-dev.safetensors",
            "lyhAnime_korIl01.safetensors",
            "skyreels_hunyuan_i2v_bf16.safetensors",
            "wan2.1_i2v_480p_14B_bf16.safetensors",
            "wan2.1_i2v_720p_14B_bf16.safetensors"
          ]
        ],
        "clip_name": [
          [
            "None",
            "clip_l.safetensors",
            "llava_llama3_fp16.safetensors",
            "llava_llama3_fp8_scaled.safetensors",
            "open-clip-xlm-roberta-large-vit-huge-14_visual_fp32.safetensors",
            "t5/t5xxl_fp8_e4m3fn.safetensors",
            "t5xxl_fp16.safetensors",
            "umt5-xxl-enc-bf16.safetensors",
            "umt5_xxl_fp16.safetensors",
            "umt5_xxl_fp8_e4m3fn_scaled.safetensors"
          ]
        ],
        "clip_vision_name": [
          [
            "None",
            "CLIP-ViT-H-14-laion2B-s32B-b79K.safetensors",
            "clip_vision_h.safetensors"
          ]
        ],
        "vae_name": [
          [
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "flux_vae.safetensors",
            "hunyuan_video_vae_bf16.safetensors",
            "hunyuan_video_vae_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 20,
            "min": 1,
            "max": 10000
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "hy_reverse_shift": [
          "FLOAT",
          {
            "default": 5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "flowedit_sampler_skip_steps": [
          "INT",
          {
            "default": 3,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "flowedit_sampler_drift_steps": [
          "INT",
          {
            "default": 15,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "flowedit_sampler_seed": [
          "INT",
          {
            "default": 261901232064655,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "images": [
          "IMAGE"
        ],
        "expand_mask": [
          "INT",
          {
            "default": 0,
            "min": -16384,
            "max": 16384,
            "step": 1
          }
        ],
        "blur_radius": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 100,
            "step": 0.1
          }
        ],
        "positive_prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "source_prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "target_prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "source_cfg": [
          "FLOAT",
          {
            "default": 2,
            "min": 0,
            "max": 18446744073709551615,
            "step": 0.01
          }
        ],
        "target_cfg": [
          "FLOAT",
          {
            "default": 4.5,
            "min": 0,
            "max": 18446744073709551615,
            "step": 0.01
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ]
      },
      "optional": {
        "mask_images": [
          "IMAGE"
        ],
        "model": [
          "MODEL"
        ],
        "clip_vision": [
          "CLIP_VISION"
        ],
        "clip": [
          "CLIP",
          {
            "tooltip": "The CLIP model used for encoding the text."
          }
        ],
        "vae": [
          "VAE",
          {
            "tooltip": "VAE"
          }
        ],
        "upscale_model": [
          "UPSCALE_MODEL"
        ],
        "crop": [
          [
            "disabled",
            "center"
          ]
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name",
        "clip_name",
        "clip_vision_name",
        "vae_name",
        "scheduler",
        "steps",
        "denoise",
        "hy_reverse_shift",
        "flowedit_sampler_skip_steps",
        "flowedit_sampler_drift_steps",
        "flowedit_sampler_seed",
        "images",
        "expand_mask",
        "blur_radius",
        "positive_prompt",
        "negative_prompt",
        "source_prompt",
        "target_prompt",
        "source_cfg",
        "target_cfg",
        "width",
        "height"
      ],
      "optional": [
        "mask_images",
        "model",
        "clip_vision",
        "clip",
        "vae",
        "upscale_model",
        "crop"
      ]
    },
    "output": [
      "IMAGE",
      "MODEL",
      "CLIP_VISION",
      "CLIP",
      "VAE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "images",
      "model",
      "clip_vision",
      "clip",
      "vae"
    ],
    "name": "HeroLabsWanI2VFlowEdit",
    "display_name": "HeroLabs WAN I2V FlowEdit",
    "description": "",
    "python_module": "custom_nodes.comfyui-herolabs-nodes",
    "category": "herolabs",
    "output_node": false
  },
  "HeroLabsWanSplitImages": {
    "input": {
      "required": {
        "images": [
          "IMAGE"
        ]
      },
      "optional": {
        "threshold": [
          "INT",
          {
            "default": 0,
            "step": 1,
            "min": 0,
            "max": 9007199254740991
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "images"
      ],
      "optional": [
        "threshold"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "IMAGE",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE_A",
      "A_count",
      "IMAGE_B",
      "B_count"
    ],
    "name": "HeroLabsWanSplitImages",
    "display_name": "HeoLabs WAN Split Images",
    "description": "",
    "python_module": "custom_nodes.comfyui-herolabs-nodes",
    "category": "herolabs",
    "output_node": false
  },
  "HeroLabsWanV2VFunControl": {
    "input": {
      "required": {
        "model_name": [
          [
            "None",
            "F.1_3D\u5361\u901aIP\u5f62\u8c61+\u89c6\u89c9\u8fd0\u8425\u6d77\u62a5.safetensors",
            "Wan2.1-Fun-1.3B-Control.safetensors",
            "Wan2.1-Fun-Control-14B_fp8_e4m3fn.safetensors",
            "Wan2_1-I2V-14B-480P_fp8_e4m3fn.safetensors",
            "Wan2_1-I2V-14B-720P_fp8_e4m3fn.safetensors",
            "Wan2_1-T2V-1_3B_bf16.safetensors",
            "Wan2_1_VACE_1_3B_preview_bf16.safetensors",
            "clip_l.safetensors",
            "designPixar_v20.safetensors",
            "flux1-dev-fp8.safetensors",
            "flux1-dev.safetensors",
            "lyhAnime_korIl01.safetensors",
            "skyreels_hunyuan_i2v_bf16.safetensors",
            "wan2.1_i2v_480p_14B_bf16.safetensors",
            "wan2.1_i2v_720p_14B_bf16.safetensors"
          ],
          {
            "tooltip": "These models are loaded from the 'ComfyUI/models/diffusion_models' -folder"
          }
        ],
        "base_precision": [
          [
            "fp32",
            "bf16",
            "fp16",
            "fp16_fast"
          ],
          {
            "default": "bf16"
          }
        ],
        "quantization": [
          [
            "disabled",
            "fp8_e4m3fn",
            "fp8_e4m3fn_fast",
            "fp8_e5m2",
            "fp8_e4m3fn_fast_no_ffn",
            "torchao_fp8dq",
            "torchao_fp8dqrow",
            "torchao_int8dq",
            "torchao_fp6",
            "torchao_int4",
            "torchao_int8"
          ],
          {
            "default": "disabled",
            "tooltip": "optional quantization method"
          }
        ],
        "load_device": [
          [
            "main_device",
            "offload_device"
          ],
          {
            "default": "main_device",
            "tooltip": "Initial device to load the model to, NOT recommended with the larger models unless you have 48GB+ VRAM"
          }
        ],
        "text_encoder_name": [
          [
            "None",
            "clip_l.safetensors",
            "llava_llama3_fp16.safetensors",
            "llava_llama3_fp8_scaled.safetensors",
            "open-clip-xlm-roberta-large-vit-huge-14_visual_fp32.safetensors",
            "t5/t5xxl_fp8_e4m3fn.safetensors",
            "t5xxl_fp16.safetensors",
            "umt5-xxl-enc-bf16.safetensors",
            "umt5_xxl_fp16.safetensors",
            "umt5_xxl_fp8_e4m3fn_scaled.safetensors"
          ],
          {
            "tooltip": "These models are loaded from 'ComfyUI/models/text_encoders'"
          }
        ],
        "text_encoder_precision": [
          [
            "fp32",
            "bf16"
          ],
          {
            "default": "bf16"
          }
        ],
        "vae_name": [
          [
            "None",
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "flux_vae.safetensors",
            "hunyuan_video_vae_bf16.safetensors",
            "hunyuan_video_vae_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "vae_precision": [
          [
            "fp16",
            "fp32",
            "bf16"
          ],
          {
            "default": "fp16"
          }
        ],
        "start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "Start percent of the control signal"
          }
        ],
        "end_percent": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01,
            "tooltip": "End percent of the control signal"
          }
        ],
        "clip_vision_name": [
          [
            "None",
            "CLIP-ViT-H-14-laion2B-s32B-b79K.safetensors",
            "clip_vision_h.safetensors"
          ]
        ],
        "images": [
          "IMAGE"
        ],
        "start_image": [
          "IMAGE"
        ],
        "steps": [
          "INT",
          {
            "default": 30,
            "min": 1
          }
        ],
        "cfg": [
          "FLOAT",
          {
            "default": 6.0,
            "min": 0.0,
            "max": 30.0,
            "step": 0.01
          }
        ],
        "shift": [
          "FLOAT",
          {
            "default": 5.0,
            "min": 0.0,
            "max": 1000.0,
            "step": 0.01
          }
        ],
        "seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "scheduler": [
          [
            "unipc",
            "unipc/beta",
            "dpm++",
            "dpm++/beta",
            "dpm++_sde",
            "dpm++_sde/beta",
            "euler",
            "euler/beta",
            "deis",
            "lcm",
            "lcm/beta"
          ],
          {
            "default": "unipc"
          }
        ],
        "positive_prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "width": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "height": [
          "INT",
          {
            "default": 512,
            "min": 0,
            "max": 16384,
            "step": 1
          }
        ],
        "numer_frames": [
          "INT",
          {
            "default": 30,
            "min": 1,
            "step": 1
          }
        ]
      },
      "optional": {
        "model": [
          "WANVIDEOMODEL"
        ],
        "clip_vision": [
          "CLIP_VISION",
          {
            "tooltip": "The CLIP_VISION model used for encoding the text."
          }
        ],
        "text_encoders": [
          "WANTEXTENCODER"
        ],
        "vae": [
          "WANVAE"
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name",
        "base_precision",
        "quantization",
        "load_device",
        "text_encoder_name",
        "text_encoder_precision",
        "vae_name",
        "vae_precision",
        "start_percent",
        "end_percent",
        "clip_vision_name",
        "images",
        "start_image",
        "steps",
        "cfg",
        "shift",
        "seed",
        "scheduler",
        "positive_prompt",
        "negative_prompt",
        "width",
        "height",
        "numer_frames"
      ],
      "optional": [
        "model",
        "clip_vision",
        "text_encoders",
        "vae"
      ]
    },
    "output": [
      "IMAGE",
      "WANVIDEOMODEL",
      "CLIP_VISION",
      "WANTEXTENCODER",
      "WANVAE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "model",
      "clip_vision",
      "text_encoder",
      "vae"
    ],
    "name": "HeroLabsWanV2VFunControl",
    "display_name": "HeroLabs Wan V2V Fun Control",
    "description": "",
    "python_module": "custom_nodes.comfyui-herolabs-nodes",
    "category": "herolabs",
    "output_node": false
  },
  "HeroLabsFluxI2I": {
    "input": {
      "required": {
        "model_name": [
          [
            "None",
            "F.1_3D\u5361\u901aIP\u5f62\u8c61+\u89c6\u89c9\u8fd0\u8425\u6d77\u62a5.safetensors",
            "Wan2.1-Fun-1.3B-Control.safetensors",
            "Wan2.1-Fun-Control-14B_fp8_e4m3fn.safetensors",
            "Wan2_1-I2V-14B-480P_fp8_e4m3fn.safetensors",
            "Wan2_1-I2V-14B-720P_fp8_e4m3fn.safetensors",
            "Wan2_1-T2V-1_3B_bf16.safetensors",
            "Wan2_1_VACE_1_3B_preview_bf16.safetensors",
            "clip_l.safetensors",
            "designPixar_v20.safetensors",
            "flux1-dev-fp8.safetensors",
            "flux1-dev.safetensors",
            "lyhAnime_korIl01.safetensors",
            "skyreels_hunyuan_i2v_bf16.safetensors",
            "wan2.1_i2v_480p_14B_bf16.safetensors",
            "wan2.1_i2v_720p_14B_bf16.safetensors"
          ]
        ],
        "clip_name1": [
          [
            "None",
            "clip_l.safetensors",
            "llava_llama3_fp16.safetensors",
            "llava_llama3_fp8_scaled.safetensors",
            "open-clip-xlm-roberta-large-vit-huge-14_visual_fp32.safetensors",
            "t5/t5xxl_fp8_e4m3fn.safetensors",
            "t5xxl_fp16.safetensors",
            "umt5-xxl-enc-bf16.safetensors",
            "umt5_xxl_fp16.safetensors",
            "umt5_xxl_fp8_e4m3fn_scaled.safetensors"
          ]
        ],
        "clip_name2": [
          [
            "None",
            "clip_l.safetensors",
            "llava_llama3_fp16.safetensors",
            "llava_llama3_fp8_scaled.safetensors",
            "open-clip-xlm-roberta-large-vit-huge-14_visual_fp32.safetensors",
            "t5/t5xxl_fp8_e4m3fn.safetensors",
            "t5xxl_fp16.safetensors",
            "umt5-xxl-enc-bf16.safetensors",
            "umt5_xxl_fp16.safetensors",
            "umt5_xxl_fp8_e4m3fn_scaled.safetensors"
          ]
        ],
        "vae_name": [
          [
            "SDXL/sdxl_vae.safetensors",
            "Wan2_1_VAE_bf16.safetensors",
            "Wan2_1_VAE_fp32.safetensors",
            "flux_vae.safetensors",
            "hunyuan_video_vae_bf16.safetensors",
            "hunyuan_video_vae_fp32.safetensors",
            "wan_2.1_vae.safetensors"
          ]
        ],
        "image": [
          "IMAGE"
        ],
        "guidance": [
          "FLOAT",
          {
            "default": 3.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.1
          }
        ],
        "sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "steps": [
          "INT",
          {
            "default": 25,
            "min": 1,
            "max": 10000
          }
        ],
        "denoise": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ],
        "noise": [
          "NOISE"
        ],
        "max_shift": [
          "FLOAT",
          {
            "default": 1.15,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "base_shift": [
          "FLOAT",
          {
            "default": 0.5,
            "min": 0.0,
            "max": 100.0,
            "step": 0.01
          }
        ],
        "positive_prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "negative_prompt": [
          "STRING",
          {
            "default": "",
            "multiline": true
          }
        ],
        "controlnet_name": [
          [
            "None",
            "FLUX.1-dev-ControlNet-Union-Pro.safetensors",
            "FLUX.1/InstantX-FLUX1-Dev-Union/diffusion_pytorch_model.safetensors",
            "FLUX.1/flux_shakker_labs_union_pro-fp8_e4m3fn.safetensors",
            "FLUX.1/jasperai-dev-Depth/diffusion_pytorch_model.safetensors",
            "FLUX.1/jasperai-dev-Surface-Normals/diffusion_pytorch_model.safetensors",
            "SDXL/controlnet-canny-sdxl-1.0/diffusion_pytorch_model_V2.safetensors",
            "SDXL/controlnet-union-sdxl-1.0/diffusion_pytorch_model_promax.safetensors",
            "diffusion_pytorch_model.safetensors"
          ]
        ],
        "controlnet_strength": [
          "FLOAT",
          {
            "default": 0.9,
            "min": 0.0,
            "max": 10.0,
            "step": 0.01
          }
        ],
        "controlnet_start_percent": [
          "FLOAT",
          {
            "default": 0.0,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "controlnet_end_percent": [
          "FLOAT",
          {
            "default": 0.65,
            "min": 0.0,
            "max": 1.0,
            "step": 0.001
          }
        ],
        "controlnet_type": [
          [
            "auto",
            "canny",
            "tile",
            "depth",
            "blur",
            "pose",
            "gray",
            "low quality"
          ]
        ],
        "lora_name": [
          [
            "3D_Caricature.safetensors",
            "3D_Cartoon_Vision_flux_v1.safetensors",
            "3D_Fairytales.safetensors",
            "3d animation style_lora-000012.safetensors",
            "3dstyl1z3d.safetensors",
            "Anime_CRABDM.safetensors",
            "Anime_flux.safetensors",
            "Anime_styler_v1.safetensors",
            "Canopus-Pixar-3D-FluxDev-LoRA.safetensors",
            "ClayAnimationStyle.safetensors",
            "Comic book opus IV.safetensors",
            "Comic_Collection_Flux.safetensors",
            "Comic_FLUX_V1.safetensors",
            "Cute_3d_Cartoon_Flux.safetensors",
            "Detailedskin&textures.safetensors",
            "DisneyStyleSMALLERV2.safetensors",
            "Eldritch_Classic_Comics_1.1.5.safetensors",
            "F.1_3D\u5361\u901aIP\u5f62\u8c61+\u89c6\u89c9\u8fd0\u8425\u6d77\u62a5.safetensors",
            "Flux_Detailer_v3-000007.safetensors",
            "Ghibli.safetensors",
            "Graphic_Novel_Illustration-000007.safetensors",
            "Hollywood Cinematic Film style v1.safetensors",
            "Jixar_flux_v2.safetensors",
            "MuratDilmanov_FLUX_PAseer.safetensors",
            "PaintedComicFLUX-000015.safetensors",
            "PixarPerfect_3D_Animation_Style_FLUX-000001.safetensors",
            "RealisticComicBook_LORA_FLUX.safetensors",
            "Storyboard_sketch--FLUX.safetensors",
            "Studio_Ghibli_Flux.safetensors",
            "Su_MCraft_AP_Ep81.safetensors",
            "Wiz-VintageComic-Underground-Flux.safetensors",
            "aesthetic2-cdo-0.5.safetensors",
            "amateurphoto-v6-forcu.safetensors",
            "aniani_flux_lora_v02.safetensors",
            "anime_v1_000019000.safetensors",
            "animeoutlineV4_16.safetensors",
            "comic strip style v2.safetensors",
            "disney_lora_comfy_converted.safetensors",
            "e70c0dda1d9c07c46d8a5a984a9a0760.safetensors",
            "flat_colour_anime_style_v3.4.safetensors",
            "j_clay_flux_rank16_bf16.safetensors",
            "lineart_flux.safetensors",
            "lora.safetensors",
            "m1.safetensors",
            "modern-anime-style.safetensors",
            "noirstyle.safetensors",
            "photograph-flux-lora-V1.safetensors",
            "porco_rosso.safetensors",
            "skin texture style v5.safetensors",
            "skyreels-i2v-smooth-lora-test-00000350.safetensors",
            "super-realism.safetensors",
            "\u851a\u84ddBlue 2D\u6e38\u620f\u5730\u56feFLUX2.0.safetensors"
          ]
        ],
        "lora_strength": [
          "FLOAT",
          {
            "default": 1.0,
            "min": -100.0,
            "max": 100.0,
            "step": 0.01
          }
        ]
      },
      "optional": {
        "model": [
          "MODEL"
        ],
        "clip": [
          "CLIP",
          {
            "tooltip": "The CLIP model used for encoding the text."
          }
        ],
        "control_net": [
          "CONTROL_NET"
        ],
        "upscale_model": [
          "UPSCALE_MODEL"
        ],
        "upscale_by": [
          "FLOAT",
          {
            "default": 1.2,
            "min": 0.05,
            "max": 4,
            "step": 0.05
          }
        ],
        "upscale_seed": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 18446744073709551615
          }
        ],
        "upscale_steps": [
          "INT",
          {
            "default": 25,
            "min": 1,
            "max": 10000,
            "step": 1
          }
        ],
        "upscale_cfg": [
          "FLOAT",
          {
            "default": 1.0,
            "min": 0.0,
            "max": 100.0
          }
        ],
        "upscale_sampler_name": [
          [
            "euler",
            "euler_cfg_pp",
            "euler_ancestral",
            "euler_ancestral_cfg_pp",
            "heun",
            "heunpp2",
            "dpm_2",
            "dpm_2_ancestral",
            "lms",
            "dpm_fast",
            "dpm_adaptive",
            "dpmpp_2s_ancestral",
            "dpmpp_2s_ancestral_cfg_pp",
            "dpmpp_sde",
            "dpmpp_sde_gpu",
            "dpmpp_2m",
            "dpmpp_2m_cfg_pp",
            "dpmpp_2m_sde",
            "dpmpp_2m_sde_gpu",
            "dpmpp_3m_sde",
            "dpmpp_3m_sde_gpu",
            "ddpm",
            "lcm",
            "ipndm",
            "ipndm_v",
            "deis",
            "res_multistep",
            "res_multistep_cfg_pp",
            "res_multistep_ancestral",
            "res_multistep_ancestral_cfg_pp",
            "gradient_estimation",
            "er_sde",
            "seeds_2",
            "seeds_3",
            "ddim",
            "uni_pc",
            "uni_pc_bh2"
          ]
        ],
        "upscale_scheduler": [
          [
            "normal",
            "karras",
            "exponential",
            "sgm_uniform",
            "simple",
            "ddim_uniform",
            "beta",
            "linear_quadratic",
            "kl_optimal"
          ]
        ],
        "upscale_denoise": [
          "FLOAT",
          {
            "default": 0.2,
            "min": 0.0,
            "max": 1.0,
            "step": 0.01
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "model_name",
        "clip_name1",
        "clip_name2",
        "vae_name",
        "image",
        "guidance",
        "sampler_name",
        "scheduler",
        "steps",
        "denoise",
        "noise",
        "max_shift",
        "base_shift",
        "positive_prompt",
        "negative_prompt",
        "controlnet_name",
        "controlnet_strength",
        "controlnet_start_percent",
        "controlnet_end_percent",
        "controlnet_type",
        "lora_name",
        "lora_strength"
      ],
      "optional": [
        "model",
        "clip",
        "control_net",
        "upscale_model",
        "upscale_by",
        "upscale_seed",
        "upscale_steps",
        "upscale_cfg",
        "upscale_sampler_name",
        "upscale_scheduler",
        "upscale_denoise"
      ]
    },
    "output": [
      "MODEL",
      "CLIP",
      "VAE",
      "CONTROL_NET",
      "IMAGE"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "model",
      "clip",
      "vae",
      "controlnet",
      "image"
    ],
    "name": "HeroLabsFluxI2I",
    "display_name": "HeroLabs Flux I2I",
    "description": "",
    "python_module": "custom_nodes.comfyui-herolabs-nodes",
    "category": "herolabs",
    "output_node": false
  },
  "HeroLabsStringFunction": {
    "input": {
      "required": {
        "action": [
          [
            "append",
            "replace"
          ],
          {}
        ],
        "tidy_tags": [
          [
            "yes",
            "no"
          ],
          {}
        ]
      },
      "optional": {
        "text_a": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "text_b": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ],
        "text_c": [
          "STRING",
          {
            "multiline": true,
            "dynamicPrompts": false
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "action",
        "tidy_tags"
      ],
      "optional": [
        "text_a",
        "text_b",
        "text_c"
      ]
    },
    "output": [
      "STRING"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "STRING"
    ],
    "name": "HeroLabsStringFunction",
    "display_name": "HeroLabs String Function",
    "description": "",
    "python_module": "custom_nodes.comfyui-herolabs-nodes",
    "category": "herolabs",
    "output_node": true
  },
  "HeroLabsMixColorByMask": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ],
        "r": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "g": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "b": [
          "INT",
          {
            "default": 0,
            "min": 0,
            "max": 255,
            "step": 1
          }
        ],
        "mask": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image",
        "r",
        "g",
        "b",
        "mask"
      ]
    },
    "output": [
      "IMAGE"
    ],
    "output_is_list": [
      false
    ],
    "output_name": [
      "IMAGE"
    ],
    "name": "HeroLabsMixColorByMask",
    "display_name": "HeroLabs Mix Color By Mask",
    "description": "",
    "python_module": "custom_nodes.comfyui-herolabs-nodes",
    "category": "herolabs",
    "output_node": false
  },
  "HeroLabsGetImageSizeAndCount": {
    "input": {
      "required": {
        "image": [
          "IMAGE"
        ]
      }
    },
    "input_order": {
      "required": [
        "image"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false,
      false
    ],
    "output_name": [
      "image",
      "width",
      "height",
      "count"
    ],
    "name": "HeroLabsGetImageSizeAndCount",
    "display_name": "HeroLabs Get Image Size & Count",
    "description": "\nReturns width, height and batch size of the image,  \nand passes it through unchanged.  \n\n",
    "python_module": "custom_nodes.comfyui-herolabs-nodes",
    "category": "herolabs",
    "output_node": false
  },
  "HeroLabsImageScaleByShortSide": {
    "input": {
      "required": {
        "original": [
          "IMAGE"
        ],
        "upscale_method": [
          [
            "nearest-exact",
            "bilinear",
            "area"
          ]
        ],
        "shortside": [
          "INT",
          {
            "default": 512,
            "min": 32,
            "max": 4096,
            "step": 32
          }
        ]
      }
    },
    "input_order": {
      "required": [
        "original",
        "upscale_method",
        "shortside"
      ]
    },
    "output": [
      "IMAGE",
      "INT",
      "INT"
    ],
    "output_is_list": [
      false,
      false,
      false
    ],
    "output_name": [
      "IMAGE",
      "width",
      "height"
    ],
    "name": "HeroLabsImageScaleByShortSide",
    "display_name": "HeroLabs Image Scale By ShortSide",
    "description": "",
    "python_module": "custom_nodes.comfyui-herolabs-nodes",
    "category": "WLSH Nodes/upscaling",
    "output_node": false
  }
}
